// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nio_2eproto;
namespace apollo {
namespace canbus {
class Accreq7f;
class Accreq7fDefaultTypeInternal;
extern Accreq7fDefaultTypeInternal _Accreq7f_default_instance_;
class Acmbody4a;
class Acmbody4aDefaultTypeInternal;
extern Acmbody4aDefaultTypeInternal _Acmbody4a_default_instance_;
class Aebreq79;
class Aebreq79DefaultTypeInternal;
extern Aebreq79DefaultTypeInternal _Aebreq79_default_instance_;
class Avpreq15e;
class Avpreq15eDefaultTypeInternal;
extern Avpreq15eDefaultTypeInternal _Avpreq15e_default_instance_;
class Bcusts5e;
class Bcusts5eDefaultTypeInternal;
extern Bcusts5eDefaultTypeInternal _Bcusts5e_default_instance_;
class Bodystatus24d;
class Bodystatus24dDefaultTypeInternal;
extern Bodystatus24dDefaultTypeInternal _Bodystatus24d_default_instance_;
class Brkdrvstatus24c;
class Brkdrvstatus24cDefaultTypeInternal;
extern Brkdrvstatus24cDefaultTypeInternal _Brkdrvstatus24c_default_instance_;
class Driverstatus24e;
class Driverstatus24eDefaultTypeInternal;
extern Driverstatus24eDefaultTypeInternal _Driverstatus24e_default_instance_;
class Epsreqc6;
class Epsreqc6DefaultTypeInternal;
extern Epsreqc6DefaultTypeInternal _Epsreqc6_default_instance_;
class Epsstatus01d5;
class Epsstatus01d5DefaultTypeInternal;
extern Epsstatus01d5DefaultTypeInternal _Epsstatus01d5_default_instance_;
class Epsstatus02d6;
class Epsstatus02d6DefaultTypeInternal;
extern Epsstatus02d6DefaultTypeInternal _Epsstatus02d6_default_instance_;
class Lightreq336;
class Lightreq336DefaultTypeInternal;
extern Lightreq336DefaultTypeInternal _Lightreq336_default_instance_;
class Motorsts018e;
class Motorsts018eDefaultTypeInternal;
extern Motorsts018eDefaultTypeInternal _Motorsts018e_default_instance_;
class Motorsts0286;
class Motorsts0286DefaultTypeInternal;
extern Motorsts0286DefaultTypeInternal _Motorsts0286_default_instance_;
class Nio;
class NioDefaultTypeInternal;
extern NioDefaultTypeInternal _Nio_default_instance_;
class Pulsecnt65;
class Pulsecnt65DefaultTypeInternal;
extern Pulsecnt65DefaultTypeInternal _Pulsecnt65_default_instance_;
class Scmsts7b;
class Scmsts7bDefaultTypeInternal;
extern Scmsts7bDefaultTypeInternal _Scmsts7b_default_instance_;
class Vcusts01218;
class Vcusts01218DefaultTypeInternal;
extern Vcusts01218DefaultTypeInternal _Vcusts01218_default_instance_;
class Vcusts0221c;
class Vcusts0221cDefaultTypeInternal;
extern Vcusts0221cDefaultTypeInternal _Vcusts0221c_default_instance_;
class Vehiclelights2c7;
class Vehiclelights2c7DefaultTypeInternal;
extern Vehiclelights2c7DefaultTypeInternal _Vehiclelights2c7_default_instance_;
class Whlspdfront51;
class Whlspdfront51DefaultTypeInternal;
extern Whlspdfront51DefaultTypeInternal _Whlspdfront51_default_instance_;
class Whlspdrear52;
class Whlspdrear52DefaultTypeInternal;
extern Whlspdrear52DefaultTypeInternal _Whlspdrear52_default_instance_;
}  // namespace canbus
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::canbus::Accreq7f* Arena::CreateMaybeMessage<::apollo::canbus::Accreq7f>(Arena*);
template<> ::apollo::canbus::Acmbody4a* Arena::CreateMaybeMessage<::apollo::canbus::Acmbody4a>(Arena*);
template<> ::apollo::canbus::Aebreq79* Arena::CreateMaybeMessage<::apollo::canbus::Aebreq79>(Arena*);
template<> ::apollo::canbus::Avpreq15e* Arena::CreateMaybeMessage<::apollo::canbus::Avpreq15e>(Arena*);
template<> ::apollo::canbus::Bcusts5e* Arena::CreateMaybeMessage<::apollo::canbus::Bcusts5e>(Arena*);
template<> ::apollo::canbus::Bodystatus24d* Arena::CreateMaybeMessage<::apollo::canbus::Bodystatus24d>(Arena*);
template<> ::apollo::canbus::Brkdrvstatus24c* Arena::CreateMaybeMessage<::apollo::canbus::Brkdrvstatus24c>(Arena*);
template<> ::apollo::canbus::Driverstatus24e* Arena::CreateMaybeMessage<::apollo::canbus::Driverstatus24e>(Arena*);
template<> ::apollo::canbus::Epsreqc6* Arena::CreateMaybeMessage<::apollo::canbus::Epsreqc6>(Arena*);
template<> ::apollo::canbus::Epsstatus01d5* Arena::CreateMaybeMessage<::apollo::canbus::Epsstatus01d5>(Arena*);
template<> ::apollo::canbus::Epsstatus02d6* Arena::CreateMaybeMessage<::apollo::canbus::Epsstatus02d6>(Arena*);
template<> ::apollo::canbus::Lightreq336* Arena::CreateMaybeMessage<::apollo::canbus::Lightreq336>(Arena*);
template<> ::apollo::canbus::Motorsts018e* Arena::CreateMaybeMessage<::apollo::canbus::Motorsts018e>(Arena*);
template<> ::apollo::canbus::Motorsts0286* Arena::CreateMaybeMessage<::apollo::canbus::Motorsts0286>(Arena*);
template<> ::apollo::canbus::Nio* Arena::CreateMaybeMessage<::apollo::canbus::Nio>(Arena*);
template<> ::apollo::canbus::Pulsecnt65* Arena::CreateMaybeMessage<::apollo::canbus::Pulsecnt65>(Arena*);
template<> ::apollo::canbus::Scmsts7b* Arena::CreateMaybeMessage<::apollo::canbus::Scmsts7b>(Arena*);
template<> ::apollo::canbus::Vcusts01218* Arena::CreateMaybeMessage<::apollo::canbus::Vcusts01218>(Arena*);
template<> ::apollo::canbus::Vcusts0221c* Arena::CreateMaybeMessage<::apollo::canbus::Vcusts0221c>(Arena*);
template<> ::apollo::canbus::Vehiclelights2c7* Arena::CreateMaybeMessage<::apollo::canbus::Vehiclelights2c7>(Arena*);
template<> ::apollo::canbus::Whlspdfront51* Arena::CreateMaybeMessage<::apollo::canbus::Whlspdfront51>(Arena*);
template<> ::apollo::canbus::Whlspdrear52* Arena::CreateMaybeMessage<::apollo::canbus::Whlspdrear52>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace canbus {

enum Avpreq15e_AvpapaparkmodType : int {
  Avpreq15e_AvpapaparkmodType_AvpApaparkmodoff = 0,
  Avpreq15e_AvpapaparkmodType_AvpApaparkmodSapa = 1,
  Avpreq15e_AvpapaparkmodType_AvpApaparkmodVpps = 2,
  Avpreq15e_AvpapaparkmodType_AvpApaparkmodNBS = 3,
  Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x4 = 4,
  Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x5 = 5,
  Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x6 = 6,
  Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x7 = 7
};
bool Avpreq15e_AvpapaparkmodType_IsValid(int value);
constexpr Avpreq15e_AvpapaparkmodType Avpreq15e_AvpapaparkmodType_AvpapaparkmodType_MIN = Avpreq15e_AvpapaparkmodType_AvpApaparkmodoff;
constexpr Avpreq15e_AvpapaparkmodType Avpreq15e_AvpapaparkmodType_AvpapaparkmodType_MAX = Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x7;
constexpr int Avpreq15e_AvpapaparkmodType_AvpapaparkmodType_ARRAYSIZE = Avpreq15e_AvpapaparkmodType_AvpapaparkmodType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Avpreq15e_AvpapaparkmodType_descriptor();
template<typename T>
inline const std::string& Avpreq15e_AvpapaparkmodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Avpreq15e_AvpapaparkmodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Avpreq15e_AvpapaparkmodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Avpreq15e_AvpapaparkmodType_descriptor(), enum_t_value);
}
inline bool Avpreq15e_AvpapaparkmodType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Avpreq15e_AvpapaparkmodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Avpreq15e_AvpapaparkmodType>(
    Avpreq15e_AvpapaparkmodType_descriptor(), name, value);
}
enum Avpreq15e_AvpnbsstsType : int {
  Avpreq15e_AvpnbsstsType_AvpNbsstsNBSOff = 0,
  Avpreq15e_AvpnbsstsType_AvpNbsstsNBSInitial = 1,
  Avpreq15e_AvpnbsstsType_AvpNbsstsNBSStandby = 2,
  Avpreq15e_AvpnbsstsType_AvpNbsstsNBSMoving = 3,
  Avpreq15e_AvpnbsstsType_AvpNbsstsNBSAbort = 4,
  Avpreq15e_AvpnbsstsType_AvpNbsstsNBSFail = 5,
  Avpreq15e_AvpnbsstsType_AvpNbsstsDescriptionForTheValue0x6 = 6,
  Avpreq15e_AvpnbsstsType_AvpNbsstsDescriptionForTheValue0x7 = 7
};
bool Avpreq15e_AvpnbsstsType_IsValid(int value);
constexpr Avpreq15e_AvpnbsstsType Avpreq15e_AvpnbsstsType_AvpnbsstsType_MIN = Avpreq15e_AvpnbsstsType_AvpNbsstsNBSOff;
constexpr Avpreq15e_AvpnbsstsType Avpreq15e_AvpnbsstsType_AvpnbsstsType_MAX = Avpreq15e_AvpnbsstsType_AvpNbsstsDescriptionForTheValue0x7;
constexpr int Avpreq15e_AvpnbsstsType_AvpnbsstsType_ARRAYSIZE = Avpreq15e_AvpnbsstsType_AvpnbsstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Avpreq15e_AvpnbsstsType_descriptor();
template<typename T>
inline const std::string& Avpreq15e_AvpnbsstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Avpreq15e_AvpnbsstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Avpreq15e_AvpnbsstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Avpreq15e_AvpnbsstsType_descriptor(), enum_t_value);
}
inline bool Avpreq15e_AvpnbsstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Avpreq15e_AvpnbsstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Avpreq15e_AvpnbsstsType>(
    Avpreq15e_AvpnbsstsType_descriptor(), name, value);
}
enum Avpreq15e_AvpadcvcunbsstsType : int {
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSOFF = 0,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSIntial = 1,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSStandby = 2,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSMoving = 3,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSAbort = 4,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSFail = 5,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0x6 = 6,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0x7 = 7,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0x8 = 8,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0x9 = 9,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xA = 10,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xB = 11,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xC = 12,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xD = 13,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xE = 14,
  Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xF = 15
};
bool Avpreq15e_AvpadcvcunbsstsType_IsValid(int value);
constexpr Avpreq15e_AvpadcvcunbsstsType Avpreq15e_AvpadcvcunbsstsType_AvpadcvcunbsstsType_MIN = Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSOFF;
constexpr Avpreq15e_AvpadcvcunbsstsType Avpreq15e_AvpadcvcunbsstsType_AvpadcvcunbsstsType_MAX = Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xF;
constexpr int Avpreq15e_AvpadcvcunbsstsType_AvpadcvcunbsstsType_ARRAYSIZE = Avpreq15e_AvpadcvcunbsstsType_AvpadcvcunbsstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Avpreq15e_AvpadcvcunbsstsType_descriptor();
template<typename T>
inline const std::string& Avpreq15e_AvpadcvcunbsstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Avpreq15e_AvpadcvcunbsstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Avpreq15e_AvpadcvcunbsstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Avpreq15e_AvpadcvcunbsstsType_descriptor(), enum_t_value);
}
inline bool Avpreq15e_AvpadcvcunbsstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Avpreq15e_AvpadcvcunbsstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Avpreq15e_AvpadcvcunbsstsType>(
    Avpreq15e_AvpadcvcunbsstsType_descriptor(), name, value);
}
enum Avpreq15e_AvpapastsType : int {
  Avpreq15e_AvpapastsType_AvpApastsinitial = 0,
  Avpreq15e_AvpapastsType_AvpApastsStandby = 1,
  Avpreq15e_AvpapastsType_AvpApastsSearch = 2,
  Avpreq15e_AvpapastsType_AvpApastsPreGuidence = 3,
  Avpreq15e_AvpapastsType_AvpApastsGuidance = 4,
  Avpreq15e_AvpapastsType_AvpApastsReserved = 5,
  Avpreq15e_AvpapastsType_AvpApastsAbort = 6,
  Avpreq15e_AvpapastsType_AvpApastsFault = 7,
  Avpreq15e_AvpapastsType_AvpApastsPubRoad = 8,
  Avpreq15e_AvpapastsType_AvpApastsOffMode = 9,
  Avpreq15e_AvpapastsType_AvpApastsReserved10 = 10,
  Avpreq15e_AvpapastsType_AvpApastsReserved11 = 11,
  Avpreq15e_AvpapastsType_AvpApastsReserved12 = 12,
  Avpreq15e_AvpapastsType_AvpApastsReserved13 = 13,
  Avpreq15e_AvpapastsType_AvpApastsReserved14 = 14,
  Avpreq15e_AvpapastsType_AvpApastsReserved15 = 15
};
bool Avpreq15e_AvpapastsType_IsValid(int value);
constexpr Avpreq15e_AvpapastsType Avpreq15e_AvpapastsType_AvpapastsType_MIN = Avpreq15e_AvpapastsType_AvpApastsinitial;
constexpr Avpreq15e_AvpapastsType Avpreq15e_AvpapastsType_AvpapastsType_MAX = Avpreq15e_AvpapastsType_AvpApastsReserved15;
constexpr int Avpreq15e_AvpapastsType_AvpapastsType_ARRAYSIZE = Avpreq15e_AvpapastsType_AvpapastsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Avpreq15e_AvpapastsType_descriptor();
template<typename T>
inline const std::string& Avpreq15e_AvpapastsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Avpreq15e_AvpapastsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Avpreq15e_AvpapastsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Avpreq15e_AvpapastsType_descriptor(), enum_t_value);
}
inline bool Avpreq15e_AvpapastsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Avpreq15e_AvpapastsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Avpreq15e_AvpapastsType>(
    Avpreq15e_AvpapastsType_descriptor(), name, value);
}
enum Avpreq15e_AvpbrkmodstsType : int {
  Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsNoBrake = 0,
  Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsComfort = 1,
  Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsEmergency = 2,
  Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsReserved = 3
};
bool Avpreq15e_AvpbrkmodstsType_IsValid(int value);
constexpr Avpreq15e_AvpbrkmodstsType Avpreq15e_AvpbrkmodstsType_AvpbrkmodstsType_MIN = Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsNoBrake;
constexpr Avpreq15e_AvpbrkmodstsType Avpreq15e_AvpbrkmodstsType_AvpbrkmodstsType_MAX = Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsReserved;
constexpr int Avpreq15e_AvpbrkmodstsType_AvpbrkmodstsType_ARRAYSIZE = Avpreq15e_AvpbrkmodstsType_AvpbrkmodstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Avpreq15e_AvpbrkmodstsType_descriptor();
template<typename T>
inline const std::string& Avpreq15e_AvpbrkmodstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Avpreq15e_AvpbrkmodstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Avpreq15e_AvpbrkmodstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Avpreq15e_AvpbrkmodstsType_descriptor(), enum_t_value);
}
inline bool Avpreq15e_AvpbrkmodstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Avpreq15e_AvpbrkmodstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Avpreq15e_AvpbrkmodstsType>(
    Avpreq15e_AvpbrkmodstsType_descriptor(), name, value);
}
enum Avpreq15e_AvptargearreqType : int {
  Avpreq15e_AvptargearreqType_AvpTargearreqNoGearRequest = 0,
  Avpreq15e_AvptargearreqType_AvpTargearreqD = 1,
  Avpreq15e_AvptargearreqType_AvpTargearreqR = 2,
  Avpreq15e_AvptargearreqType_AvpTargearreqN = 3,
  Avpreq15e_AvptargearreqType_AvpTargearreqP = 4
};
bool Avpreq15e_AvptargearreqType_IsValid(int value);
constexpr Avpreq15e_AvptargearreqType Avpreq15e_AvptargearreqType_AvptargearreqType_MIN = Avpreq15e_AvptargearreqType_AvpTargearreqNoGearRequest;
constexpr Avpreq15e_AvptargearreqType Avpreq15e_AvptargearreqType_AvptargearreqType_MAX = Avpreq15e_AvptargearreqType_AvpTargearreqP;
constexpr int Avpreq15e_AvptargearreqType_AvptargearreqType_ARRAYSIZE = Avpreq15e_AvptargearreqType_AvptargearreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Avpreq15e_AvptargearreqType_descriptor();
template<typename T>
inline const std::string& Avpreq15e_AvptargearreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Avpreq15e_AvptargearreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Avpreq15e_AvptargearreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Avpreq15e_AvptargearreqType_descriptor(), enum_t_value);
}
inline bool Avpreq15e_AvptargearreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Avpreq15e_AvptargearreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Avpreq15e_AvptargearreqType>(
    Avpreq15e_AvptargearreqType_descriptor(), name, value);
}
enum Avpreq15e_AvpcrtlmodeType : int {
  Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeNo = 0,
  Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeDistCrtl = 1,
  Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeSpdCrtl = 2,
  Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeRes = 3
};
bool Avpreq15e_AvpcrtlmodeType_IsValid(int value);
constexpr Avpreq15e_AvpcrtlmodeType Avpreq15e_AvpcrtlmodeType_AvpcrtlmodeType_MIN = Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeNo;
constexpr Avpreq15e_AvpcrtlmodeType Avpreq15e_AvpcrtlmodeType_AvpcrtlmodeType_MAX = Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeRes;
constexpr int Avpreq15e_AvpcrtlmodeType_AvpcrtlmodeType_ARRAYSIZE = Avpreq15e_AvpcrtlmodeType_AvpcrtlmodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Avpreq15e_AvpcrtlmodeType_descriptor();
template<typename T>
inline const std::string& Avpreq15e_AvpcrtlmodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Avpreq15e_AvpcrtlmodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Avpreq15e_AvpcrtlmodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Avpreq15e_AvpcrtlmodeType_descriptor(), enum_t_value);
}
inline bool Avpreq15e_AvpcrtlmodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Avpreq15e_AvpcrtlmodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Avpreq15e_AvpcrtlmodeType>(
    Avpreq15e_AvpcrtlmodeType_descriptor(), name, value);
}
enum Vcusts01218_VcunbsstsType : int {
  Vcusts01218_VcunbsstsType_VCUNBSSTsNBSInitial = 0,
  Vcusts01218_VcunbsstsType_VCUNBSSTsNBSStandby = 1,
  Vcusts01218_VcunbsstsType_VCUNBSSTsNBSActive = 2,
  Vcusts01218_VcunbsstsType_VCUNBSSTsNBSOverride = 3,
  Vcusts01218_VcunbsstsType_VCUNBSSTsNBSInhibit = 4,
  Vcusts01218_VcunbsstsType_VCUNBSSTsObstacleDetected = 5,
  Vcusts01218_VcunbsstsType_VCUNBSSTsGearshiftAllowed = 6,
  Vcusts01218_VcunbsstsType_VCUNBSSTsRes = 7
};
bool Vcusts01218_VcunbsstsType_IsValid(int value);
constexpr Vcusts01218_VcunbsstsType Vcusts01218_VcunbsstsType_VcunbsstsType_MIN = Vcusts01218_VcunbsstsType_VCUNBSSTsNBSInitial;
constexpr Vcusts01218_VcunbsstsType Vcusts01218_VcunbsstsType_VcunbsstsType_MAX = Vcusts01218_VcunbsstsType_VCUNBSSTsRes;
constexpr int Vcusts01218_VcunbsstsType_VcunbsstsType_ARRAYSIZE = Vcusts01218_VcunbsstsType_VcunbsstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcusts01218_VcunbsstsType_descriptor();
template<typename T>
inline const std::string& Vcusts01218_VcunbsstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcusts01218_VcunbsstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcusts01218_VcunbsstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcusts01218_VcunbsstsType_descriptor(), enum_t_value);
}
inline bool Vcusts01218_VcunbsstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcusts01218_VcunbsstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcusts01218_VcunbsstsType>(
    Vcusts01218_VcunbsstsType_descriptor(), name, value);
}
enum Vcusts01218_TaggearvalidType : int {
  Vcusts01218_TaggearvalidType_TagGearvalidvalid = 0,
  Vcusts01218_TaggearvalidType_TagGearvalidinvalid = 1
};
bool Vcusts01218_TaggearvalidType_IsValid(int value);
constexpr Vcusts01218_TaggearvalidType Vcusts01218_TaggearvalidType_TaggearvalidType_MIN = Vcusts01218_TaggearvalidType_TagGearvalidvalid;
constexpr Vcusts01218_TaggearvalidType Vcusts01218_TaggearvalidType_TaggearvalidType_MAX = Vcusts01218_TaggearvalidType_TagGearvalidinvalid;
constexpr int Vcusts01218_TaggearvalidType_TaggearvalidType_ARRAYSIZE = Vcusts01218_TaggearvalidType_TaggearvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcusts01218_TaggearvalidType_descriptor();
template<typename T>
inline const std::string& Vcusts01218_TaggearvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcusts01218_TaggearvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcusts01218_TaggearvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcusts01218_TaggearvalidType_descriptor(), enum_t_value);
}
inline bool Vcusts01218_TaggearvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcusts01218_TaggearvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcusts01218_TaggearvalidType>(
    Vcusts01218_TaggearvalidType_descriptor(), name, value);
}
enum Vcusts01218_ActualgearvalidType : int {
  Vcusts01218_ActualgearvalidType_ActualGearvalidvalid = 0,
  Vcusts01218_ActualgearvalidType_ActualGearvalidinvalid = 1
};
bool Vcusts01218_ActualgearvalidType_IsValid(int value);
constexpr Vcusts01218_ActualgearvalidType Vcusts01218_ActualgearvalidType_ActualgearvalidType_MIN = Vcusts01218_ActualgearvalidType_ActualGearvalidvalid;
constexpr Vcusts01218_ActualgearvalidType Vcusts01218_ActualgearvalidType_ActualgearvalidType_MAX = Vcusts01218_ActualgearvalidType_ActualGearvalidinvalid;
constexpr int Vcusts01218_ActualgearvalidType_ActualgearvalidType_ARRAYSIZE = Vcusts01218_ActualgearvalidType_ActualgearvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcusts01218_ActualgearvalidType_descriptor();
template<typename T>
inline const std::string& Vcusts01218_ActualgearvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcusts01218_ActualgearvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcusts01218_ActualgearvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcusts01218_ActualgearvalidType_descriptor(), enum_t_value);
}
inline bool Vcusts01218_ActualgearvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcusts01218_ActualgearvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcusts01218_ActualgearvalidType>(
    Vcusts01218_ActualgearvalidType_descriptor(), name, value);
}
enum Vcusts01218_ActualgearType : int {
  Vcusts01218_ActualgearType_ActualGearnone = 0,
  Vcusts01218_ActualgearType_ActualGearD = 1,
  Vcusts01218_ActualgearType_ActualGearR = 2,
  Vcusts01218_ActualgearType_ActualGearN = 3,
  Vcusts01218_ActualgearType_ActualGearP = 4
};
bool Vcusts01218_ActualgearType_IsValid(int value);
constexpr Vcusts01218_ActualgearType Vcusts01218_ActualgearType_ActualgearType_MIN = Vcusts01218_ActualgearType_ActualGearnone;
constexpr Vcusts01218_ActualgearType Vcusts01218_ActualgearType_ActualgearType_MAX = Vcusts01218_ActualgearType_ActualGearP;
constexpr int Vcusts01218_ActualgearType_ActualgearType_ARRAYSIZE = Vcusts01218_ActualgearType_ActualgearType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcusts01218_ActualgearType_descriptor();
template<typename T>
inline const std::string& Vcusts01218_ActualgearType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcusts01218_ActualgearType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcusts01218_ActualgearType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcusts01218_ActualgearType_descriptor(), enum_t_value);
}
inline bool Vcusts01218_ActualgearType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcusts01218_ActualgearType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcusts01218_ActualgearType>(
    Vcusts01218_ActualgearType_descriptor(), name, value);
}
enum Vcusts01218_VcuepfailType : int {
  Vcusts01218_VcuepfailType_VcuEpfailInit = 0,
  Vcusts01218_VcuepfailType_VcuEpfailNormal = 1,
  Vcusts01218_VcuepfailType_VcuEpfailFault = 2
};
bool Vcusts01218_VcuepfailType_IsValid(int value);
constexpr Vcusts01218_VcuepfailType Vcusts01218_VcuepfailType_VcuepfailType_MIN = Vcusts01218_VcuepfailType_VcuEpfailInit;
constexpr Vcusts01218_VcuepfailType Vcusts01218_VcuepfailType_VcuepfailType_MAX = Vcusts01218_VcuepfailType_VcuEpfailFault;
constexpr int Vcusts01218_VcuepfailType_VcuepfailType_ARRAYSIZE = Vcusts01218_VcuepfailType_VcuepfailType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcusts01218_VcuepfailType_descriptor();
template<typename T>
inline const std::string& Vcusts01218_VcuepfailType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcusts01218_VcuepfailType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcusts01218_VcuepfailType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcusts01218_VcuepfailType_descriptor(), enum_t_value);
}
inline bool Vcusts01218_VcuepfailType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcusts01218_VcuepfailType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcusts01218_VcuepfailType>(
    Vcusts01218_VcuepfailType_descriptor(), name, value);
}
enum Vcusts01218_VcumodindType : int {
  Vcusts01218_VcumodindType_VCUmodindAuto = 0,
  Vcusts01218_VcumodindType_VCUmodindEconomy = 1,
  Vcusts01218_VcumodindType_VCUmodindComfort = 2,
  Vcusts01218_VcumodindType_VCUmodindSport = 3,
  Vcusts01218_VcumodindType_VCUmodindReserved4 = 4,
  Vcusts01218_VcumodindType_VCUmodindReserved5 = 5,
  Vcusts01218_VcumodindType_VCUmodindReserved6 = 6,
  Vcusts01218_VcumodindType_VCUmodindInvalid = 7
};
bool Vcusts01218_VcumodindType_IsValid(int value);
constexpr Vcusts01218_VcumodindType Vcusts01218_VcumodindType_VcumodindType_MIN = Vcusts01218_VcumodindType_VCUmodindAuto;
constexpr Vcusts01218_VcumodindType Vcusts01218_VcumodindType_VcumodindType_MAX = Vcusts01218_VcumodindType_VCUmodindInvalid;
constexpr int Vcusts01218_VcumodindType_VcumodindType_ARRAYSIZE = Vcusts01218_VcumodindType_VcumodindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcusts01218_VcumodindType_descriptor();
template<typename T>
inline const std::string& Vcusts01218_VcumodindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcusts01218_VcumodindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcusts01218_VcumodindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcusts01218_VcumodindType_descriptor(), enum_t_value);
}
inline bool Vcusts01218_VcumodindType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcusts01218_VcumodindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcusts01218_VcumodindType>(
    Vcusts01218_VcumodindType_descriptor(), name, value);
}
enum Vcusts0221c_AccpedelftravelvalidType : int {
  Vcusts0221c_AccpedelftravelvalidType_Accpedelftravelvalidvalid = 0,
  Vcusts0221c_AccpedelftravelvalidType_Accpedelftravelvalidinvalid = 1
};
bool Vcusts0221c_AccpedelftravelvalidType_IsValid(int value);
constexpr Vcusts0221c_AccpedelftravelvalidType Vcusts0221c_AccpedelftravelvalidType_AccpedelftravelvalidType_MIN = Vcusts0221c_AccpedelftravelvalidType_Accpedelftravelvalidvalid;
constexpr Vcusts0221c_AccpedelftravelvalidType Vcusts0221c_AccpedelftravelvalidType_AccpedelftravelvalidType_MAX = Vcusts0221c_AccpedelftravelvalidType_Accpedelftravelvalidinvalid;
constexpr int Vcusts0221c_AccpedelftravelvalidType_AccpedelftravelvalidType_ARRAYSIZE = Vcusts0221c_AccpedelftravelvalidType_AccpedelftravelvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcusts0221c_AccpedelftravelvalidType_descriptor();
template<typename T>
inline const std::string& Vcusts0221c_AccpedelftravelvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcusts0221c_AccpedelftravelvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcusts0221c_AccpedelftravelvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcusts0221c_AccpedelftravelvalidType_descriptor(), enum_t_value);
}
inline bool Vcusts0221c_AccpedelftravelvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcusts0221c_AccpedelftravelvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcusts0221c_AccpedelftravelvalidType>(
    Vcusts0221c_AccpedelftravelvalidType_descriptor(), name, value);
}
enum Vcusts0221c_AccpedacttravelvalidType : int {
  Vcusts0221c_AccpedacttravelvalidType_Accpedacttravelvalidvalid = 0,
  Vcusts0221c_AccpedacttravelvalidType_Accpedacttravelvalidinvalid = 1
};
bool Vcusts0221c_AccpedacttravelvalidType_IsValid(int value);
constexpr Vcusts0221c_AccpedacttravelvalidType Vcusts0221c_AccpedacttravelvalidType_AccpedacttravelvalidType_MIN = Vcusts0221c_AccpedacttravelvalidType_Accpedacttravelvalidvalid;
constexpr Vcusts0221c_AccpedacttravelvalidType Vcusts0221c_AccpedacttravelvalidType_AccpedacttravelvalidType_MAX = Vcusts0221c_AccpedacttravelvalidType_Accpedacttravelvalidinvalid;
constexpr int Vcusts0221c_AccpedacttravelvalidType_AccpedacttravelvalidType_ARRAYSIZE = Vcusts0221c_AccpedacttravelvalidType_AccpedacttravelvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vcusts0221c_AccpedacttravelvalidType_descriptor();
template<typename T>
inline const std::string& Vcusts0221c_AccpedacttravelvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vcusts0221c_AccpedacttravelvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vcusts0221c_AccpedacttravelvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vcusts0221c_AccpedacttravelvalidType_descriptor(), enum_t_value);
}
inline bool Vcusts0221c_AccpedacttravelvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vcusts0221c_AccpedacttravelvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vcusts0221c_AccpedacttravelvalidType>(
    Vcusts0221c_AccpedacttravelvalidType_descriptor(), name, value);
}
enum Brkdrvstatus24c_BrkpressurestsType : int {
  Brkdrvstatus24c_BrkpressurestsType_BrkpressureStsNotInit = 0,
  Brkdrvstatus24c_BrkpressurestsType_BrkpressureStsnormal = 1,
  Brkdrvstatus24c_BrkpressurestsType_BrkpressureStsfault = 2
};
bool Brkdrvstatus24c_BrkpressurestsType_IsValid(int value);
constexpr Brkdrvstatus24c_BrkpressurestsType Brkdrvstatus24c_BrkpressurestsType_BrkpressurestsType_MIN = Brkdrvstatus24c_BrkpressurestsType_BrkpressureStsNotInit;
constexpr Brkdrvstatus24c_BrkpressurestsType Brkdrvstatus24c_BrkpressurestsType_BrkpressurestsType_MAX = Brkdrvstatus24c_BrkpressurestsType_BrkpressureStsfault;
constexpr int Brkdrvstatus24c_BrkpressurestsType_BrkpressurestsType_ARRAYSIZE = Brkdrvstatus24c_BrkpressurestsType_BrkpressurestsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_BrkpressurestsType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_BrkpressurestsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_BrkpressurestsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_BrkpressurestsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_BrkpressurestsType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_BrkpressurestsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_BrkpressurestsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_BrkpressurestsType>(
    Brkdrvstatus24c_BrkpressurestsType_descriptor(), name, value);
}
enum Brkdrvstatus24c_VehspdstsType : int {
  Brkdrvstatus24c_VehspdstsType_Vehspdstsvalid = 0,
  Brkdrvstatus24c_VehspdstsType_Vehspdstsinvalid = 1
};
bool Brkdrvstatus24c_VehspdstsType_IsValid(int value);
constexpr Brkdrvstatus24c_VehspdstsType Brkdrvstatus24c_VehspdstsType_VehspdstsType_MIN = Brkdrvstatus24c_VehspdstsType_Vehspdstsvalid;
constexpr Brkdrvstatus24c_VehspdstsType Brkdrvstatus24c_VehspdstsType_VehspdstsType_MAX = Brkdrvstatus24c_VehspdstsType_Vehspdstsinvalid;
constexpr int Brkdrvstatus24c_VehspdstsType_VehspdstsType_ARRAYSIZE = Brkdrvstatus24c_VehspdstsType_VehspdstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_VehspdstsType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_VehspdstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_VehspdstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_VehspdstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_VehspdstsType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_VehspdstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_VehspdstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_VehspdstsType>(
    Brkdrvstatus24c_VehspdstsType_descriptor(), name, value);
}
enum Brkdrvstatus24c_VehspddirType : int {
  Brkdrvstatus24c_VehspddirType_Vehspddirstandstill = 0,
  Brkdrvstatus24c_VehspddirType_Vehspddirforward = 1,
  Brkdrvstatus24c_VehspddirType_Vehspddirbackward = 2,
  Brkdrvstatus24c_VehspddirType_Vehspddirreserved = 3
};
bool Brkdrvstatus24c_VehspddirType_IsValid(int value);
constexpr Brkdrvstatus24c_VehspddirType Brkdrvstatus24c_VehspddirType_VehspddirType_MIN = Brkdrvstatus24c_VehspddirType_Vehspddirstandstill;
constexpr Brkdrvstatus24c_VehspddirType Brkdrvstatus24c_VehspddirType_VehspddirType_MAX = Brkdrvstatus24c_VehspddirType_Vehspddirreserved;
constexpr int Brkdrvstatus24c_VehspddirType_VehspddirType_ARRAYSIZE = Brkdrvstatus24c_VehspddirType_VehspddirType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_VehspddirType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_VehspddirType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_VehspddirType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_VehspddirType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_VehspddirType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_VehspddirType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_VehspddirType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_VehspddirType>(
    Brkdrvstatus24c_VehspddirType_descriptor(), name, value);
}
enum Brkdrvstatus24c_EpbswstsType : int {
  Brkdrvstatus24c_EpbswstsType_EPBswstsNotPressed = 0,
  Brkdrvstatus24c_EpbswstsType_EPBswstspressed = 1,
  Brkdrvstatus24c_EpbswstsType_EPBswstsreserved = 2,
  Brkdrvstatus24c_EpbswstsType_EPBswstsinvalid = 3
};
bool Brkdrvstatus24c_EpbswstsType_IsValid(int value);
constexpr Brkdrvstatus24c_EpbswstsType Brkdrvstatus24c_EpbswstsType_EpbswstsType_MIN = Brkdrvstatus24c_EpbswstsType_EPBswstsNotPressed;
constexpr Brkdrvstatus24c_EpbswstsType Brkdrvstatus24c_EpbswstsType_EpbswstsType_MAX = Brkdrvstatus24c_EpbswstsType_EPBswstsinvalid;
constexpr int Brkdrvstatus24c_EpbswstsType_EpbswstsType_ARRAYSIZE = Brkdrvstatus24c_EpbswstsType_EpbswstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_EpbswstsType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_EpbswstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_EpbswstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_EpbswstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_EpbswstsType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_EpbswstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_EpbswstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_EpbswstsType>(
    Brkdrvstatus24c_EpbswstsType_descriptor(), name, value);
}
enum Brkdrvstatus24c_DrvstateType : int {
  Brkdrvstatus24c_DrvstateType_DrvStateParked = 0,
  Brkdrvstatus24c_DrvstateType_DrvStateReadyForDrving = 1,
  Brkdrvstatus24c_DrvstateType_DrvStatedriving = 2,
  Brkdrvstatus24c_DrvstateType_DrvStateinvalid = 3,
  Brkdrvstatus24c_DrvstateType_DrvStateInvalidOtherValuesReserved = 15
};
bool Brkdrvstatus24c_DrvstateType_IsValid(int value);
constexpr Brkdrvstatus24c_DrvstateType Brkdrvstatus24c_DrvstateType_DrvstateType_MIN = Brkdrvstatus24c_DrvstateType_DrvStateParked;
constexpr Brkdrvstatus24c_DrvstateType Brkdrvstatus24c_DrvstateType_DrvstateType_MAX = Brkdrvstatus24c_DrvstateType_DrvStateInvalidOtherValuesReserved;
constexpr int Brkdrvstatus24c_DrvstateType_DrvstateType_ARRAYSIZE = Brkdrvstatus24c_DrvstateType_DrvstateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_DrvstateType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_DrvstateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_DrvstateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_DrvstateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_DrvstateType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_DrvstateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_DrvstateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_DrvstateType>(
    Brkdrvstatus24c_DrvstateType_descriptor(), name, value);
}
enum Brkdrvstatus24c_BrkpedlstsType : int {
  Brkdrvstatus24c_BrkpedlstsType_BrkPedlStsNotPressed = 0,
  Brkdrvstatus24c_BrkpedlstsType_BrkPedlStspressed = 1,
  Brkdrvstatus24c_BrkpedlstsType_BrkPedlStsreserved = 2,
  Brkdrvstatus24c_BrkpedlstsType_BrkPedlStsinvalid = 3
};
bool Brkdrvstatus24c_BrkpedlstsType_IsValid(int value);
constexpr Brkdrvstatus24c_BrkpedlstsType Brkdrvstatus24c_BrkpedlstsType_BrkpedlstsType_MIN = Brkdrvstatus24c_BrkpedlstsType_BrkPedlStsNotPressed;
constexpr Brkdrvstatus24c_BrkpedlstsType Brkdrvstatus24c_BrkpedlstsType_BrkpedlstsType_MAX = Brkdrvstatus24c_BrkpedlstsType_BrkPedlStsinvalid;
constexpr int Brkdrvstatus24c_BrkpedlstsType_BrkpedlstsType_ARRAYSIZE = Brkdrvstatus24c_BrkpedlstsType_BrkpedlstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_BrkpedlstsType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_BrkpedlstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_BrkpedlstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_BrkpedlstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_BrkpedlstsType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_BrkpedlstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_BrkpedlstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_BrkpedlstsType>(
    Brkdrvstatus24c_BrkpedlstsType_descriptor(), name, value);
}
enum Brkdrvstatus24c_BrklistsType : int {
  Brkdrvstatus24c_BrklistsType_BrkListsNoRequest = 0,
  Brkdrvstatus24c_BrklistsType_BrkListsrequest = 1,
  Brkdrvstatus24c_BrklistsType_BrkListsreserved = 2,
  Brkdrvstatus24c_BrklistsType_BrkListsinvalid = 3
};
bool Brkdrvstatus24c_BrklistsType_IsValid(int value);
constexpr Brkdrvstatus24c_BrklistsType Brkdrvstatus24c_BrklistsType_BrklistsType_MIN = Brkdrvstatus24c_BrklistsType_BrkListsNoRequest;
constexpr Brkdrvstatus24c_BrklistsType Brkdrvstatus24c_BrklistsType_BrklistsType_MAX = Brkdrvstatus24c_BrklistsType_BrkListsinvalid;
constexpr int Brkdrvstatus24c_BrklistsType_BrklistsType_ARRAYSIZE = Brkdrvstatus24c_BrklistsType_BrklistsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_BrklistsType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_BrklistsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_BrklistsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_BrklistsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_BrklistsType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_BrklistsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_BrklistsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_BrklistsType>(
    Brkdrvstatus24c_BrklistsType_descriptor(), name, value);
}
enum Brkdrvstatus24c_EpbfaillampType : int {
  Brkdrvstatus24c_EpbfaillampType_EPBfaillampoff = 0,
  Brkdrvstatus24c_EpbfaillampType_EPBfaillampon = 1,
  Brkdrvstatus24c_EpbfaillampType_EPBfaillampblinking = 2,
  Brkdrvstatus24c_EpbfaillampType_EPBfaillampinvalid = 3
};
bool Brkdrvstatus24c_EpbfaillampType_IsValid(int value);
constexpr Brkdrvstatus24c_EpbfaillampType Brkdrvstatus24c_EpbfaillampType_EpbfaillampType_MIN = Brkdrvstatus24c_EpbfaillampType_EPBfaillampoff;
constexpr Brkdrvstatus24c_EpbfaillampType Brkdrvstatus24c_EpbfaillampType_EpbfaillampType_MAX = Brkdrvstatus24c_EpbfaillampType_EPBfaillampinvalid;
constexpr int Brkdrvstatus24c_EpbfaillampType_EpbfaillampType_ARRAYSIZE = Brkdrvstatus24c_EpbfaillampType_EpbfaillampType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_EpbfaillampType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_EpbfaillampType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_EpbfaillampType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_EpbfaillampType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_EpbfaillampType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_EpbfaillampType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_EpbfaillampType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_EpbfaillampType>(
    Brkdrvstatus24c_EpbfaillampType_descriptor(), name, value);
}
enum Brkdrvstatus24c_EpbwarnlampType : int {
  Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampOnlyReadyDuringFunction = 0,
  Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampDoorOpenDuringAuto = 1,
  Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampSeatBeltUnbuckled = 2,
  Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampDoorOpenAndBeltUnbuckled = 3
};
bool Brkdrvstatus24c_EpbwarnlampType_IsValid(int value);
constexpr Brkdrvstatus24c_EpbwarnlampType Brkdrvstatus24c_EpbwarnlampType_EpbwarnlampType_MIN = Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampOnlyReadyDuringFunction;
constexpr Brkdrvstatus24c_EpbwarnlampType Brkdrvstatus24c_EpbwarnlampType_EpbwarnlampType_MAX = Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampDoorOpenAndBeltUnbuckled;
constexpr int Brkdrvstatus24c_EpbwarnlampType_EpbwarnlampType_ARRAYSIZE = Brkdrvstatus24c_EpbwarnlampType_EpbwarnlampType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Brkdrvstatus24c_EpbwarnlampType_descriptor();
template<typename T>
inline const std::string& Brkdrvstatus24c_EpbwarnlampType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Brkdrvstatus24c_EpbwarnlampType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Brkdrvstatus24c_EpbwarnlampType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Brkdrvstatus24c_EpbwarnlampType_descriptor(), enum_t_value);
}
inline bool Brkdrvstatus24c_EpbwarnlampType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Brkdrvstatus24c_EpbwarnlampType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Brkdrvstatus24c_EpbwarnlampType>(
    Brkdrvstatus24c_EpbwarnlampType_descriptor(), name, value);
}
enum Bodystatus24d_DoorajarfrntlestsType : int {
  Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsOpened = 0,
  Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsClosed = 1,
  Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsReserved = 2,
  Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsInvalid = 3
};
bool Bodystatus24d_DoorajarfrntlestsType_IsValid(int value);
constexpr Bodystatus24d_DoorajarfrntlestsType Bodystatus24d_DoorajarfrntlestsType_DoorajarfrntlestsType_MIN = Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsOpened;
constexpr Bodystatus24d_DoorajarfrntlestsType Bodystatus24d_DoorajarfrntlestsType_DoorajarfrntlestsType_MAX = Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsInvalid;
constexpr int Bodystatus24d_DoorajarfrntlestsType_DoorajarfrntlestsType_ARRAYSIZE = Bodystatus24d_DoorajarfrntlestsType_DoorajarfrntlestsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_DoorajarfrntlestsType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_DoorajarfrntlestsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_DoorajarfrntlestsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_DoorajarfrntlestsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_DoorajarfrntlestsType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_DoorajarfrntlestsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_DoorajarfrntlestsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_DoorajarfrntlestsType>(
    Bodystatus24d_DoorajarfrntlestsType_descriptor(), name, value);
}
enum Bodystatus24d_DoorajarfrntristsType : int {
  Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsOpened = 0,
  Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsClosed = 1,
  Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsReserved = 2,
  Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsInvalid = 3
};
bool Bodystatus24d_DoorajarfrntristsType_IsValid(int value);
constexpr Bodystatus24d_DoorajarfrntristsType Bodystatus24d_DoorajarfrntristsType_DoorajarfrntristsType_MIN = Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsOpened;
constexpr Bodystatus24d_DoorajarfrntristsType Bodystatus24d_DoorajarfrntristsType_DoorajarfrntristsType_MAX = Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsInvalid;
constexpr int Bodystatus24d_DoorajarfrntristsType_DoorajarfrntristsType_ARRAYSIZE = Bodystatus24d_DoorajarfrntristsType_DoorajarfrntristsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_DoorajarfrntristsType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_DoorajarfrntristsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_DoorajarfrntristsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_DoorajarfrntristsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_DoorajarfrntristsType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_DoorajarfrntristsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_DoorajarfrntristsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_DoorajarfrntristsType>(
    Bodystatus24d_DoorajarfrntristsType_descriptor(), name, value);
}
enum Bodystatus24d_DoorajarrelestsType : int {
  Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsOpened = 0,
  Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsClosed = 1,
  Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsReserved = 2,
  Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsInvalid = 3
};
bool Bodystatus24d_DoorajarrelestsType_IsValid(int value);
constexpr Bodystatus24d_DoorajarrelestsType Bodystatus24d_DoorajarrelestsType_DoorajarrelestsType_MIN = Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsOpened;
constexpr Bodystatus24d_DoorajarrelestsType Bodystatus24d_DoorajarrelestsType_DoorajarrelestsType_MAX = Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsInvalid;
constexpr int Bodystatus24d_DoorajarrelestsType_DoorajarrelestsType_ARRAYSIZE = Bodystatus24d_DoorajarrelestsType_DoorajarrelestsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_DoorajarrelestsType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_DoorajarrelestsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_DoorajarrelestsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_DoorajarrelestsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_DoorajarrelestsType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_DoorajarrelestsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_DoorajarrelestsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_DoorajarrelestsType>(
    Bodystatus24d_DoorajarrelestsType_descriptor(), name, value);
}
enum Bodystatus24d_SeatoccpfrntlefailType : int {
  Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailNoFailure = 0,
  Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailFailure = 1,
  Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailReserved = 2,
  Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailInvalid = 3
};
bool Bodystatus24d_SeatoccpfrntlefailType_IsValid(int value);
constexpr Bodystatus24d_SeatoccpfrntlefailType Bodystatus24d_SeatoccpfrntlefailType_SeatoccpfrntlefailType_MIN = Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailNoFailure;
constexpr Bodystatus24d_SeatoccpfrntlefailType Bodystatus24d_SeatoccpfrntlefailType_SeatoccpfrntlefailType_MAX = Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailInvalid;
constexpr int Bodystatus24d_SeatoccpfrntlefailType_SeatoccpfrntlefailType_ARRAYSIZE = Bodystatus24d_SeatoccpfrntlefailType_SeatoccpfrntlefailType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_SeatoccpfrntlefailType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_SeatoccpfrntlefailType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_SeatoccpfrntlefailType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_SeatoccpfrntlefailType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_SeatoccpfrntlefailType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_SeatoccpfrntlefailType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_SeatoccpfrntlefailType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_SeatoccpfrntlefailType>(
    Bodystatus24d_SeatoccpfrntlefailType_descriptor(), name, value);
}
enum Bodystatus24d_SteerwhlheatstsType : int {
  Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsHeaterOff = 0,
  Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsHeaterOn = 1,
  Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsReserved = 2,
  Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsInvalid = 3
};
bool Bodystatus24d_SteerwhlheatstsType_IsValid(int value);
constexpr Bodystatus24d_SteerwhlheatstsType Bodystatus24d_SteerwhlheatstsType_SteerwhlheatstsType_MIN = Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsHeaterOff;
constexpr Bodystatus24d_SteerwhlheatstsType Bodystatus24d_SteerwhlheatstsType_SteerwhlheatstsType_MAX = Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsInvalid;
constexpr int Bodystatus24d_SteerwhlheatstsType_SteerwhlheatstsType_ARRAYSIZE = Bodystatus24d_SteerwhlheatstsType_SteerwhlheatstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_SteerwhlheatstsType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_SteerwhlheatstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_SteerwhlheatstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_SteerwhlheatstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_SteerwhlheatstsType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_SteerwhlheatstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_SteerwhlheatstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_SteerwhlheatstsType>(
    Bodystatus24d_SteerwhlheatstsType_descriptor(), name, value);
}
enum Bodystatus24d_TrajarstsType : int {
  Bodystatus24d_TrajarstsType_TrAjarStsOpened = 0,
  Bodystatus24d_TrajarstsType_TrAjarStsClosed = 1,
  Bodystatus24d_TrajarstsType_TrAjarStsReserved = 2,
  Bodystatus24d_TrajarstsType_TrAjarStsInvalid = 3
};
bool Bodystatus24d_TrajarstsType_IsValid(int value);
constexpr Bodystatus24d_TrajarstsType Bodystatus24d_TrajarstsType_TrajarstsType_MIN = Bodystatus24d_TrajarstsType_TrAjarStsOpened;
constexpr Bodystatus24d_TrajarstsType Bodystatus24d_TrajarstsType_TrajarstsType_MAX = Bodystatus24d_TrajarstsType_TrAjarStsInvalid;
constexpr int Bodystatus24d_TrajarstsType_TrajarstsType_ARRAYSIZE = Bodystatus24d_TrajarstsType_TrajarstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_TrajarstsType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_TrajarstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_TrajarstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_TrajarstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_TrajarstsType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_TrajarstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_TrajarstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_TrajarstsType>(
    Bodystatus24d_TrajarstsType_descriptor(), name, value);
}
enum Bodystatus24d_HoodajarstsType : int {
  Bodystatus24d_HoodajarstsType_HoodAjarStsOpened = 0,
  Bodystatus24d_HoodajarstsType_HoodAjarStsClosed = 1,
  Bodystatus24d_HoodajarstsType_HoodAjarStsReserved = 2,
  Bodystatus24d_HoodajarstsType_HoodAjarStsInvalid = 3
};
bool Bodystatus24d_HoodajarstsType_IsValid(int value);
constexpr Bodystatus24d_HoodajarstsType Bodystatus24d_HoodajarstsType_HoodajarstsType_MIN = Bodystatus24d_HoodajarstsType_HoodAjarStsOpened;
constexpr Bodystatus24d_HoodajarstsType Bodystatus24d_HoodajarstsType_HoodajarstsType_MAX = Bodystatus24d_HoodajarstsType_HoodAjarStsInvalid;
constexpr int Bodystatus24d_HoodajarstsType_HoodajarstsType_ARRAYSIZE = Bodystatus24d_HoodajarstsType_HoodajarstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_HoodajarstsType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_HoodajarstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_HoodajarstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_HoodajarstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_HoodajarstsType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_HoodajarstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_HoodajarstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_HoodajarstsType>(
    Bodystatus24d_HoodajarstsType_descriptor(), name, value);
}
enum Bodystatus24d_DoorajarreristsType : int {
  Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsOpened = 0,
  Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsClosed = 1,
  Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsReserved = 2,
  Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsInvalid = 3
};
bool Bodystatus24d_DoorajarreristsType_IsValid(int value);
constexpr Bodystatus24d_DoorajarreristsType Bodystatus24d_DoorajarreristsType_DoorajarreristsType_MIN = Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsOpened;
constexpr Bodystatus24d_DoorajarreristsType Bodystatus24d_DoorajarreristsType_DoorajarreristsType_MAX = Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsInvalid;
constexpr int Bodystatus24d_DoorajarreristsType_DoorajarreristsType_ARRAYSIZE = Bodystatus24d_DoorajarreristsType_DoorajarreristsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_DoorajarreristsType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_DoorajarreristsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_DoorajarreristsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_DoorajarreristsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_DoorajarreristsType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_DoorajarreristsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_DoorajarreristsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_DoorajarreristsType>(
    Bodystatus24d_DoorajarreristsType_descriptor(), name, value);
}
enum Bodystatus24d_SeatoccpfrntlestsType : int {
  Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsNoOccupant = 0,
  Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsOccupant = 1,
  Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsReserved = 2,
  Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsInvalid = 3
};
bool Bodystatus24d_SeatoccpfrntlestsType_IsValid(int value);
constexpr Bodystatus24d_SeatoccpfrntlestsType Bodystatus24d_SeatoccpfrntlestsType_SeatoccpfrntlestsType_MIN = Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsNoOccupant;
constexpr Bodystatus24d_SeatoccpfrntlestsType Bodystatus24d_SeatoccpfrntlestsType_SeatoccpfrntlestsType_MAX = Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsInvalid;
constexpr int Bodystatus24d_SeatoccpfrntlestsType_SeatoccpfrntlestsType_ARRAYSIZE = Bodystatus24d_SeatoccpfrntlestsType_SeatoccpfrntlestsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_SeatoccpfrntlestsType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_SeatoccpfrntlestsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_SeatoccpfrntlestsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_SeatoccpfrntlestsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_SeatoccpfrntlestsType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_SeatoccpfrntlestsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_SeatoccpfrntlestsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_SeatoccpfrntlestsType>(
    Bodystatus24d_SeatoccpfrntlestsType_descriptor(), name, value);
}
enum Bodystatus24d_CooltlvllowwarnreqType : int {
  Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqNoRequest = 0,
  Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqRequest = 1,
  Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqReserved = 2,
  Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqInvalid = 3
};
bool Bodystatus24d_CooltlvllowwarnreqType_IsValid(int value);
constexpr Bodystatus24d_CooltlvllowwarnreqType Bodystatus24d_CooltlvllowwarnreqType_CooltlvllowwarnreqType_MIN = Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqNoRequest;
constexpr Bodystatus24d_CooltlvllowwarnreqType Bodystatus24d_CooltlvllowwarnreqType_CooltlvllowwarnreqType_MAX = Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqInvalid;
constexpr int Bodystatus24d_CooltlvllowwarnreqType_CooltlvllowwarnreqType_ARRAYSIZE = Bodystatus24d_CooltlvllowwarnreqType_CooltlvllowwarnreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bodystatus24d_CooltlvllowwarnreqType_descriptor();
template<typename T>
inline const std::string& Bodystatus24d_CooltlvllowwarnreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bodystatus24d_CooltlvllowwarnreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bodystatus24d_CooltlvllowwarnreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bodystatus24d_CooltlvllowwarnreqType_descriptor(), enum_t_value);
}
inline bool Bodystatus24d_CooltlvllowwarnreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bodystatus24d_CooltlvllowwarnreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bodystatus24d_CooltlvllowwarnreqType>(
    Bodystatus24d_CooltlvllowwarnreqType_descriptor(), name, value);
}
enum Driverstatus24e_EpbstsType : int {
  Driverstatus24e_EpbstsType_EPBstsunknow = 0,
  Driverstatus24e_EpbstsType_EPBstsapplied = 1,
  Driverstatus24e_EpbstsType_EPBstsreleasing = 2,
  Driverstatus24e_EpbstsType_EPBstsNotApplied = 3,
  Driverstatus24e_EpbstsType_EPBstsapplying = 4,
  Driverstatus24e_EpbstsType_EPBstsreserved4 = 5,
  Driverstatus24e_EpbstsType_EPBstsreserved6 = 6,
  Driverstatus24e_EpbstsType_EPBstsreserved7 = 7
};
bool Driverstatus24e_EpbstsType_IsValid(int value);
constexpr Driverstatus24e_EpbstsType Driverstatus24e_EpbstsType_EpbstsType_MIN = Driverstatus24e_EpbstsType_EPBstsunknow;
constexpr Driverstatus24e_EpbstsType Driverstatus24e_EpbstsType_EpbstsType_MAX = Driverstatus24e_EpbstsType_EPBstsreserved7;
constexpr int Driverstatus24e_EpbstsType_EpbstsType_ARRAYSIZE = Driverstatus24e_EpbstsType_EpbstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_EpbstsType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_EpbstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_EpbstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_EpbstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_EpbstsType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_EpbstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_EpbstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_EpbstsType>(
    Driverstatus24e_EpbstsType_descriptor(), name, value);
}
enum Driverstatus24e_VcuaccrpedlovrdType : int {
  Driverstatus24e_VcuaccrpedlovrdType_VCUAccrPedlOvrdNoRequest = 0,
  Driverstatus24e_VcuaccrpedlovrdType_VCUAccrPedlOvrdrequest = 1
};
bool Driverstatus24e_VcuaccrpedlovrdType_IsValid(int value);
constexpr Driverstatus24e_VcuaccrpedlovrdType Driverstatus24e_VcuaccrpedlovrdType_VcuaccrpedlovrdType_MIN = Driverstatus24e_VcuaccrpedlovrdType_VCUAccrPedlOvrdNoRequest;
constexpr Driverstatus24e_VcuaccrpedlovrdType Driverstatus24e_VcuaccrpedlovrdType_VcuaccrpedlovrdType_MAX = Driverstatus24e_VcuaccrpedlovrdType_VCUAccrPedlOvrdrequest;
constexpr int Driverstatus24e_VcuaccrpedlovrdType_VcuaccrpedlovrdType_ARRAYSIZE = Driverstatus24e_VcuaccrpedlovrdType_VcuaccrpedlovrdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_VcuaccrpedlovrdType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_VcuaccrpedlovrdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_VcuaccrpedlovrdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_VcuaccrpedlovrdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_VcuaccrpedlovrdType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_VcuaccrpedlovrdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_VcuaccrpedlovrdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_VcuaccrpedlovrdType>(
    Driverstatus24e_VcuaccrpedlovrdType_descriptor(), name, value);
}
enum Driverstatus24e_Ibesp2warningType : int {
  Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterSystemOK = 0,
  Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterInReducedPerformanceYellowLamp = 1,
  Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterDeactivatedYellowLamp = 2,
  Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterInDiagnosisOrPlantMode = 3
};
bool Driverstatus24e_Ibesp2warningType_IsValid(int value);
constexpr Driverstatus24e_Ibesp2warningType Driverstatus24e_Ibesp2warningType_Ibesp2warningType_MIN = Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterSystemOK;
constexpr Driverstatus24e_Ibesp2warningType Driverstatus24e_Ibesp2warningType_Ibesp2warningType_MAX = Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterInDiagnosisOrPlantMode;
constexpr int Driverstatus24e_Ibesp2warningType_Ibesp2warningType_ARRAYSIZE = Driverstatus24e_Ibesp2warningType_Ibesp2warningType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_Ibesp2warningType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_Ibesp2warningType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_Ibesp2warningType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_Ibesp2warningType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_Ibesp2warningType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_Ibesp2warningType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_Ibesp2warningType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_Ibesp2warningType>(
    Driverstatus24e_Ibesp2warningType_descriptor(), name, value);
}
enum Driverstatus24e_AirbwarnreqType : int {
  Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampOff = 0,
  Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampOnFaultDetected = 1,
  Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampIsBlinking = 2,
  Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampOnSystemInitialization = 3
};
bool Driverstatus24e_AirbwarnreqType_IsValid(int value);
constexpr Driverstatus24e_AirbwarnreqType Driverstatus24e_AirbwarnreqType_AirbwarnreqType_MIN = Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampOff;
constexpr Driverstatus24e_AirbwarnreqType Driverstatus24e_AirbwarnreqType_AirbwarnreqType_MAX = Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampOnSystemInitialization;
constexpr int Driverstatus24e_AirbwarnreqType_AirbwarnreqType_ARRAYSIZE = Driverstatus24e_AirbwarnreqType_AirbwarnreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_AirbwarnreqType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_AirbwarnreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_AirbwarnreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_AirbwarnreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_AirbwarnreqType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_AirbwarnreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_AirbwarnreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_AirbwarnreqType>(
    Driverstatus24e_AirbwarnreqType_descriptor(), name, value);
}
enum Driverstatus24e_SeatbltmidrowristsType : int {
  Driverstatus24e_SeatbltmidrowristsType_SeatBltMidRowRiStsSeabeltMiddleRowRightNotBuckled = 0,
  Driverstatus24e_SeatbltmidrowristsType_SeatBltMidRowRiStsSeatbeltMiddleRowRightBuckled = 1
};
bool Driverstatus24e_SeatbltmidrowristsType_IsValid(int value);
constexpr Driverstatus24e_SeatbltmidrowristsType Driverstatus24e_SeatbltmidrowristsType_SeatbltmidrowristsType_MIN = Driverstatus24e_SeatbltmidrowristsType_SeatBltMidRowRiStsSeabeltMiddleRowRightNotBuckled;
constexpr Driverstatus24e_SeatbltmidrowristsType Driverstatus24e_SeatbltmidrowristsType_SeatbltmidrowristsType_MAX = Driverstatus24e_SeatbltmidrowristsType_SeatBltMidRowRiStsSeatbeltMiddleRowRightBuckled;
constexpr int Driverstatus24e_SeatbltmidrowristsType_SeatbltmidrowristsType_ARRAYSIZE = Driverstatus24e_SeatbltmidrowristsType_SeatbltmidrowristsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_SeatbltmidrowristsType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_SeatbltmidrowristsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_SeatbltmidrowristsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_SeatbltmidrowristsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_SeatbltmidrowristsType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_SeatbltmidrowristsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_SeatbltmidrowristsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_SeatbltmidrowristsType>(
    Driverstatus24e_SeatbltmidrowristsType_descriptor(), name, value);
}
enum Driverstatus24e_SeatbltmidrowmidstsType : int {
  Driverstatus24e_SeatbltmidrowmidstsType_SeatBltMidRowMidStsSeabeltMiddleRowMiddleNotBuckled = 0,
  Driverstatus24e_SeatbltmidrowmidstsType_SeatBltMidRowMidStsSeatbeltMiddleRowMiddleBuckled = 1
};
bool Driverstatus24e_SeatbltmidrowmidstsType_IsValid(int value);
constexpr Driverstatus24e_SeatbltmidrowmidstsType Driverstatus24e_SeatbltmidrowmidstsType_SeatbltmidrowmidstsType_MIN = Driverstatus24e_SeatbltmidrowmidstsType_SeatBltMidRowMidStsSeabeltMiddleRowMiddleNotBuckled;
constexpr Driverstatus24e_SeatbltmidrowmidstsType Driverstatus24e_SeatbltmidrowmidstsType_SeatbltmidrowmidstsType_MAX = Driverstatus24e_SeatbltmidrowmidstsType_SeatBltMidRowMidStsSeatbeltMiddleRowMiddleBuckled;
constexpr int Driverstatus24e_SeatbltmidrowmidstsType_SeatbltmidrowmidstsType_ARRAYSIZE = Driverstatus24e_SeatbltmidrowmidstsType_SeatbltmidrowmidstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_SeatbltmidrowmidstsType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_SeatbltmidrowmidstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_SeatbltmidrowmidstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_SeatbltmidrowmidstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_SeatbltmidrowmidstsType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_SeatbltmidrowmidstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_SeatbltmidrowmidstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_SeatbltmidrowmidstsType>(
    Driverstatus24e_SeatbltmidrowmidstsType_descriptor(), name, value);
}
enum Driverstatus24e_SeatbltfrntlestsType : int {
  Driverstatus24e_SeatbltfrntlestsType_SeatBltFrntLeStsSeabeltFrontLeftNotBuckled = 0,
  Driverstatus24e_SeatbltfrntlestsType_SeatBltFrntLeStsSeatbeltFrontLeftBuckled = 1
};
bool Driverstatus24e_SeatbltfrntlestsType_IsValid(int value);
constexpr Driverstatus24e_SeatbltfrntlestsType Driverstatus24e_SeatbltfrntlestsType_SeatbltfrntlestsType_MIN = Driverstatus24e_SeatbltfrntlestsType_SeatBltFrntLeStsSeabeltFrontLeftNotBuckled;
constexpr Driverstatus24e_SeatbltfrntlestsType Driverstatus24e_SeatbltfrntlestsType_SeatbltfrntlestsType_MAX = Driverstatus24e_SeatbltfrntlestsType_SeatBltFrntLeStsSeatbeltFrontLeftBuckled;
constexpr int Driverstatus24e_SeatbltfrntlestsType_SeatbltfrntlestsType_ARRAYSIZE = Driverstatus24e_SeatbltfrntlestsType_SeatbltfrntlestsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_SeatbltfrntlestsType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_SeatbltfrntlestsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_SeatbltfrntlestsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_SeatbltfrntlestsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_SeatbltfrntlestsType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_SeatbltfrntlestsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_SeatbltfrntlestsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_SeatbltfrntlestsType>(
    Driverstatus24e_SeatbltfrntlestsType_descriptor(), name, value);
}
enum Driverstatus24e_PassairbginhbnlampreqType : int {
  Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOff = 0,
  Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOn = 1,
  Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOnSystemInitialization = 2,
  Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqReserved = 3
};
bool Driverstatus24e_PassairbginhbnlampreqType_IsValid(int value);
constexpr Driverstatus24e_PassairbginhbnlampreqType Driverstatus24e_PassairbginhbnlampreqType_PassairbginhbnlampreqType_MIN = Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOff;
constexpr Driverstatus24e_PassairbginhbnlampreqType Driverstatus24e_PassairbginhbnlampreqType_PassairbginhbnlampreqType_MAX = Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqReserved;
constexpr int Driverstatus24e_PassairbginhbnlampreqType_PassairbginhbnlampreqType_ARRAYSIZE = Driverstatus24e_PassairbginhbnlampreqType_PassairbginhbnlampreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_PassairbginhbnlampreqType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_PassairbginhbnlampreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_PassairbginhbnlampreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_PassairbginhbnlampreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_PassairbginhbnlampreqType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_PassairbginhbnlampreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_PassairbginhbnlampreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_PassairbginhbnlampreqType>(
    Driverstatus24e_PassairbginhbnlampreqType_descriptor(), name, value);
}
enum Driverstatus24e_SeatoccptfrntristsType : int {
  Driverstatus24e_SeatoccptfrntristsType_SeatOccptFrntRiStsNoOccupant = 0,
  Driverstatus24e_SeatoccptfrntristsType_SeatOccptFrntRiStsOccupant = 1
};
bool Driverstatus24e_SeatoccptfrntristsType_IsValid(int value);
constexpr Driverstatus24e_SeatoccptfrntristsType Driverstatus24e_SeatoccptfrntristsType_SeatoccptfrntristsType_MIN = Driverstatus24e_SeatoccptfrntristsType_SeatOccptFrntRiStsNoOccupant;
constexpr Driverstatus24e_SeatoccptfrntristsType Driverstatus24e_SeatoccptfrntristsType_SeatoccptfrntristsType_MAX = Driverstatus24e_SeatoccptfrntristsType_SeatOccptFrntRiStsOccupant;
constexpr int Driverstatus24e_SeatoccptfrntristsType_SeatoccptfrntristsType_ARRAYSIZE = Driverstatus24e_SeatoccptfrntristsType_SeatoccptfrntristsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_SeatoccptfrntristsType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_SeatoccptfrntristsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_SeatoccptfrntristsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_SeatoccptfrntristsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_SeatoccptfrntristsType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_SeatoccptfrntristsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_SeatoccptfrntristsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_SeatoccptfrntristsType>(
    Driverstatus24e_SeatoccptfrntristsType_descriptor(), name, value);
}
enum Driverstatus24e_CrashdetdType : int {
  Driverstatus24e_CrashdetdType_CrashDetdCrashNotDetected = 0,
  Driverstatus24e_CrashdetdType_CrashDetdCrashDetected = 1
};
bool Driverstatus24e_CrashdetdType_IsValid(int value);
constexpr Driverstatus24e_CrashdetdType Driverstatus24e_CrashdetdType_CrashdetdType_MIN = Driverstatus24e_CrashdetdType_CrashDetdCrashNotDetected;
constexpr Driverstatus24e_CrashdetdType Driverstatus24e_CrashdetdType_CrashdetdType_MAX = Driverstatus24e_CrashdetdType_CrashDetdCrashDetected;
constexpr int Driverstatus24e_CrashdetdType_CrashdetdType_ARRAYSIZE = Driverstatus24e_CrashdetdType_CrashdetdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_CrashdetdType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_CrashdetdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_CrashdetdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_CrashdetdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_CrashdetdType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_CrashdetdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_CrashdetdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_CrashdetdType>(
    Driverstatus24e_CrashdetdType_descriptor(), name, value);
}
enum Driverstatus24e_SeatbltfrntristsType : int {
  Driverstatus24e_SeatbltfrntristsType_SeatBltFrntRiStsSeabeltFrontRightNotBuckled = 0,
  Driverstatus24e_SeatbltfrntristsType_SeatBltFrntRiStsSeatbeltFrontRightBuckled = 1
};
bool Driverstatus24e_SeatbltfrntristsType_IsValid(int value);
constexpr Driverstatus24e_SeatbltfrntristsType Driverstatus24e_SeatbltfrntristsType_SeatbltfrntristsType_MIN = Driverstatus24e_SeatbltfrntristsType_SeatBltFrntRiStsSeabeltFrontRightNotBuckled;
constexpr Driverstatus24e_SeatbltfrntristsType Driverstatus24e_SeatbltfrntristsType_SeatbltfrntristsType_MAX = Driverstatus24e_SeatbltfrntristsType_SeatBltFrntRiStsSeatbeltFrontRightBuckled;
constexpr int Driverstatus24e_SeatbltfrntristsType_SeatbltfrntristsType_ARRAYSIZE = Driverstatus24e_SeatbltfrntristsType_SeatbltfrntristsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_SeatbltfrntristsType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_SeatbltfrntristsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_SeatbltfrntristsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_SeatbltfrntristsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_SeatbltfrntristsType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_SeatbltfrntristsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_SeatbltfrntristsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_SeatbltfrntristsType>(
    Driverstatus24e_SeatbltfrntristsType_descriptor(), name, value);
}
enum Driverstatus24e_SeatbltmidrowlestsType : int {
  Driverstatus24e_SeatbltmidrowlestsType_SeatBltMidRowLeStsSeabeltMiddleRowLeftNotBuckled = 0,
  Driverstatus24e_SeatbltmidrowlestsType_SeatBltMidRowLeStsSeatbeltMiddleRowLeftBuckled = 1
};
bool Driverstatus24e_SeatbltmidrowlestsType_IsValid(int value);
constexpr Driverstatus24e_SeatbltmidrowlestsType Driverstatus24e_SeatbltmidrowlestsType_SeatbltmidrowlestsType_MIN = Driverstatus24e_SeatbltmidrowlestsType_SeatBltMidRowLeStsSeabeltMiddleRowLeftNotBuckled;
constexpr Driverstatus24e_SeatbltmidrowlestsType Driverstatus24e_SeatbltmidrowlestsType_SeatbltmidrowlestsType_MAX = Driverstatus24e_SeatbltmidrowlestsType_SeatBltMidRowLeStsSeatbeltMiddleRowLeftBuckled;
constexpr int Driverstatus24e_SeatbltmidrowlestsType_SeatbltmidrowlestsType_ARRAYSIZE = Driverstatus24e_SeatbltmidrowlestsType_SeatbltmidrowlestsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Driverstatus24e_SeatbltmidrowlestsType_descriptor();
template<typename T>
inline const std::string& Driverstatus24e_SeatbltmidrowlestsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Driverstatus24e_SeatbltmidrowlestsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Driverstatus24e_SeatbltmidrowlestsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Driverstatus24e_SeatbltmidrowlestsType_descriptor(), enum_t_value);
}
inline bool Driverstatus24e_SeatbltmidrowlestsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Driverstatus24e_SeatbltmidrowlestsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Driverstatus24e_SeatbltmidrowlestsType>(
    Driverstatus24e_SeatbltmidrowlestsType_descriptor(), name, value);
}
enum Vehiclelights2c7_FogfrntlightstsType : int {
  Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStsoff = 0,
  Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStson = 1,
  Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStsreserved = 2,
  Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStsinvalid = 3
};
bool Vehiclelights2c7_FogfrntlightstsType_IsValid(int value);
constexpr Vehiclelights2c7_FogfrntlightstsType Vehiclelights2c7_FogfrntlightstsType_FogfrntlightstsType_MIN = Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStsoff;
constexpr Vehiclelights2c7_FogfrntlightstsType Vehiclelights2c7_FogfrntlightstsType_FogfrntlightstsType_MAX = Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStsinvalid;
constexpr int Vehiclelights2c7_FogfrntlightstsType_FogfrntlightstsType_ARRAYSIZE = Vehiclelights2c7_FogfrntlightstsType_FogfrntlightstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehiclelights2c7_FogfrntlightstsType_descriptor();
template<typename T>
inline const std::string& Vehiclelights2c7_FogfrntlightstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehiclelights2c7_FogfrntlightstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehiclelights2c7_FogfrntlightstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehiclelights2c7_FogfrntlightstsType_descriptor(), enum_t_value);
}
inline bool Vehiclelights2c7_FogfrntlightstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vehiclelights2c7_FogfrntlightstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehiclelights2c7_FogfrntlightstsType>(
    Vehiclelights2c7_FogfrntlightstsType_descriptor(), name, value);
}
enum Vehiclelights2c7_LeftturnlightstsType : int {
  Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstsoff = 0,
  Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstson = 1,
  Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstsreserved = 2,
  Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstsinvalid = 3
};
bool Vehiclelights2c7_LeftturnlightstsType_IsValid(int value);
constexpr Vehiclelights2c7_LeftturnlightstsType Vehiclelights2c7_LeftturnlightstsType_LeftturnlightstsType_MIN = Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstsoff;
constexpr Vehiclelights2c7_LeftturnlightstsType Vehiclelights2c7_LeftturnlightstsType_LeftturnlightstsType_MAX = Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstsinvalid;
constexpr int Vehiclelights2c7_LeftturnlightstsType_LeftturnlightstsType_ARRAYSIZE = Vehiclelights2c7_LeftturnlightstsType_LeftturnlightstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehiclelights2c7_LeftturnlightstsType_descriptor();
template<typename T>
inline const std::string& Vehiclelights2c7_LeftturnlightstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehiclelights2c7_LeftturnlightstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehiclelights2c7_LeftturnlightstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehiclelights2c7_LeftturnlightstsType_descriptor(), enum_t_value);
}
inline bool Vehiclelights2c7_LeftturnlightstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vehiclelights2c7_LeftturnlightstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehiclelights2c7_LeftturnlightstsType>(
    Vehiclelights2c7_LeftturnlightstsType_descriptor(), name, value);
}
enum Vehiclelights2c7_RightturnlightstsType : int {
  Vehiclelights2c7_RightturnlightstsType_RightTurnlightstsoff = 0,
  Vehiclelights2c7_RightturnlightstsType_RightTurnlightstson = 1,
  Vehiclelights2c7_RightturnlightstsType_RightTurnlightstsreserved = 2,
  Vehiclelights2c7_RightturnlightstsType_RightTurnlightstsinvalid = 3
};
bool Vehiclelights2c7_RightturnlightstsType_IsValid(int value);
constexpr Vehiclelights2c7_RightturnlightstsType Vehiclelights2c7_RightturnlightstsType_RightturnlightstsType_MIN = Vehiclelights2c7_RightturnlightstsType_RightTurnlightstsoff;
constexpr Vehiclelights2c7_RightturnlightstsType Vehiclelights2c7_RightturnlightstsType_RightturnlightstsType_MAX = Vehiclelights2c7_RightturnlightstsType_RightTurnlightstsinvalid;
constexpr int Vehiclelights2c7_RightturnlightstsType_RightturnlightstsType_ARRAYSIZE = Vehiclelights2c7_RightturnlightstsType_RightturnlightstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehiclelights2c7_RightturnlightstsType_descriptor();
template<typename T>
inline const std::string& Vehiclelights2c7_RightturnlightstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehiclelights2c7_RightturnlightstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehiclelights2c7_RightturnlightstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehiclelights2c7_RightturnlightstsType_descriptor(), enum_t_value);
}
inline bool Vehiclelights2c7_RightturnlightstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vehiclelights2c7_RightturnlightstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehiclelights2c7_RightturnlightstsType>(
    Vehiclelights2c7_RightturnlightstsType_descriptor(), name, value);
}
enum Vehiclelights2c7_LobeamlightstsType : int {
  Vehiclelights2c7_LobeamlightstsType_LobeamlightStsoff = 0,
  Vehiclelights2c7_LobeamlightstsType_LobeamlightStson = 1,
  Vehiclelights2c7_LobeamlightstsType_LobeamlightStsreserved = 2,
  Vehiclelights2c7_LobeamlightstsType_LobeamlightStsinvalid = 3
};
bool Vehiclelights2c7_LobeamlightstsType_IsValid(int value);
constexpr Vehiclelights2c7_LobeamlightstsType Vehiclelights2c7_LobeamlightstsType_LobeamlightstsType_MIN = Vehiclelights2c7_LobeamlightstsType_LobeamlightStsoff;
constexpr Vehiclelights2c7_LobeamlightstsType Vehiclelights2c7_LobeamlightstsType_LobeamlightstsType_MAX = Vehiclelights2c7_LobeamlightstsType_LobeamlightStsinvalid;
constexpr int Vehiclelights2c7_LobeamlightstsType_LobeamlightstsType_ARRAYSIZE = Vehiclelights2c7_LobeamlightstsType_LobeamlightstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehiclelights2c7_LobeamlightstsType_descriptor();
template<typename T>
inline const std::string& Vehiclelights2c7_LobeamlightstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehiclelights2c7_LobeamlightstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehiclelights2c7_LobeamlightstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehiclelights2c7_LobeamlightstsType_descriptor(), enum_t_value);
}
inline bool Vehiclelights2c7_LobeamlightstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vehiclelights2c7_LobeamlightstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehiclelights2c7_LobeamlightstsType>(
    Vehiclelights2c7_LobeamlightstsType_descriptor(), name, value);
}
enum Vehiclelights2c7_HibeamlightstsType : int {
  Vehiclelights2c7_HibeamlightstsType_HibeamlightStsoff = 0,
  Vehiclelights2c7_HibeamlightstsType_HibeamlightStson = 1,
  Vehiclelights2c7_HibeamlightstsType_HibeamlightStsreserved = 2,
  Vehiclelights2c7_HibeamlightstsType_HibeamlightStsinvalid = 3
};
bool Vehiclelights2c7_HibeamlightstsType_IsValid(int value);
constexpr Vehiclelights2c7_HibeamlightstsType Vehiclelights2c7_HibeamlightstsType_HibeamlightstsType_MIN = Vehiclelights2c7_HibeamlightstsType_HibeamlightStsoff;
constexpr Vehiclelights2c7_HibeamlightstsType Vehiclelights2c7_HibeamlightstsType_HibeamlightstsType_MAX = Vehiclelights2c7_HibeamlightstsType_HibeamlightStsinvalid;
constexpr int Vehiclelights2c7_HibeamlightstsType_HibeamlightstsType_ARRAYSIZE = Vehiclelights2c7_HibeamlightstsType_HibeamlightstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehiclelights2c7_HibeamlightstsType_descriptor();
template<typename T>
inline const std::string& Vehiclelights2c7_HibeamlightstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehiclelights2c7_HibeamlightstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehiclelights2c7_HibeamlightstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehiclelights2c7_HibeamlightstsType_descriptor(), enum_t_value);
}
inline bool Vehiclelights2c7_HibeamlightstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vehiclelights2c7_HibeamlightstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehiclelights2c7_HibeamlightstsType>(
    Vehiclelights2c7_HibeamlightstsType_descriptor(), name, value);
}
enum Vehiclelights2c7_EmergcylightstsType : int {
  Vehiclelights2c7_EmergcylightstsType_EmergcyLightStsoff = 0,
  Vehiclelights2c7_EmergcylightstsType_EmergcyLightSts125Hz = 1,
  Vehiclelights2c7_EmergcylightstsType_EmergcyLightSts1Hz = 2,
  Vehiclelights2c7_EmergcylightstsType_EmergcyLightStsinvalid = 3
};
bool Vehiclelights2c7_EmergcylightstsType_IsValid(int value);
constexpr Vehiclelights2c7_EmergcylightstsType Vehiclelights2c7_EmergcylightstsType_EmergcylightstsType_MIN = Vehiclelights2c7_EmergcylightstsType_EmergcyLightStsoff;
constexpr Vehiclelights2c7_EmergcylightstsType Vehiclelights2c7_EmergcylightstsType_EmergcylightstsType_MAX = Vehiclelights2c7_EmergcylightstsType_EmergcyLightStsinvalid;
constexpr int Vehiclelights2c7_EmergcylightstsType_EmergcylightstsType_ARRAYSIZE = Vehiclelights2c7_EmergcylightstsType_EmergcylightstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehiclelights2c7_EmergcylightstsType_descriptor();
template<typename T>
inline const std::string& Vehiclelights2c7_EmergcylightstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehiclelights2c7_EmergcylightstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehiclelights2c7_EmergcylightstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehiclelights2c7_EmergcylightstsType_descriptor(), enum_t_value);
}
inline bool Vehiclelights2c7_EmergcylightstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vehiclelights2c7_EmergcylightstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehiclelights2c7_EmergcylightstsType>(
    Vehiclelights2c7_EmergcylightstsType_descriptor(), name, value);
}
enum Vehiclelights2c7_FrntwiperstsType : int {
  Vehiclelights2c7_FrntwiperstsType_FrntwiperStsoff = 0,
  Vehiclelights2c7_FrntwiperstsType_FrntwiperStsLowSpeed = 1,
  Vehiclelights2c7_FrntwiperstsType_FrntwiperStsHighSpeed = 2,
  Vehiclelights2c7_FrntwiperstsType_FrntwiperStsreserved2 = 3,
  Vehiclelights2c7_FrntwiperstsType_FrntwiperStsreserved3 = 4,
  Vehiclelights2c7_FrntwiperstsType_FrntwiperStsreserved5 = 5,
  Vehiclelights2c7_FrntwiperstsType_FrntwiperStsreserved6 = 6,
  Vehiclelights2c7_FrntwiperstsType_FrntwiperStsinvalid = 7
};
bool Vehiclelights2c7_FrntwiperstsType_IsValid(int value);
constexpr Vehiclelights2c7_FrntwiperstsType Vehiclelights2c7_FrntwiperstsType_FrntwiperstsType_MIN = Vehiclelights2c7_FrntwiperstsType_FrntwiperStsoff;
constexpr Vehiclelights2c7_FrntwiperstsType Vehiclelights2c7_FrntwiperstsType_FrntwiperstsType_MAX = Vehiclelights2c7_FrntwiperstsType_FrntwiperStsinvalid;
constexpr int Vehiclelights2c7_FrntwiperstsType_FrntwiperstsType_ARRAYSIZE = Vehiclelights2c7_FrntwiperstsType_FrntwiperstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Vehiclelights2c7_FrntwiperstsType_descriptor();
template<typename T>
inline const std::string& Vehiclelights2c7_FrntwiperstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Vehiclelights2c7_FrntwiperstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Vehiclelights2c7_FrntwiperstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Vehiclelights2c7_FrntwiperstsType_descriptor(), enum_t_value);
}
inline bool Vehiclelights2c7_FrntwiperstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Vehiclelights2c7_FrntwiperstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Vehiclelights2c7_FrntwiperstsType>(
    Vehiclelights2c7_FrntwiperstsType_descriptor(), name, value);
}
enum Lightreq336_BrklireqType : int {
  Lightreq336_BrklireqType_BrkLiReqNoRequest = 0,
  Lightreq336_BrklireqType_BrkLiReqrequest = 1,
  Lightreq336_BrklireqType_BrkLiReqreserved = 2,
  Lightreq336_BrklireqType_BrkLiReqinvalid = 3
};
bool Lightreq336_BrklireqType_IsValid(int value);
constexpr Lightreq336_BrklireqType Lightreq336_BrklireqType_BrklireqType_MIN = Lightreq336_BrklireqType_BrkLiReqNoRequest;
constexpr Lightreq336_BrklireqType Lightreq336_BrklireqType_BrklireqType_MAX = Lightreq336_BrklireqType_BrkLiReqinvalid;
constexpr int Lightreq336_BrklireqType_BrklireqType_ARRAYSIZE = Lightreq336_BrklireqType_BrklireqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lightreq336_BrklireqType_descriptor();
template<typename T>
inline const std::string& Lightreq336_BrklireqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Lightreq336_BrklireqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Lightreq336_BrklireqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Lightreq336_BrklireqType_descriptor(), enum_t_value);
}
inline bool Lightreq336_BrklireqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Lightreq336_BrklireqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Lightreq336_BrklireqType>(
    Lightreq336_BrklireqType_descriptor(), name, value);
}
enum Lightreq336_FrntwiprstsType : int {
  Lightreq336_FrntwiprstsType_Frntwiprstsoff = 0,
  Lightreq336_FrntwiprstsType_FrntwiprstsLowSpeed = 1,
  Lightreq336_FrntwiprstsType_FrntwiprstsHighSpeed = 2,
  Lightreq336_FrntwiprstsType_Frntwiprstsreserved3 = 3,
  Lightreq336_FrntwiprstsType_Frntwiprstsreserved4 = 4,
  Lightreq336_FrntwiprstsType_Frntwiprstsreserved5 = 5,
  Lightreq336_FrntwiprstsType_Frntwiprstsreserved6 = 6,
  Lightreq336_FrntwiprstsType_Frntwiprstsinvalid = 7
};
bool Lightreq336_FrntwiprstsType_IsValid(int value);
constexpr Lightreq336_FrntwiprstsType Lightreq336_FrntwiprstsType_FrntwiprstsType_MIN = Lightreq336_FrntwiprstsType_Frntwiprstsoff;
constexpr Lightreq336_FrntwiprstsType Lightreq336_FrntwiprstsType_FrntwiprstsType_MAX = Lightreq336_FrntwiprstsType_Frntwiprstsinvalid;
constexpr int Lightreq336_FrntwiprstsType_FrntwiprstsType_ARRAYSIZE = Lightreq336_FrntwiprstsType_FrntwiprstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lightreq336_FrntwiprstsType_descriptor();
template<typename T>
inline const std::string& Lightreq336_FrntwiprstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Lightreq336_FrntwiprstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Lightreq336_FrntwiprstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Lightreq336_FrntwiprstsType_descriptor(), enum_t_value);
}
inline bool Lightreq336_FrntwiprstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Lightreq336_FrntwiprstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Lightreq336_FrntwiprstsType>(
    Lightreq336_FrntwiprstsType_descriptor(), name, value);
}
enum Lightreq336_TurnlightindType : int {
  Lightreq336_TurnlightindType_TurnlightindNoTurn = 0,
  Lightreq336_TurnlightindType_TurnlightindTurnLeft = 1,
  Lightreq336_TurnlightindType_TurnlightindTurnRight = 2,
  Lightreq336_TurnlightindType_Turnlightindinvalid = 3
};
bool Lightreq336_TurnlightindType_IsValid(int value);
constexpr Lightreq336_TurnlightindType Lightreq336_TurnlightindType_TurnlightindType_MIN = Lightreq336_TurnlightindType_TurnlightindNoTurn;
constexpr Lightreq336_TurnlightindType Lightreq336_TurnlightindType_TurnlightindType_MAX = Lightreq336_TurnlightindType_Turnlightindinvalid;
constexpr int Lightreq336_TurnlightindType_TurnlightindType_ARRAYSIZE = Lightreq336_TurnlightindType_TurnlightindType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lightreq336_TurnlightindType_descriptor();
template<typename T>
inline const std::string& Lightreq336_TurnlightindType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Lightreq336_TurnlightindType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Lightreq336_TurnlightindType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Lightreq336_TurnlightindType_descriptor(), enum_t_value);
}
inline bool Lightreq336_TurnlightindType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Lightreq336_TurnlightindType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Lightreq336_TurnlightindType>(
    Lightreq336_TurnlightindType_descriptor(), name, value);
}
enum Lightreq336_BeamactivestsType : int {
  Lightreq336_BeamactivestsType_BeamactiveStsBeamStatusOff = 0,
  Lightreq336_BeamactivestsType_BeamactiveStsBeamStatusPassive = 1,
  Lightreq336_BeamactivestsType_BeamactiveStsBeamStatusActive = 2,
  Lightreq336_BeamactivestsType_BeamactiveStsreserved3 = 3,
  Lightreq336_BeamactivestsType_BeamactiveStsreserved4 = 4,
  Lightreq336_BeamactivestsType_BeamactiveStsreserved5 = 5,
  Lightreq336_BeamactivestsType_BeamactiveStsreserved6 = 6,
  Lightreq336_BeamactivestsType_BeamactiveStsinvalid = 7
};
bool Lightreq336_BeamactivestsType_IsValid(int value);
constexpr Lightreq336_BeamactivestsType Lightreq336_BeamactivestsType_BeamactivestsType_MIN = Lightreq336_BeamactivestsType_BeamactiveStsBeamStatusOff;
constexpr Lightreq336_BeamactivestsType Lightreq336_BeamactivestsType_BeamactivestsType_MAX = Lightreq336_BeamactivestsType_BeamactiveStsinvalid;
constexpr int Lightreq336_BeamactivestsType_BeamactivestsType_ARRAYSIZE = Lightreq336_BeamactivestsType_BeamactivestsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lightreq336_BeamactivestsType_descriptor();
template<typename T>
inline const std::string& Lightreq336_BeamactivestsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Lightreq336_BeamactivestsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Lightreq336_BeamactivestsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Lightreq336_BeamactivestsType_descriptor(), enum_t_value);
}
inline bool Lightreq336_BeamactivestsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Lightreq336_BeamactivestsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Lightreq336_BeamactivestsType>(
    Lightreq336_BeamactivestsType_descriptor(), name, value);
}
enum Lightreq336_BeamlightreqType : int {
  Lightreq336_BeamlightreqType_BeamlightreqLowBeamRequest = 0,
  Lightreq336_BeamlightreqType_BeamlightreqHighBeamRequest = 1
};
bool Lightreq336_BeamlightreqType_IsValid(int value);
constexpr Lightreq336_BeamlightreqType Lightreq336_BeamlightreqType_BeamlightreqType_MIN = Lightreq336_BeamlightreqType_BeamlightreqLowBeamRequest;
constexpr Lightreq336_BeamlightreqType Lightreq336_BeamlightreqType_BeamlightreqType_MAX = Lightreq336_BeamlightreqType_BeamlightreqHighBeamRequest;
constexpr int Lightreq336_BeamlightreqType_BeamlightreqType_ARRAYSIZE = Lightreq336_BeamlightreqType_BeamlightreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lightreq336_BeamlightreqType_descriptor();
template<typename T>
inline const std::string& Lightreq336_BeamlightreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Lightreq336_BeamlightreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Lightreq336_BeamlightreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Lightreq336_BeamlightreqType_descriptor(), enum_t_value);
}
inline bool Lightreq336_BeamlightreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Lightreq336_BeamlightreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Lightreq336_BeamlightreqType>(
    Lightreq336_BeamlightreqType_descriptor(), name, value);
}
enum Lightreq336_EmeglampreqType : int {
  Lightreq336_EmeglampreqType_EmeglampReqoff = 0,
  Lightreq336_EmeglampreqType_EmeglampReq125Hz = 1,
  Lightreq336_EmeglampreqType_EmeglampReq1Hz = 2,
  Lightreq336_EmeglampreqType_EmeglampReqinvalid = 3
};
bool Lightreq336_EmeglampreqType_IsValid(int value);
constexpr Lightreq336_EmeglampreqType Lightreq336_EmeglampreqType_EmeglampreqType_MIN = Lightreq336_EmeglampreqType_EmeglampReqoff;
constexpr Lightreq336_EmeglampreqType Lightreq336_EmeglampreqType_EmeglampreqType_MAX = Lightreq336_EmeglampreqType_EmeglampReqinvalid;
constexpr int Lightreq336_EmeglampreqType_EmeglampreqType_ARRAYSIZE = Lightreq336_EmeglampreqType_EmeglampreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lightreq336_EmeglampreqType_descriptor();
template<typename T>
inline const std::string& Lightreq336_EmeglampreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Lightreq336_EmeglampreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Lightreq336_EmeglampreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Lightreq336_EmeglampreqType_descriptor(), enum_t_value);
}
inline bool Lightreq336_EmeglampreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Lightreq336_EmeglampreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Lightreq336_EmeglampreqType>(
    Lightreq336_EmeglampreqType_descriptor(), name, value);
}
enum Whlspdfront51_WhlspdfrstsType : int {
  Whlspdfront51_WhlspdfrstsType_WhlspdFRstsvalid = 0,
  Whlspdfront51_WhlspdfrstsType_WhlspdFRstsinvalid = 1,
  Whlspdfront51_WhlspdfrstsType_WhlspdFRstsinitial = 2,
  Whlspdfront51_WhlspdfrstsType_WhlspdFRstsreserved = 3
};
bool Whlspdfront51_WhlspdfrstsType_IsValid(int value);
constexpr Whlspdfront51_WhlspdfrstsType Whlspdfront51_WhlspdfrstsType_WhlspdfrstsType_MIN = Whlspdfront51_WhlspdfrstsType_WhlspdFRstsvalid;
constexpr Whlspdfront51_WhlspdfrstsType Whlspdfront51_WhlspdfrstsType_WhlspdfrstsType_MAX = Whlspdfront51_WhlspdfrstsType_WhlspdFRstsreserved;
constexpr int Whlspdfront51_WhlspdfrstsType_WhlspdfrstsType_ARRAYSIZE = Whlspdfront51_WhlspdfrstsType_WhlspdfrstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Whlspdfront51_WhlspdfrstsType_descriptor();
template<typename T>
inline const std::string& Whlspdfront51_WhlspdfrstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Whlspdfront51_WhlspdfrstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Whlspdfront51_WhlspdfrstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Whlspdfront51_WhlspdfrstsType_descriptor(), enum_t_value);
}
inline bool Whlspdfront51_WhlspdfrstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Whlspdfront51_WhlspdfrstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Whlspdfront51_WhlspdfrstsType>(
    Whlspdfront51_WhlspdfrstsType_descriptor(), name, value);
}
enum Whlspdfront51_WhlspdfrdirType : int {
  Whlspdfront51_WhlspdfrdirType_WhlspdFRdirstandstill = 0,
  Whlspdfront51_WhlspdfrdirType_WhlspdFRdirforward = 1,
  Whlspdfront51_WhlspdfrdirType_WhlspdFRdirbackward = 2,
  Whlspdfront51_WhlspdfrdirType_WhlspdFRdirinvalid = 3
};
bool Whlspdfront51_WhlspdfrdirType_IsValid(int value);
constexpr Whlspdfront51_WhlspdfrdirType Whlspdfront51_WhlspdfrdirType_WhlspdfrdirType_MIN = Whlspdfront51_WhlspdfrdirType_WhlspdFRdirstandstill;
constexpr Whlspdfront51_WhlspdfrdirType Whlspdfront51_WhlspdfrdirType_WhlspdfrdirType_MAX = Whlspdfront51_WhlspdfrdirType_WhlspdFRdirinvalid;
constexpr int Whlspdfront51_WhlspdfrdirType_WhlspdfrdirType_ARRAYSIZE = Whlspdfront51_WhlspdfrdirType_WhlspdfrdirType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Whlspdfront51_WhlspdfrdirType_descriptor();
template<typename T>
inline const std::string& Whlspdfront51_WhlspdfrdirType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Whlspdfront51_WhlspdfrdirType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Whlspdfront51_WhlspdfrdirType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Whlspdfront51_WhlspdfrdirType_descriptor(), enum_t_value);
}
inline bool Whlspdfront51_WhlspdfrdirType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Whlspdfront51_WhlspdfrdirType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Whlspdfront51_WhlspdfrdirType>(
    Whlspdfront51_WhlspdfrdirType_descriptor(), name, value);
}
enum Whlspdfront51_WhlspdflstsType : int {
  Whlspdfront51_WhlspdflstsType_WhlspdFLstsvalid = 0,
  Whlspdfront51_WhlspdflstsType_WhlspdFLstsinvalid = 1,
  Whlspdfront51_WhlspdflstsType_WhlspdFLstsinitial = 2,
  Whlspdfront51_WhlspdflstsType_WhlspdFLstsreserved = 3
};
bool Whlspdfront51_WhlspdflstsType_IsValid(int value);
constexpr Whlspdfront51_WhlspdflstsType Whlspdfront51_WhlspdflstsType_WhlspdflstsType_MIN = Whlspdfront51_WhlspdflstsType_WhlspdFLstsvalid;
constexpr Whlspdfront51_WhlspdflstsType Whlspdfront51_WhlspdflstsType_WhlspdflstsType_MAX = Whlspdfront51_WhlspdflstsType_WhlspdFLstsreserved;
constexpr int Whlspdfront51_WhlspdflstsType_WhlspdflstsType_ARRAYSIZE = Whlspdfront51_WhlspdflstsType_WhlspdflstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Whlspdfront51_WhlspdflstsType_descriptor();
template<typename T>
inline const std::string& Whlspdfront51_WhlspdflstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Whlspdfront51_WhlspdflstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Whlspdfront51_WhlspdflstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Whlspdfront51_WhlspdflstsType_descriptor(), enum_t_value);
}
inline bool Whlspdfront51_WhlspdflstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Whlspdfront51_WhlspdflstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Whlspdfront51_WhlspdflstsType>(
    Whlspdfront51_WhlspdflstsType_descriptor(), name, value);
}
enum Whlspdfront51_WhlspdfldirType : int {
  Whlspdfront51_WhlspdfldirType_WhlspdFLdirstandstill = 0,
  Whlspdfront51_WhlspdfldirType_WhlspdFLdirforward = 1,
  Whlspdfront51_WhlspdfldirType_WhlspdFLdirbackward = 2,
  Whlspdfront51_WhlspdfldirType_WhlspdFLdirinvalid = 3
};
bool Whlspdfront51_WhlspdfldirType_IsValid(int value);
constexpr Whlspdfront51_WhlspdfldirType Whlspdfront51_WhlspdfldirType_WhlspdfldirType_MIN = Whlspdfront51_WhlspdfldirType_WhlspdFLdirstandstill;
constexpr Whlspdfront51_WhlspdfldirType Whlspdfront51_WhlspdfldirType_WhlspdfldirType_MAX = Whlspdfront51_WhlspdfldirType_WhlspdFLdirinvalid;
constexpr int Whlspdfront51_WhlspdfldirType_WhlspdfldirType_ARRAYSIZE = Whlspdfront51_WhlspdfldirType_WhlspdfldirType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Whlspdfront51_WhlspdfldirType_descriptor();
template<typename T>
inline const std::string& Whlspdfront51_WhlspdfldirType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Whlspdfront51_WhlspdfldirType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Whlspdfront51_WhlspdfldirType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Whlspdfront51_WhlspdfldirType_descriptor(), enum_t_value);
}
inline bool Whlspdfront51_WhlspdfldirType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Whlspdfront51_WhlspdfldirType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Whlspdfront51_WhlspdfldirType>(
    Whlspdfront51_WhlspdfldirType_descriptor(), name, value);
}
enum Whlspdrear52_WhlspdrrstsType : int {
  Whlspdrear52_WhlspdrrstsType_WhlspdRRstsvalid = 0,
  Whlspdrear52_WhlspdrrstsType_WhlspdRRstsinvalid = 1,
  Whlspdrear52_WhlspdrrstsType_WhlspdRRstsinitial = 2,
  Whlspdrear52_WhlspdrrstsType_WhlspdRRstsreserved = 3
};
bool Whlspdrear52_WhlspdrrstsType_IsValid(int value);
constexpr Whlspdrear52_WhlspdrrstsType Whlspdrear52_WhlspdrrstsType_WhlspdrrstsType_MIN = Whlspdrear52_WhlspdrrstsType_WhlspdRRstsvalid;
constexpr Whlspdrear52_WhlspdrrstsType Whlspdrear52_WhlspdrrstsType_WhlspdrrstsType_MAX = Whlspdrear52_WhlspdrrstsType_WhlspdRRstsreserved;
constexpr int Whlspdrear52_WhlspdrrstsType_WhlspdrrstsType_ARRAYSIZE = Whlspdrear52_WhlspdrrstsType_WhlspdrrstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Whlspdrear52_WhlspdrrstsType_descriptor();
template<typename T>
inline const std::string& Whlspdrear52_WhlspdrrstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Whlspdrear52_WhlspdrrstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Whlspdrear52_WhlspdrrstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Whlspdrear52_WhlspdrrstsType_descriptor(), enum_t_value);
}
inline bool Whlspdrear52_WhlspdrrstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Whlspdrear52_WhlspdrrstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Whlspdrear52_WhlspdrrstsType>(
    Whlspdrear52_WhlspdrrstsType_descriptor(), name, value);
}
enum Whlspdrear52_WhlspdrrdirType : int {
  Whlspdrear52_WhlspdrrdirType_WhlspdRRdirstandstill = 0,
  Whlspdrear52_WhlspdrrdirType_WhlspdRRdirforward = 1,
  Whlspdrear52_WhlspdrrdirType_WhlspdRRdirbackward = 2,
  Whlspdrear52_WhlspdrrdirType_WhlspdRRdirinvalid = 3
};
bool Whlspdrear52_WhlspdrrdirType_IsValid(int value);
constexpr Whlspdrear52_WhlspdrrdirType Whlspdrear52_WhlspdrrdirType_WhlspdrrdirType_MIN = Whlspdrear52_WhlspdrrdirType_WhlspdRRdirstandstill;
constexpr Whlspdrear52_WhlspdrrdirType Whlspdrear52_WhlspdrrdirType_WhlspdrrdirType_MAX = Whlspdrear52_WhlspdrrdirType_WhlspdRRdirinvalid;
constexpr int Whlspdrear52_WhlspdrrdirType_WhlspdrrdirType_ARRAYSIZE = Whlspdrear52_WhlspdrrdirType_WhlspdrrdirType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Whlspdrear52_WhlspdrrdirType_descriptor();
template<typename T>
inline const std::string& Whlspdrear52_WhlspdrrdirType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Whlspdrear52_WhlspdrrdirType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Whlspdrear52_WhlspdrrdirType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Whlspdrear52_WhlspdrrdirType_descriptor(), enum_t_value);
}
inline bool Whlspdrear52_WhlspdrrdirType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Whlspdrear52_WhlspdrrdirType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Whlspdrear52_WhlspdrrdirType>(
    Whlspdrear52_WhlspdrrdirType_descriptor(), name, value);
}
enum Whlspdrear52_WhlspdrlstsType : int {
  Whlspdrear52_WhlspdrlstsType_WhlspdRLstsvalid = 0,
  Whlspdrear52_WhlspdrlstsType_WhlspdRLstsinvalid = 1,
  Whlspdrear52_WhlspdrlstsType_WhlspdRLstsinitial = 2,
  Whlspdrear52_WhlspdrlstsType_WhlspdRLstsreserved = 3
};
bool Whlspdrear52_WhlspdrlstsType_IsValid(int value);
constexpr Whlspdrear52_WhlspdrlstsType Whlspdrear52_WhlspdrlstsType_WhlspdrlstsType_MIN = Whlspdrear52_WhlspdrlstsType_WhlspdRLstsvalid;
constexpr Whlspdrear52_WhlspdrlstsType Whlspdrear52_WhlspdrlstsType_WhlspdrlstsType_MAX = Whlspdrear52_WhlspdrlstsType_WhlspdRLstsreserved;
constexpr int Whlspdrear52_WhlspdrlstsType_WhlspdrlstsType_ARRAYSIZE = Whlspdrear52_WhlspdrlstsType_WhlspdrlstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Whlspdrear52_WhlspdrlstsType_descriptor();
template<typename T>
inline const std::string& Whlspdrear52_WhlspdrlstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Whlspdrear52_WhlspdrlstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Whlspdrear52_WhlspdrlstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Whlspdrear52_WhlspdrlstsType_descriptor(), enum_t_value);
}
inline bool Whlspdrear52_WhlspdrlstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Whlspdrear52_WhlspdrlstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Whlspdrear52_WhlspdrlstsType>(
    Whlspdrear52_WhlspdrlstsType_descriptor(), name, value);
}
enum Whlspdrear52_WhlspdrldirType : int {
  Whlspdrear52_WhlspdrldirType_WhlspdRLdirstandstill = 0,
  Whlspdrear52_WhlspdrldirType_WhlspdRLdirforward = 1,
  Whlspdrear52_WhlspdrldirType_WhlspdRLdirbackward = 2,
  Whlspdrear52_WhlspdrldirType_WhlspdRLdirinvalid = 3
};
bool Whlspdrear52_WhlspdrldirType_IsValid(int value);
constexpr Whlspdrear52_WhlspdrldirType Whlspdrear52_WhlspdrldirType_WhlspdrldirType_MIN = Whlspdrear52_WhlspdrldirType_WhlspdRLdirstandstill;
constexpr Whlspdrear52_WhlspdrldirType Whlspdrear52_WhlspdrldirType_WhlspdrldirType_MAX = Whlspdrear52_WhlspdrldirType_WhlspdRLdirinvalid;
constexpr int Whlspdrear52_WhlspdrldirType_WhlspdrldirType_ARRAYSIZE = Whlspdrear52_WhlspdrldirType_WhlspdrldirType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Whlspdrear52_WhlspdrldirType_descriptor();
template<typename T>
inline const std::string& Whlspdrear52_WhlspdrldirType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Whlspdrear52_WhlspdrldirType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Whlspdrear52_WhlspdrldirType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Whlspdrear52_WhlspdrldirType_descriptor(), enum_t_value);
}
inline bool Whlspdrear52_WhlspdrldirType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Whlspdrear52_WhlspdrldirType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Whlspdrear52_WhlspdrldirType>(
    Whlspdrear52_WhlspdrldirType_descriptor(), name, value);
}
enum Bcusts5e_TcsactvType : int {
  Bcusts5e_TcsactvType_TCSActvNotActive = 0,
  Bcusts5e_TcsactvType_TCSActvActive = 1
};
bool Bcusts5e_TcsactvType_IsValid(int value);
constexpr Bcusts5e_TcsactvType Bcusts5e_TcsactvType_TcsactvType_MIN = Bcusts5e_TcsactvType_TCSActvNotActive;
constexpr Bcusts5e_TcsactvType Bcusts5e_TcsactvType_TcsactvType_MAX = Bcusts5e_TcsactvType_TCSActvActive;
constexpr int Bcusts5e_TcsactvType_TcsactvType_ARRAYSIZE = Bcusts5e_TcsactvType_TcsactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_TcsactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_TcsactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_TcsactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_TcsactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_TcsactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_TcsactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_TcsactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_TcsactvType>(
    Bcusts5e_TcsactvType_descriptor(), name, value);
}
enum Bcusts5e_ScmavlType : int {
  Bcusts5e_ScmavlType_SCMAvlNotAvailable = 0,
  Bcusts5e_ScmavlType_SCMAvlavailable = 1
};
bool Bcusts5e_ScmavlType_IsValid(int value);
constexpr Bcusts5e_ScmavlType Bcusts5e_ScmavlType_ScmavlType_MIN = Bcusts5e_ScmavlType_SCMAvlNotAvailable;
constexpr Bcusts5e_ScmavlType Bcusts5e_ScmavlType_ScmavlType_MAX = Bcusts5e_ScmavlType_SCMAvlavailable;
constexpr int Bcusts5e_ScmavlType_ScmavlType_ARRAYSIZE = Bcusts5e_ScmavlType_ScmavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_ScmavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_ScmavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_ScmavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_ScmavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_ScmavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_ScmavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_ScmavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_ScmavlType>(
    Bcusts5e_ScmavlType_descriptor(), name, value);
}
enum Bcusts5e_HfcactvType : int {
  Bcusts5e_HfcactvType_HFCActvNotActive = 0,
  Bcusts5e_HfcactvType_HFCActvActive = 1
};
bool Bcusts5e_HfcactvType_IsValid(int value);
constexpr Bcusts5e_HfcactvType Bcusts5e_HfcactvType_HfcactvType_MIN = Bcusts5e_HfcactvType_HFCActvNotActive;
constexpr Bcusts5e_HfcactvType Bcusts5e_HfcactvType_HfcactvType_MAX = Bcusts5e_HfcactvType_HFCActvActive;
constexpr int Bcusts5e_HfcactvType_HfcactvType_ARRAYSIZE = Bcusts5e_HfcactvType_HfcactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_HfcactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_HfcactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_HfcactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_HfcactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_HfcactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_HfcactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_HfcactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_HfcactvType>(
    Bcusts5e_HfcactvType_descriptor(), name, value);
}
enum Bcusts5e_VdcactvType : int {
  Bcusts5e_VdcactvType_VDCActvNotActive = 0,
  Bcusts5e_VdcactvType_VDCActvActive = 1
};
bool Bcusts5e_VdcactvType_IsValid(int value);
constexpr Bcusts5e_VdcactvType Bcusts5e_VdcactvType_VdcactvType_MIN = Bcusts5e_VdcactvType_VDCActvNotActive;
constexpr Bcusts5e_VdcactvType Bcusts5e_VdcactvType_VdcactvType_MAX = Bcusts5e_VdcactvType_VDCActvActive;
constexpr int Bcusts5e_VdcactvType_VdcactvType_ARRAYSIZE = Bcusts5e_VdcactvType_VdcactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_VdcactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_VdcactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_VdcactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_VdcactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_VdcactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_VdcactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_VdcactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_VdcactvType>(
    Bcusts5e_VdcactvType_descriptor(), name, value);
}
enum Bcusts5e_AvhstsType : int {
  Bcusts5e_AvhstsType_AVHStsFailureAVHLampOnWithYellowColor = 0,
  Bcusts5e_AvhstsType_AVHStsStandbyAVHLampOff = 1,
  Bcusts5e_AvhstsType_AVHStsActiveAVHLampOnWithGreenColor = 2,
  Bcusts5e_AvhstsType_AVHStsReserved = 3
};
bool Bcusts5e_AvhstsType_IsValid(int value);
constexpr Bcusts5e_AvhstsType Bcusts5e_AvhstsType_AvhstsType_MIN = Bcusts5e_AvhstsType_AVHStsFailureAVHLampOnWithYellowColor;
constexpr Bcusts5e_AvhstsType Bcusts5e_AvhstsType_AvhstsType_MAX = Bcusts5e_AvhstsType_AVHStsReserved;
constexpr int Bcusts5e_AvhstsType_AvhstsType_ARRAYSIZE = Bcusts5e_AvhstsType_AvhstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AvhstsType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AvhstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AvhstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AvhstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AvhstsType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AvhstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AvhstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AvhstsType>(
    Bcusts5e_AvhstsType_descriptor(), name, value);
}
enum Bcusts5e_AutobrkgactvType : int {
  Bcusts5e_AutobrkgactvType_AutoBrkgActvNotActive = 0,
  Bcusts5e_AutobrkgactvType_AutoBrkgActvActive = 1
};
bool Bcusts5e_AutobrkgactvType_IsValid(int value);
constexpr Bcusts5e_AutobrkgactvType Bcusts5e_AutobrkgactvType_AutobrkgactvType_MIN = Bcusts5e_AutobrkgactvType_AutoBrkgActvNotActive;
constexpr Bcusts5e_AutobrkgactvType Bcusts5e_AutobrkgactvType_AutobrkgactvType_MAX = Bcusts5e_AutobrkgactvType_AutoBrkgActvActive;
constexpr int Bcusts5e_AutobrkgactvType_AutobrkgactvType_ARRAYSIZE = Bcusts5e_AutobrkgactvType_AutobrkgactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AutobrkgactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AutobrkgactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AutobrkgactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AutobrkgactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AutobrkgactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AutobrkgactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AutobrkgactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AutobrkgactvType>(
    Bcusts5e_AutobrkgactvType_descriptor(), name, value);
}
enum Bcusts5e_VdcdeactvType : int {
  Bcusts5e_VdcdeactvType_VDCDeactvNotDeactivated = 0,
  Bcusts5e_VdcdeactvType_VDCDeactvDeactivated = 1
};
bool Bcusts5e_VdcdeactvType_IsValid(int value);
constexpr Bcusts5e_VdcdeactvType Bcusts5e_VdcdeactvType_VdcdeactvType_MIN = Bcusts5e_VdcdeactvType_VDCDeactvNotDeactivated;
constexpr Bcusts5e_VdcdeactvType Bcusts5e_VdcdeactvType_VdcdeactvType_MAX = Bcusts5e_VdcdeactvType_VDCDeactvDeactivated;
constexpr int Bcusts5e_VdcdeactvType_VdcdeactvType_ARRAYSIZE = Bcusts5e_VdcdeactvType_VdcdeactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_VdcdeactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_VdcdeactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_VdcdeactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_VdcdeactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_VdcdeactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_VdcdeactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_VdcdeactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_VdcdeactvType>(
    Bcusts5e_VdcdeactvType_descriptor(), name, value);
}
enum Bcusts5e_AbaactvType : int {
  Bcusts5e_AbaactvType_ABAActvNotActive = 0,
  Bcusts5e_AbaactvType_ABAActvActive = 1
};
bool Bcusts5e_AbaactvType_IsValid(int value);
constexpr Bcusts5e_AbaactvType Bcusts5e_AbaactvType_AbaactvType_MIN = Bcusts5e_AbaactvType_ABAActvNotActive;
constexpr Bcusts5e_AbaactvType Bcusts5e_AbaactvType_AbaactvType_MAX = Bcusts5e_AbaactvType_ABAActvActive;
constexpr int Bcusts5e_AbaactvType_AbaactvType_ARRAYSIZE = Bcusts5e_AbaactvType_AbaactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AbaactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AbaactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AbaactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AbaactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AbaactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AbaactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AbaactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AbaactvType>(
    Bcusts5e_AbaactvType_descriptor(), name, value);
}
enum Bcusts5e_AutobrkgavlType : int {
  Bcusts5e_AutobrkgavlType_AutoBrkgAvlNotAvailable = 0,
  Bcusts5e_AutobrkgavlType_AutoBrkgAvlAvailable = 1
};
bool Bcusts5e_AutobrkgavlType_IsValid(int value);
constexpr Bcusts5e_AutobrkgavlType Bcusts5e_AutobrkgavlType_AutobrkgavlType_MIN = Bcusts5e_AutobrkgavlType_AutoBrkgAvlNotAvailable;
constexpr Bcusts5e_AutobrkgavlType Bcusts5e_AutobrkgavlType_AutobrkgavlType_MAX = Bcusts5e_AutobrkgavlType_AutoBrkgAvlAvailable;
constexpr int Bcusts5e_AutobrkgavlType_AutobrkgavlType_ARRAYSIZE = Bcusts5e_AutobrkgavlType_AutobrkgavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AutobrkgavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AutobrkgavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AutobrkgavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AutobrkgavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AutobrkgavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AutobrkgavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AutobrkgavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AutobrkgavlType>(
    Bcusts5e_AutobrkgavlType_descriptor(), name, value);
}
enum Bcusts5e_HbaactvType : int {
  Bcusts5e_HbaactvType_HBAActvNotActive = 0,
  Bcusts5e_HbaactvType_HBAActvActive = 1
};
bool Bcusts5e_HbaactvType_IsValid(int value);
constexpr Bcusts5e_HbaactvType Bcusts5e_HbaactvType_HbaactvType_MIN = Bcusts5e_HbaactvType_HBAActvNotActive;
constexpr Bcusts5e_HbaactvType Bcusts5e_HbaactvType_HbaactvType_MAX = Bcusts5e_HbaactvType_HBAActvActive;
constexpr int Bcusts5e_HbaactvType_HbaactvType_ARRAYSIZE = Bcusts5e_HbaactvType_HbaactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_HbaactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_HbaactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_HbaactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_HbaactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_HbaactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_HbaactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_HbaactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_HbaactvType>(
    Bcusts5e_HbaactvType_descriptor(), name, value);
}
enum Bcusts5e_AebavlType : int {
  Bcusts5e_AebavlType_AEBAvlNotAvailable = 0,
  Bcusts5e_AebavlType_AEBAvlavailable = 1
};
bool Bcusts5e_AebavlType_IsValid(int value);
constexpr Bcusts5e_AebavlType Bcusts5e_AebavlType_AebavlType_MIN = Bcusts5e_AebavlType_AEBAvlNotAvailable;
constexpr Bcusts5e_AebavlType Bcusts5e_AebavlType_AebavlType_MAX = Bcusts5e_AebavlType_AEBAvlavailable;
constexpr int Bcusts5e_AebavlType_AebavlType_ARRAYSIZE = Bcusts5e_AebavlType_AebavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AebavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AebavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AebavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AebavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AebavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AebavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AebavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AebavlType>(
    Bcusts5e_AebavlType_descriptor(), name, value);
}
enum Bcusts5e_AebactvType : int {
  Bcusts5e_AebactvType_AEBActvNotActive = 0,
  Bcusts5e_AebactvType_AEBActvActive = 1
};
bool Bcusts5e_AebactvType_IsValid(int value);
constexpr Bcusts5e_AebactvType Bcusts5e_AebactvType_AebactvType_MIN = Bcusts5e_AebactvType_AEBActvNotActive;
constexpr Bcusts5e_AebactvType Bcusts5e_AebactvType_AebactvType_MAX = Bcusts5e_AebactvType_AEBActvActive;
constexpr int Bcusts5e_AebactvType_AebactvType_ARRAYSIZE = Bcusts5e_AebactvType_AebactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AebactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AebactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AebactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AebactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AebactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AebactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AebactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AebactvType>(
    Bcusts5e_AebactvType_descriptor(), name, value);
}
enum Bcusts5e_CdpavailType : int {
  Bcusts5e_CdpavailType_CDPAvailNotAvailable = 0,
  Bcusts5e_CdpavailType_CDPAvailavailable = 1
};
bool Bcusts5e_CdpavailType_IsValid(int value);
constexpr Bcusts5e_CdpavailType Bcusts5e_CdpavailType_CdpavailType_MIN = Bcusts5e_CdpavailType_CDPAvailNotAvailable;
constexpr Bcusts5e_CdpavailType Bcusts5e_CdpavailType_CdpavailType_MAX = Bcusts5e_CdpavailType_CDPAvailavailable;
constexpr int Bcusts5e_CdpavailType_CdpavailType_ARRAYSIZE = Bcusts5e_CdpavailType_CdpavailType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_CdpavailType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_CdpavailType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_CdpavailType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_CdpavailType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_CdpavailType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_CdpavailType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_CdpavailType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_CdpavailType>(
    Bcusts5e_CdpavailType_descriptor(), name, value);
}
enum Bcusts5e_AbaavlType : int {
  Bcusts5e_AbaavlType_ABAAvlNotAvailable = 0,
  Bcusts5e_AbaavlType_ABAAvlavailable = 1
};
bool Bcusts5e_AbaavlType_IsValid(int value);
constexpr Bcusts5e_AbaavlType Bcusts5e_AbaavlType_AbaavlType_MIN = Bcusts5e_AbaavlType_ABAAvlNotAvailable;
constexpr Bcusts5e_AbaavlType Bcusts5e_AbaavlType_AbaavlType_MAX = Bcusts5e_AbaavlType_ABAAvlavailable;
constexpr int Bcusts5e_AbaavlType_AbaavlType_ARRAYSIZE = Bcusts5e_AbaavlType_AbaavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AbaavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AbaavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AbaavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AbaavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AbaavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AbaavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AbaavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AbaavlType>(
    Bcusts5e_AbaavlType_descriptor(), name, value);
}
enum Bcusts5e_HdcstsType : int {
  Bcusts5e_HdcstsType_HDCStsOff = 0,
  Bcusts5e_HdcstsType_HDCStsFailure = 1,
  Bcusts5e_HdcstsType_HDCStsStandby = 2,
  Bcusts5e_HdcstsType_HDCStsActive = 3
};
bool Bcusts5e_HdcstsType_IsValid(int value);
constexpr Bcusts5e_HdcstsType Bcusts5e_HdcstsType_HdcstsType_MIN = Bcusts5e_HdcstsType_HDCStsOff;
constexpr Bcusts5e_HdcstsType Bcusts5e_HdcstsType_HdcstsType_MAX = Bcusts5e_HdcstsType_HDCStsActive;
constexpr int Bcusts5e_HdcstsType_HdcstsType_ARRAYSIZE = Bcusts5e_HdcstsType_HdcstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_HdcstsType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_HdcstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_HdcstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_HdcstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_HdcstsType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_HdcstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_HdcstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_HdcstsType>(
    Bcusts5e_HdcstsType_descriptor(), name, value);
}
enum Bcusts5e_TcsdeactvType : int {
  Bcusts5e_TcsdeactvType_TCSDeactvNotDeactivated = 0,
  Bcusts5e_TcsdeactvType_TCSDeactvDeactivated = 1
};
bool Bcusts5e_TcsdeactvType_IsValid(int value);
constexpr Bcusts5e_TcsdeactvType Bcusts5e_TcsdeactvType_TcsdeactvType_MIN = Bcusts5e_TcsdeactvType_TCSDeactvNotDeactivated;
constexpr Bcusts5e_TcsdeactvType Bcusts5e_TcsdeactvType_TcsdeactvType_MAX = Bcusts5e_TcsdeactvType_TCSDeactvDeactivated;
constexpr int Bcusts5e_TcsdeactvType_TcsdeactvType_ARRAYSIZE = Bcusts5e_TcsdeactvType_TcsdeactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_TcsdeactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_TcsdeactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_TcsdeactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_TcsdeactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_TcsdeactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_TcsdeactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_TcsdeactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_TcsdeactvType>(
    Bcusts5e_TcsdeactvType_descriptor(), name, value);
}
enum Bcusts5e_AwbavlType : int {
  Bcusts5e_AwbavlType_AWBAvlNotAvailable = 0,
  Bcusts5e_AwbavlType_AWBAvlavailable = 1
};
bool Bcusts5e_AwbavlType_IsValid(int value);
constexpr Bcusts5e_AwbavlType Bcusts5e_AwbavlType_AwbavlType_MIN = Bcusts5e_AwbavlType_AWBAvlNotAvailable;
constexpr Bcusts5e_AwbavlType Bcusts5e_AwbavlType_AwbavlType_MAX = Bcusts5e_AwbavlType_AWBAvlavailable;
constexpr int Bcusts5e_AwbavlType_AwbavlType_ARRAYSIZE = Bcusts5e_AwbavlType_AwbavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AwbavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AwbavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AwbavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AwbavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AwbavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AwbavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AwbavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AwbavlType>(
    Bcusts5e_AwbavlType_descriptor(), name, value);
}
enum Bcusts5e_AbpavlType : int {
  Bcusts5e_AbpavlType_ABPAvlNotAvailable = 0,
  Bcusts5e_AbpavlType_ABPAvlavailable = 1
};
bool Bcusts5e_AbpavlType_IsValid(int value);
constexpr Bcusts5e_AbpavlType Bcusts5e_AbpavlType_AbpavlType_MIN = Bcusts5e_AbpavlType_ABPAvlNotAvailable;
constexpr Bcusts5e_AbpavlType Bcusts5e_AbpavlType_AbpavlType_MAX = Bcusts5e_AbpavlType_ABPAvlavailable;
constexpr int Bcusts5e_AbpavlType_AbpavlType_ARRAYSIZE = Bcusts5e_AbpavlType_AbpavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AbpavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AbpavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AbpavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AbpavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AbpavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AbpavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AbpavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AbpavlType>(
    Bcusts5e_AbpavlType_descriptor(), name, value);
}
enum Bcusts5e_AwbactvType : int {
  Bcusts5e_AwbactvType_AWBActvNotActive = 0,
  Bcusts5e_AwbactvType_AWBActvActive = 1
};
bool Bcusts5e_AwbactvType_IsValid(int value);
constexpr Bcusts5e_AwbactvType Bcusts5e_AwbactvType_AwbactvType_MIN = Bcusts5e_AwbactvType_AWBActvNotActive;
constexpr Bcusts5e_AwbactvType Bcusts5e_AwbactvType_AwbactvType_MAX = Bcusts5e_AwbactvType_AWBActvActive;
constexpr int Bcusts5e_AwbactvType_AwbactvType_ARRAYSIZE = Bcusts5e_AwbactvType_AwbactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AwbactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AwbactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AwbactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AwbactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AwbactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AwbactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AwbactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AwbactvType>(
    Bcusts5e_AwbactvType_descriptor(), name, value);
}
enum Bcusts5e_EbaavlType : int {
  Bcusts5e_EbaavlType_EBAAvlNotAvailable = 0,
  Bcusts5e_EbaavlType_EBAAvlavailable = 1
};
bool Bcusts5e_EbaavlType_IsValid(int value);
constexpr Bcusts5e_EbaavlType Bcusts5e_EbaavlType_EbaavlType_MIN = Bcusts5e_EbaavlType_EBAAvlNotAvailable;
constexpr Bcusts5e_EbaavlType Bcusts5e_EbaavlType_EbaavlType_MAX = Bcusts5e_EbaavlType_EBAAvlavailable;
constexpr int Bcusts5e_EbaavlType_EbaavlType_ARRAYSIZE = Bcusts5e_EbaavlType_EbaavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_EbaavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_EbaavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_EbaavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_EbaavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_EbaavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_EbaavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_EbaavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_EbaavlType>(
    Bcusts5e_EbaavlType_descriptor(), name, value);
}
enum Bcusts5e_QdcaccfailType : int {
  Bcusts5e_QdcaccfailType_QDCACCFailNoError = 0,
  Bcusts5e_QdcaccfailType_QDCACCFailError = 1,
  Bcusts5e_QdcaccfailType_QDCACCFailReserved2 = 2,
  Bcusts5e_QdcaccfailType_QDCACCFailReserved3 = 3
};
bool Bcusts5e_QdcaccfailType_IsValid(int value);
constexpr Bcusts5e_QdcaccfailType Bcusts5e_QdcaccfailType_QdcaccfailType_MIN = Bcusts5e_QdcaccfailType_QDCACCFailNoError;
constexpr Bcusts5e_QdcaccfailType Bcusts5e_QdcaccfailType_QdcaccfailType_MAX = Bcusts5e_QdcaccfailType_QDCACCFailReserved3;
constexpr int Bcusts5e_QdcaccfailType_QdcaccfailType_ARRAYSIZE = Bcusts5e_QdcaccfailType_QdcaccfailType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_QdcaccfailType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_QdcaccfailType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_QdcaccfailType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_QdcaccfailType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_QdcaccfailType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_QdcaccfailType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_QdcaccfailType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_QdcaccfailType>(
    Bcusts5e_QdcaccfailType_descriptor(), name, value);
}
enum Bcusts5e_AbpactvType : int {
  Bcusts5e_AbpactvType_ABPActvNotActive = 0,
  Bcusts5e_AbpactvType_ABPActvActive = 1
};
bool Bcusts5e_AbpactvType_IsValid(int value);
constexpr Bcusts5e_AbpactvType Bcusts5e_AbpactvType_AbpactvType_MIN = Bcusts5e_AbpactvType_ABPActvNotActive;
constexpr Bcusts5e_AbpactvType Bcusts5e_AbpactvType_AbpactvType_MAX = Bcusts5e_AbpactvType_ABPActvActive;
constexpr int Bcusts5e_AbpactvType_AbpactvType_ARRAYSIZE = Bcusts5e_AbpactvType_AbpactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AbpactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AbpactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AbpactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AbpactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AbpactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AbpactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AbpactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AbpactvType>(
    Bcusts5e_AbpactvType_descriptor(), name, value);
}
enum Bcusts5e_PedpavlType : int {
  Bcusts5e_PedpavlType_PEDPAvlNotAvailable = 0,
  Bcusts5e_PedpavlType_PEDPAvlavailable = 1
};
bool Bcusts5e_PedpavlType_IsValid(int value);
constexpr Bcusts5e_PedpavlType Bcusts5e_PedpavlType_PedpavlType_MIN = Bcusts5e_PedpavlType_PEDPAvlNotAvailable;
constexpr Bcusts5e_PedpavlType Bcusts5e_PedpavlType_PedpavlType_MAX = Bcusts5e_PedpavlType_PEDPAvlavailable;
constexpr int Bcusts5e_PedpavlType_PedpavlType_ARRAYSIZE = Bcusts5e_PedpavlType_PedpavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_PedpavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_PedpavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_PedpavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_PedpavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_PedpavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_PedpavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_PedpavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_PedpavlType>(
    Bcusts5e_PedpavlType_descriptor(), name, value);
}
enum Bcusts5e_CddsavlType : int {
  Bcusts5e_CddsavlType_CDDSAvlNotAvailable = 0,
  Bcusts5e_CddsavlType_CDDSAvlavailable = 1
};
bool Bcusts5e_CddsavlType_IsValid(int value);
constexpr Bcusts5e_CddsavlType Bcusts5e_CddsavlType_CddsavlType_MIN = Bcusts5e_CddsavlType_CDDSAvlNotAvailable;
constexpr Bcusts5e_CddsavlType Bcusts5e_CddsavlType_CddsavlType_MAX = Bcusts5e_CddsavlType_CDDSAvlavailable;
constexpr int Bcusts5e_CddsavlType_CddsavlType_ARRAYSIZE = Bcusts5e_CddsavlType_CddsavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_CddsavlType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_CddsavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_CddsavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_CddsavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_CddsavlType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_CddsavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_CddsavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_CddsavlType>(
    Bcusts5e_CddsavlType_descriptor(), name, value);
}
enum Bcusts5e_StandstillstsType : int {
  Bcusts5e_StandstillstsType_StandstillStsNonHold = 0,
  Bcusts5e_StandstillstsType_StandstillStsSoftStop = 1,
  Bcusts5e_StandstillstsType_StandstillStsTemporaryHoldByServiceBrakes = 2,
  Bcusts5e_StandstillstsType_StandstillStsHoldByServiceBrakes = 3,
  Bcusts5e_StandstillstsType_StandstillStsTransitionToANonHold = 4,
  Bcusts5e_StandstillstsType_StandstillStsParkedVehicleAutonomousParkBrake = 5,
  Bcusts5e_StandstillstsType_StandstillStsReserved6 = 6,
  Bcusts5e_StandstillstsType_StandstillStsReserved7 = 7
};
bool Bcusts5e_StandstillstsType_IsValid(int value);
constexpr Bcusts5e_StandstillstsType Bcusts5e_StandstillstsType_StandstillstsType_MIN = Bcusts5e_StandstillstsType_StandstillStsNonHold;
constexpr Bcusts5e_StandstillstsType Bcusts5e_StandstillstsType_StandstillstsType_MAX = Bcusts5e_StandstillstsType_StandstillStsReserved7;
constexpr int Bcusts5e_StandstillstsType_StandstillstsType_ARRAYSIZE = Bcusts5e_StandstillstsType_StandstillstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_StandstillstsType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_StandstillstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_StandstillstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_StandstillstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_StandstillstsType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_StandstillstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_StandstillstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_StandstillstsType>(
    Bcusts5e_StandstillstsType_descriptor(), name, value);
}
enum Bcusts5e_HhcavailType : int {
  Bcusts5e_HhcavailType_HHCAvailNotAvailable = 0,
  Bcusts5e_HhcavailType_HHCAvailavailable = 1
};
bool Bcusts5e_HhcavailType_IsValid(int value);
constexpr Bcusts5e_HhcavailType Bcusts5e_HhcavailType_HhcavailType_MIN = Bcusts5e_HhcavailType_HHCAvailNotAvailable;
constexpr Bcusts5e_HhcavailType Bcusts5e_HhcavailType_HhcavailType_MAX = Bcusts5e_HhcavailType_HHCAvailavailable;
constexpr int Bcusts5e_HhcavailType_HhcavailType_ARRAYSIZE = Bcusts5e_HhcavailType_HhcavailType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_HhcavailType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_HhcavailType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_HhcavailType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_HhcavailType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_HhcavailType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_HhcavailType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_HhcavailType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_HhcavailType>(
    Bcusts5e_HhcavailType_descriptor(), name, value);
}
enum Bcusts5e_AbsactvType : int {
  Bcusts5e_AbsactvType_ABSActvNotActive = 0,
  Bcusts5e_AbsactvType_ABSActvActive = 1
};
bool Bcusts5e_AbsactvType_IsValid(int value);
constexpr Bcusts5e_AbsactvType Bcusts5e_AbsactvType_AbsactvType_MIN = Bcusts5e_AbsactvType_ABSActvNotActive;
constexpr Bcusts5e_AbsactvType Bcusts5e_AbsactvType_AbsactvType_MAX = Bcusts5e_AbsactvType_ABSActvActive;
constexpr int Bcusts5e_AbsactvType_AbsactvType_ARRAYSIZE = Bcusts5e_AbsactvType_AbsactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_AbsactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_AbsactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_AbsactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_AbsactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_AbsactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_AbsactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_AbsactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_AbsactvType>(
    Bcusts5e_AbsactvType_descriptor(), name, value);
}
enum Bcusts5e_PedpactvType : int {
  Bcusts5e_PedpactvType_PEDPActvNotActive = 0,
  Bcusts5e_PedpactvType_PEDPActvActive = 1
};
bool Bcusts5e_PedpactvType_IsValid(int value);
constexpr Bcusts5e_PedpactvType Bcusts5e_PedpactvType_PedpactvType_MIN = Bcusts5e_PedpactvType_PEDPActvNotActive;
constexpr Bcusts5e_PedpactvType Bcusts5e_PedpactvType_PedpactvType_MAX = Bcusts5e_PedpactvType_PEDPActvActive;
constexpr int Bcusts5e_PedpactvType_PedpactvType_ARRAYSIZE = Bcusts5e_PedpactvType_PedpactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_PedpactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_PedpactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_PedpactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_PedpactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_PedpactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_PedpactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_PedpactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_PedpactvType>(
    Bcusts5e_PedpactvType_descriptor(), name, value);
}
enum Bcusts5e_EbaactvType : int {
  Bcusts5e_EbaactvType_EBAActvNotActive = 0,
  Bcusts5e_EbaactvType_EBAActvActive = 1
};
bool Bcusts5e_EbaactvType_IsValid(int value);
constexpr Bcusts5e_EbaactvType Bcusts5e_EbaactvType_EbaactvType_MIN = Bcusts5e_EbaactvType_EBAActvNotActive;
constexpr Bcusts5e_EbaactvType Bcusts5e_EbaactvType_EbaactvType_MAX = Bcusts5e_EbaactvType_EBAActvActive;
constexpr int Bcusts5e_EbaactvType_EbaactvType_ARRAYSIZE = Bcusts5e_EbaactvType_EbaactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_EbaactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_EbaactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_EbaactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_EbaactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_EbaactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_EbaactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_EbaactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_EbaactvType>(
    Bcusts5e_EbaactvType_descriptor(), name, value);
}
enum Bcusts5e_CdpactvType : int {
  Bcusts5e_CdpactvType_CDPActvNotActive = 0,
  Bcusts5e_CdpactvType_CDPActvActive = 1
};
bool Bcusts5e_CdpactvType_IsValid(int value);
constexpr Bcusts5e_CdpactvType Bcusts5e_CdpactvType_CdpactvType_MIN = Bcusts5e_CdpactvType_CDPActvNotActive;
constexpr Bcusts5e_CdpactvType Bcusts5e_CdpactvType_CdpactvType_MAX = Bcusts5e_CdpactvType_CDPActvActive;
constexpr int Bcusts5e_CdpactvType_CdpactvType_ARRAYSIZE = Bcusts5e_CdpactvType_CdpactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_CdpactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_CdpactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_CdpactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_CdpactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_CdpactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_CdpactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_CdpactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_CdpactvType>(
    Bcusts5e_CdpactvType_descriptor(), name, value);
}
enum Bcusts5e_EbdactvType : int {
  Bcusts5e_EbdactvType_EBDActvNotActive = 0,
  Bcusts5e_EbdactvType_EBDActvActive = 1
};
bool Bcusts5e_EbdactvType_IsValid(int value);
constexpr Bcusts5e_EbdactvType Bcusts5e_EbdactvType_EbdactvType_MIN = Bcusts5e_EbdactvType_EBDActvNotActive;
constexpr Bcusts5e_EbdactvType Bcusts5e_EbdactvType_EbdactvType_MAX = Bcusts5e_EbdactvType_EBDActvActive;
constexpr int Bcusts5e_EbdactvType_EbdactvType_ARRAYSIZE = Bcusts5e_EbdactvType_EbdactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_EbdactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_EbdactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_EbdactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_EbdactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_EbdactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_EbdactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_EbdactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_EbdactvType>(
    Bcusts5e_EbdactvType_descriptor(), name, value);
}
enum Bcusts5e_ScmactvType : int {
  Bcusts5e_ScmactvType_SCMActvNotActive = 0,
  Bcusts5e_ScmactvType_SCMActvActive = 1
};
bool Bcusts5e_ScmactvType_IsValid(int value);
constexpr Bcusts5e_ScmactvType Bcusts5e_ScmactvType_ScmactvType_MIN = Bcusts5e_ScmactvType_SCMActvNotActive;
constexpr Bcusts5e_ScmactvType Bcusts5e_ScmactvType_ScmactvType_MAX = Bcusts5e_ScmactvType_SCMActvActive;
constexpr int Bcusts5e_ScmactvType_ScmactvType_ARRAYSIZE = Bcusts5e_ScmactvType_ScmactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_ScmactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_ScmactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_ScmactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_ScmactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_ScmactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_ScmactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_ScmactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_ScmactvType>(
    Bcusts5e_ScmactvType_descriptor(), name, value);
}
enum Bcusts5e_DtcactvType : int {
  Bcusts5e_DtcactvType_DTCActvNotActive = 0,
  Bcusts5e_DtcactvType_DTCActvActive = 1
};
bool Bcusts5e_DtcactvType_IsValid(int value);
constexpr Bcusts5e_DtcactvType Bcusts5e_DtcactvType_DtcactvType_MIN = Bcusts5e_DtcactvType_DTCActvNotActive;
constexpr Bcusts5e_DtcactvType Bcusts5e_DtcactvType_DtcactvType_MAX = Bcusts5e_DtcactvType_DTCActvActive;
constexpr int Bcusts5e_DtcactvType_DtcactvType_ARRAYSIZE = Bcusts5e_DtcactvType_DtcactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_DtcactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_DtcactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_DtcactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_DtcactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_DtcactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_DtcactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_DtcactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_DtcactvType>(
    Bcusts5e_DtcactvType_descriptor(), name, value);
}
enum Bcusts5e_HrbactvType : int {
  Bcusts5e_HrbactvType_HRBActvNotActive = 0,
  Bcusts5e_HrbactvType_HRBActvActive = 1
};
bool Bcusts5e_HrbactvType_IsValid(int value);
constexpr Bcusts5e_HrbactvType Bcusts5e_HrbactvType_HrbactvType_MIN = Bcusts5e_HrbactvType_HRBActvNotActive;
constexpr Bcusts5e_HrbactvType Bcusts5e_HrbactvType_HrbactvType_MAX = Bcusts5e_HrbactvType_HRBActvActive;
constexpr int Bcusts5e_HrbactvType_HrbactvType_ARRAYSIZE = Bcusts5e_HrbactvType_HrbactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_HrbactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_HrbactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_HrbactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_HrbactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_HrbactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_HrbactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_HrbactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_HrbactvType>(
    Bcusts5e_HrbactvType_descriptor(), name, value);
}
enum Bcusts5e_EcdttempoffsType : int {
  Bcusts5e_EcdttempoffsType_ECDTTempOffsTemperatureNotHigh = 0,
  Bcusts5e_EcdttempoffsType_ECDTTempOffsTemepratureTooHigh = 1
};
bool Bcusts5e_EcdttempoffsType_IsValid(int value);
constexpr Bcusts5e_EcdttempoffsType Bcusts5e_EcdttempoffsType_EcdttempoffsType_MIN = Bcusts5e_EcdttempoffsType_ECDTTempOffsTemperatureNotHigh;
constexpr Bcusts5e_EcdttempoffsType Bcusts5e_EcdttempoffsType_EcdttempoffsType_MAX = Bcusts5e_EcdttempoffsType_ECDTTempOffsTemepratureTooHigh;
constexpr int Bcusts5e_EcdttempoffsType_EcdttempoffsType_ARRAYSIZE = Bcusts5e_EcdttempoffsType_EcdttempoffsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_EcdttempoffsType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_EcdttempoffsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_EcdttempoffsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_EcdttempoffsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_EcdttempoffsType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_EcdttempoffsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_EcdttempoffsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_EcdttempoffsType>(
    Bcusts5e_EcdttempoffsType_descriptor(), name, value);
}
enum Bcusts5e_CddsactvType : int {
  Bcusts5e_CddsactvType_CDDSActvNotActive = 0,
  Bcusts5e_CddsactvType_CDDSActvActive = 1
};
bool Bcusts5e_CddsactvType_IsValid(int value);
constexpr Bcusts5e_CddsactvType Bcusts5e_CddsactvType_CddsactvType_MIN = Bcusts5e_CddsactvType_CDDSActvNotActive;
constexpr Bcusts5e_CddsactvType Bcusts5e_CddsactvType_CddsactvType_MAX = Bcusts5e_CddsactvType_CDDSActvActive;
constexpr int Bcusts5e_CddsactvType_CddsactvType_ARRAYSIZE = Bcusts5e_CddsactvType_CddsactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_CddsactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_CddsactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_CddsactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_CddsactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_CddsactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_CddsactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_CddsactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_CddsactvType>(
    Bcusts5e_CddsactvType_descriptor(), name, value);
}
enum Bcusts5e_HhcactvType : int {
  Bcusts5e_HhcactvType_HHCActvNotActive = 0,
  Bcusts5e_HhcactvType_HHCActvActive = 1
};
bool Bcusts5e_HhcactvType_IsValid(int value);
constexpr Bcusts5e_HhcactvType Bcusts5e_HhcactvType_HhcactvType_MIN = Bcusts5e_HhcactvType_HHCActvNotActive;
constexpr Bcusts5e_HhcactvType Bcusts5e_HhcactvType_HhcactvType_MAX = Bcusts5e_HhcactvType_HHCActvActive;
constexpr int Bcusts5e_HhcactvType_HhcactvType_ARRAYSIZE = Bcusts5e_HhcactvType_HhcactvType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bcusts5e_HhcactvType_descriptor();
template<typename T>
inline const std::string& Bcusts5e_HhcactvType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bcusts5e_HhcactvType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bcusts5e_HhcactvType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bcusts5e_HhcactvType_descriptor(), enum_t_value);
}
inline bool Bcusts5e_HhcactvType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bcusts5e_HhcactvType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bcusts5e_HhcactvType>(
    Bcusts5e_HhcactvType_descriptor(), name, value);
}
enum Pulsecnt65_WhlplscntrrvldType : int {
  Pulsecnt65_WhlplscntrrvldType_WhlplscntRRvldvalid = 0,
  Pulsecnt65_WhlplscntrrvldType_WhlplscntRRvldinvalid = 1
};
bool Pulsecnt65_WhlplscntrrvldType_IsValid(int value);
constexpr Pulsecnt65_WhlplscntrrvldType Pulsecnt65_WhlplscntrrvldType_WhlplscntrrvldType_MIN = Pulsecnt65_WhlplscntrrvldType_WhlplscntRRvldvalid;
constexpr Pulsecnt65_WhlplscntrrvldType Pulsecnt65_WhlplscntrrvldType_WhlplscntrrvldType_MAX = Pulsecnt65_WhlplscntrrvldType_WhlplscntRRvldinvalid;
constexpr int Pulsecnt65_WhlplscntrrvldType_WhlplscntrrvldType_ARRAYSIZE = Pulsecnt65_WhlplscntrrvldType_WhlplscntrrvldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pulsecnt65_WhlplscntrrvldType_descriptor();
template<typename T>
inline const std::string& Pulsecnt65_WhlplscntrrvldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pulsecnt65_WhlplscntrrvldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pulsecnt65_WhlplscntrrvldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Pulsecnt65_WhlplscntrrvldType_descriptor(), enum_t_value);
}
inline bool Pulsecnt65_WhlplscntrrvldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Pulsecnt65_WhlplscntrrvldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Pulsecnt65_WhlplscntrrvldType>(
    Pulsecnt65_WhlplscntrrvldType_descriptor(), name, value);
}
enum Pulsecnt65_WhlplscntrlvldType : int {
  Pulsecnt65_WhlplscntrlvldType_WhlplscntRLvldvalid = 0,
  Pulsecnt65_WhlplscntrlvldType_WhlplscntRLvldinvalid = 1
};
bool Pulsecnt65_WhlplscntrlvldType_IsValid(int value);
constexpr Pulsecnt65_WhlplscntrlvldType Pulsecnt65_WhlplscntrlvldType_WhlplscntrlvldType_MIN = Pulsecnt65_WhlplscntrlvldType_WhlplscntRLvldvalid;
constexpr Pulsecnt65_WhlplscntrlvldType Pulsecnt65_WhlplscntrlvldType_WhlplscntrlvldType_MAX = Pulsecnt65_WhlplscntrlvldType_WhlplscntRLvldinvalid;
constexpr int Pulsecnt65_WhlplscntrlvldType_WhlplscntrlvldType_ARRAYSIZE = Pulsecnt65_WhlplscntrlvldType_WhlplscntrlvldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pulsecnt65_WhlplscntrlvldType_descriptor();
template<typename T>
inline const std::string& Pulsecnt65_WhlplscntrlvldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pulsecnt65_WhlplscntrlvldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pulsecnt65_WhlplscntrlvldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Pulsecnt65_WhlplscntrlvldType_descriptor(), enum_t_value);
}
inline bool Pulsecnt65_WhlplscntrlvldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Pulsecnt65_WhlplscntrlvldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Pulsecnt65_WhlplscntrlvldType>(
    Pulsecnt65_WhlplscntrlvldType_descriptor(), name, value);
}
enum Pulsecnt65_WhlplscntfrvldType : int {
  Pulsecnt65_WhlplscntfrvldType_WhlplscntFRvldvalid = 0,
  Pulsecnt65_WhlplscntfrvldType_WhlplscntFRvldinvalid = 1
};
bool Pulsecnt65_WhlplscntfrvldType_IsValid(int value);
constexpr Pulsecnt65_WhlplscntfrvldType Pulsecnt65_WhlplscntfrvldType_WhlplscntfrvldType_MIN = Pulsecnt65_WhlplscntfrvldType_WhlplscntFRvldvalid;
constexpr Pulsecnt65_WhlplscntfrvldType Pulsecnt65_WhlplscntfrvldType_WhlplscntfrvldType_MAX = Pulsecnt65_WhlplscntfrvldType_WhlplscntFRvldinvalid;
constexpr int Pulsecnt65_WhlplscntfrvldType_WhlplscntfrvldType_ARRAYSIZE = Pulsecnt65_WhlplscntfrvldType_WhlplscntfrvldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pulsecnt65_WhlplscntfrvldType_descriptor();
template<typename T>
inline const std::string& Pulsecnt65_WhlplscntfrvldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pulsecnt65_WhlplscntfrvldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pulsecnt65_WhlplscntfrvldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Pulsecnt65_WhlplscntfrvldType_descriptor(), enum_t_value);
}
inline bool Pulsecnt65_WhlplscntfrvldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Pulsecnt65_WhlplscntfrvldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Pulsecnt65_WhlplscntfrvldType>(
    Pulsecnt65_WhlplscntfrvldType_descriptor(), name, value);
}
enum Pulsecnt65_WhlplscntflvldType : int {
  Pulsecnt65_WhlplscntflvldType_WhlplscntFLvldvalid = 0,
  Pulsecnt65_WhlplscntflvldType_WhlplscntFLvldinvalid = 1
};
bool Pulsecnt65_WhlplscntflvldType_IsValid(int value);
constexpr Pulsecnt65_WhlplscntflvldType Pulsecnt65_WhlplscntflvldType_WhlplscntflvldType_MIN = Pulsecnt65_WhlplscntflvldType_WhlplscntFLvldvalid;
constexpr Pulsecnt65_WhlplscntflvldType Pulsecnt65_WhlplscntflvldType_WhlplscntflvldType_MAX = Pulsecnt65_WhlplscntflvldType_WhlplscntFLvldinvalid;
constexpr int Pulsecnt65_WhlplscntflvldType_WhlplscntflvldType_ARRAYSIZE = Pulsecnt65_WhlplscntflvldType_WhlplscntflvldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pulsecnt65_WhlplscntflvldType_descriptor();
template<typename T>
inline const std::string& Pulsecnt65_WhlplscntflvldType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pulsecnt65_WhlplscntflvldType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pulsecnt65_WhlplscntflvldType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Pulsecnt65_WhlplscntflvldType_descriptor(), enum_t_value);
}
inline bool Pulsecnt65_WhlplscntflvldType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Pulsecnt65_WhlplscntflvldType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Pulsecnt65_WhlplscntflvldType>(
    Pulsecnt65_WhlplscntflvldType_descriptor(), name, value);
}
enum Aebreq79_AbareqType : int {
  Aebreq79_AbareqType_ABAReqNoRequest = 0,
  Aebreq79_AbareqType_ABAReqRequest = 1
};
bool Aebreq79_AbareqType_IsValid(int value);
constexpr Aebreq79_AbareqType Aebreq79_AbareqType_AbareqType_MIN = Aebreq79_AbareqType_ABAReqNoRequest;
constexpr Aebreq79_AbareqType Aebreq79_AbareqType_AbareqType_MAX = Aebreq79_AbareqType_ABAReqRequest;
constexpr int Aebreq79_AbareqType_AbareqType_ARRAYSIZE = Aebreq79_AbareqType_AbareqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_AbareqType_descriptor();
template<typename T>
inline const std::string& Aebreq79_AbareqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_AbareqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_AbareqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_AbareqType_descriptor(), enum_t_value);
}
inline bool Aebreq79_AbareqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_AbareqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_AbareqType>(
    Aebreq79_AbareqType_descriptor(), name, value);
}
enum Aebreq79_AbasnvtylvlType : int {
  Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel0 = 0,
  Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel1 = 1,
  Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel2 = 2,
  Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel3 = 3
};
bool Aebreq79_AbasnvtylvlType_IsValid(int value);
constexpr Aebreq79_AbasnvtylvlType Aebreq79_AbasnvtylvlType_AbasnvtylvlType_MIN = Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel0;
constexpr Aebreq79_AbasnvtylvlType Aebreq79_AbasnvtylvlType_AbasnvtylvlType_MAX = Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel3;
constexpr int Aebreq79_AbasnvtylvlType_AbasnvtylvlType_ARRAYSIZE = Aebreq79_AbasnvtylvlType_AbasnvtylvlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_AbasnvtylvlType_descriptor();
template<typename T>
inline const std::string& Aebreq79_AbasnvtylvlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_AbasnvtylvlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_AbasnvtylvlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_AbasnvtylvlType_descriptor(), enum_t_value);
}
inline bool Aebreq79_AbasnvtylvlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_AbasnvtylvlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_AbasnvtylvlType>(
    Aebreq79_AbasnvtylvlType_descriptor(), name, value);
}
enum Aebreq79_AwbsnvtylvlType : int {
  Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel0 = 0,
  Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel1 = 1,
  Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel2 = 2,
  Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel3 = 3
};
bool Aebreq79_AwbsnvtylvlType_IsValid(int value);
constexpr Aebreq79_AwbsnvtylvlType Aebreq79_AwbsnvtylvlType_AwbsnvtylvlType_MIN = Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel0;
constexpr Aebreq79_AwbsnvtylvlType Aebreq79_AwbsnvtylvlType_AwbsnvtylvlType_MAX = Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel3;
constexpr int Aebreq79_AwbsnvtylvlType_AwbsnvtylvlType_ARRAYSIZE = Aebreq79_AwbsnvtylvlType_AwbsnvtylvlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_AwbsnvtylvlType_descriptor();
template<typename T>
inline const std::string& Aebreq79_AwbsnvtylvlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_AwbsnvtylvlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_AwbsnvtylvlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_AwbsnvtylvlType_descriptor(), enum_t_value);
}
inline bool Aebreq79_AwbsnvtylvlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_AwbsnvtylvlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_AwbsnvtylvlType>(
    Aebreq79_AwbsnvtylvlType_descriptor(), name, value);
}
enum Aebreq79_AwbreqType : int {
  Aebreq79_AwbreqType_AWBReqNoRequest = 0,
  Aebreq79_AwbreqType_AWBReqRequest = 1
};
bool Aebreq79_AwbreqType_IsValid(int value);
constexpr Aebreq79_AwbreqType Aebreq79_AwbreqType_AwbreqType_MIN = Aebreq79_AwbreqType_AWBReqNoRequest;
constexpr Aebreq79_AwbreqType Aebreq79_AwbreqType_AwbreqType_MAX = Aebreq79_AwbreqType_AWBReqRequest;
constexpr int Aebreq79_AwbreqType_AwbreqType_ARRAYSIZE = Aebreq79_AwbreqType_AwbreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_AwbreqType_descriptor();
template<typename T>
inline const std::string& Aebreq79_AwbreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_AwbreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_AwbreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_AwbreqType_descriptor(), enum_t_value);
}
inline bool Aebreq79_AwbreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_AwbreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_AwbreqType>(
    Aebreq79_AwbreqType_descriptor(), name, value);
}
enum Aebreq79_ScmdecelreqType : int {
  Aebreq79_ScmdecelreqType_SCMDecelReqNoRequest = 0,
  Aebreq79_ScmdecelreqType_SCMDecelReqRequest = 1
};
bool Aebreq79_ScmdecelreqType_IsValid(int value);
constexpr Aebreq79_ScmdecelreqType Aebreq79_ScmdecelreqType_ScmdecelreqType_MIN = Aebreq79_ScmdecelreqType_SCMDecelReqNoRequest;
constexpr Aebreq79_ScmdecelreqType Aebreq79_ScmdecelreqType_ScmdecelreqType_MAX = Aebreq79_ScmdecelreqType_SCMDecelReqRequest;
constexpr int Aebreq79_ScmdecelreqType_ScmdecelreqType_ARRAYSIZE = Aebreq79_ScmdecelreqType_ScmdecelreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_ScmdecelreqType_descriptor();
template<typename T>
inline const std::string& Aebreq79_ScmdecelreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_ScmdecelreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_ScmdecelreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_ScmdecelreqType_descriptor(), enum_t_value);
}
inline bool Aebreq79_ScmdecelreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_ScmdecelreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_ScmdecelreqType>(
    Aebreq79_ScmdecelreqType_descriptor(), name, value);
}
enum Aebreq79_AebdecelreqType : int {
  Aebreq79_AebdecelreqType_AEBDecelReqNoRequest = 0,
  Aebreq79_AebdecelreqType_AEBDecelReqRequest = 1
};
bool Aebreq79_AebdecelreqType_IsValid(int value);
constexpr Aebreq79_AebdecelreqType Aebreq79_AebdecelreqType_AebdecelreqType_MIN = Aebreq79_AebdecelreqType_AEBDecelReqNoRequest;
constexpr Aebreq79_AebdecelreqType Aebreq79_AebdecelreqType_AebdecelreqType_MAX = Aebreq79_AebdecelreqType_AEBDecelReqRequest;
constexpr int Aebreq79_AebdecelreqType_AebdecelreqType_ARRAYSIZE = Aebreq79_AebdecelreqType_AebdecelreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_AebdecelreqType_descriptor();
template<typename T>
inline const std::string& Aebreq79_AebdecelreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_AebdecelreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_AebdecelreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_AebdecelreqType_descriptor(), enum_t_value);
}
inline bool Aebreq79_AebdecelreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_AebdecelreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_AebdecelreqType>(
    Aebreq79_AebdecelreqType_descriptor(), name, value);
}
enum Aebreq79_EbadecelreqType : int {
  Aebreq79_EbadecelreqType_EBADecelReqNoRequest = 0,
  Aebreq79_EbadecelreqType_EBADecelReqRequest = 1
};
bool Aebreq79_EbadecelreqType_IsValid(int value);
constexpr Aebreq79_EbadecelreqType Aebreq79_EbadecelreqType_EbadecelreqType_MIN = Aebreq79_EbadecelreqType_EBADecelReqNoRequest;
constexpr Aebreq79_EbadecelreqType Aebreq79_EbadecelreqType_EbadecelreqType_MAX = Aebreq79_EbadecelreqType_EBADecelReqRequest;
constexpr int Aebreq79_EbadecelreqType_EbadecelreqType_ARRAYSIZE = Aebreq79_EbadecelreqType_EbadecelreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_EbadecelreqType_descriptor();
template<typename T>
inline const std::string& Aebreq79_EbadecelreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_EbadecelreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_EbadecelreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_EbadecelreqType_descriptor(), enum_t_value);
}
inline bool Aebreq79_EbadecelreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_EbadecelreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_EbadecelreqType>(
    Aebreq79_EbadecelreqType_descriptor(), name, value);
}
enum Aebreq79_AbpreqType : int {
  Aebreq79_AbpreqType_ABPReqNoRequest = 0,
  Aebreq79_AbpreqType_ABPReqRequest = 1
};
bool Aebreq79_AbpreqType_IsValid(int value);
constexpr Aebreq79_AbpreqType Aebreq79_AbpreqType_AbpreqType_MIN = Aebreq79_AbpreqType_ABPReqNoRequest;
constexpr Aebreq79_AbpreqType Aebreq79_AbpreqType_AbpreqType_MAX = Aebreq79_AbpreqType_ABPReqRequest;
constexpr int Aebreq79_AbpreqType_AbpreqType_ARRAYSIZE = Aebreq79_AbpreqType_AbpreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_AbpreqType_descriptor();
template<typename T>
inline const std::string& Aebreq79_AbpreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_AbpreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_AbpreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_AbpreqType_descriptor(), enum_t_value);
}
inline bool Aebreq79_AbpreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_AbpreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_AbpreqType>(
    Aebreq79_AbpreqType_descriptor(), name, value);
}
enum Aebreq79_PedpdecreqType : int {
  Aebreq79_PedpdecreqType_PEDPDecReqNoRequest = 0,
  Aebreq79_PedpdecreqType_PEDPDecReqRequest = 1
};
bool Aebreq79_PedpdecreqType_IsValid(int value);
constexpr Aebreq79_PedpdecreqType Aebreq79_PedpdecreqType_PedpdecreqType_MIN = Aebreq79_PedpdecreqType_PEDPDecReqNoRequest;
constexpr Aebreq79_PedpdecreqType Aebreq79_PedpdecreqType_PedpdecreqType_MAX = Aebreq79_PedpdecreqType_PEDPDecReqRequest;
constexpr int Aebreq79_PedpdecreqType_PedpdecreqType_ARRAYSIZE = Aebreq79_PedpdecreqType_PedpdecreqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Aebreq79_PedpdecreqType_descriptor();
template<typename T>
inline const std::string& Aebreq79_PedpdecreqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Aebreq79_PedpdecreqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Aebreq79_PedpdecreqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Aebreq79_PedpdecreqType_descriptor(), enum_t_value);
}
inline bool Aebreq79_PedpdecreqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Aebreq79_PedpdecreqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Aebreq79_PedpdecreqType>(
    Aebreq79_PedpdecreqType_descriptor(), name, value);
}
enum Scmsts7b_ScmfailstsType : int {
  Scmsts7b_ScmfailstsType_SCMFailStsNormal = 0,
  Scmsts7b_ScmfailstsType_SCMFailStsFail = 1,
  Scmsts7b_ScmfailstsType_SCMFailStsReserved = 2,
  Scmsts7b_ScmfailstsType_SCMFailStsInvalid = 3
};
bool Scmsts7b_ScmfailstsType_IsValid(int value);
constexpr Scmsts7b_ScmfailstsType Scmsts7b_ScmfailstsType_ScmfailstsType_MIN = Scmsts7b_ScmfailstsType_SCMFailStsNormal;
constexpr Scmsts7b_ScmfailstsType Scmsts7b_ScmfailstsType_ScmfailstsType_MAX = Scmsts7b_ScmfailstsType_SCMFailStsInvalid;
constexpr int Scmsts7b_ScmfailstsType_ScmfailstsType_ARRAYSIZE = Scmsts7b_ScmfailstsType_ScmfailstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_ScmfailstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_ScmfailstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_ScmfailstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_ScmfailstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_ScmfailstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_ScmfailstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_ScmfailstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_ScmfailstsType>(
    Scmsts7b_ScmfailstsType_descriptor(), name, value);
}
enum Scmsts7b_HilowbeampushswtstsType : int {
  Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsNoCommandDefaultPosition = 0,
  Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsFlashCommand = 1,
  Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsLowBeamOrHighBeamCommand = 2,
  Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsInvalid = 3
};
bool Scmsts7b_HilowbeampushswtstsType_IsValid(int value);
constexpr Scmsts7b_HilowbeampushswtstsType Scmsts7b_HilowbeampushswtstsType_HilowbeampushswtstsType_MIN = Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsNoCommandDefaultPosition;
constexpr Scmsts7b_HilowbeampushswtstsType Scmsts7b_HilowbeampushswtstsType_HilowbeampushswtstsType_MAX = Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsInvalid;
constexpr int Scmsts7b_HilowbeampushswtstsType_HilowbeampushswtstsType_ARRAYSIZE = Scmsts7b_HilowbeampushswtstsType_HilowbeampushswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_HilowbeampushswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_HilowbeampushswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_HilowbeampushswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_HilowbeampushswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_HilowbeampushswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_HilowbeampushswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_HilowbeampushswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_HilowbeampushswtstsType>(
    Scmsts7b_HilowbeampushswtstsType_descriptor(), name, value);
}
enum Scmsts7b_FrntwiprswtstsType : int {
  Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperOff = 0,
  Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperLowSpeed = 1,
  Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperHighSpeed = 2,
  Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperIntermediateSpeed = 3,
  Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperWipeOneTime = 4,
  Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsReserved5 = 5,
  Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsReserved6 = 6,
  Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsInvalid = 7
};
bool Scmsts7b_FrntwiprswtstsType_IsValid(int value);
constexpr Scmsts7b_FrntwiprswtstsType Scmsts7b_FrntwiprswtstsType_FrntwiprswtstsType_MIN = Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperOff;
constexpr Scmsts7b_FrntwiprswtstsType Scmsts7b_FrntwiprswtstsType_FrntwiprswtstsType_MAX = Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsInvalid;
constexpr int Scmsts7b_FrntwiprswtstsType_FrntwiprswtstsType_ARRAYSIZE = Scmsts7b_FrntwiprswtstsType_FrntwiprswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_FrntwiprswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_FrntwiprswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_FrntwiprswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_FrntwiprswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_FrntwiprswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_FrntwiprswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_FrntwiprswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_FrntwiprswtstsType>(
    Scmsts7b_FrntwiprswtstsType_descriptor(), name, value);
}
enum Scmsts7b_TurnindcrswtstsType : int {
  Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsNoTurnIndicator = 0,
  Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsTurnIndicatorLeft = 1,
  Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsTurnIndicatorRight = 2,
  Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsInvalid = 3
};
bool Scmsts7b_TurnindcrswtstsType_IsValid(int value);
constexpr Scmsts7b_TurnindcrswtstsType Scmsts7b_TurnindcrswtstsType_TurnindcrswtstsType_MIN = Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsNoTurnIndicator;
constexpr Scmsts7b_TurnindcrswtstsType Scmsts7b_TurnindcrswtstsType_TurnindcrswtstsType_MAX = Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsInvalid;
constexpr int Scmsts7b_TurnindcrswtstsType_TurnindcrswtstsType_ARRAYSIZE = Scmsts7b_TurnindcrswtstsType_TurnindcrswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_TurnindcrswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_TurnindcrswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_TurnindcrswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_TurnindcrswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_TurnindcrswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_TurnindcrswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_TurnindcrswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_TurnindcrswtstsType>(
    Scmsts7b_TurnindcrswtstsType_descriptor(), name, value);
}
enum Scmsts7b_FoglipushswtstsType : int {
  Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsPushSwitchNotPressed = 0,
  Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsPushSwitchPressed = 1,
  Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsReserved = 2,
  Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsInvalid = 3
};
bool Scmsts7b_FoglipushswtstsType_IsValid(int value);
constexpr Scmsts7b_FoglipushswtstsType Scmsts7b_FoglipushswtstsType_FoglipushswtstsType_MIN = Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsPushSwitchNotPressed;
constexpr Scmsts7b_FoglipushswtstsType Scmsts7b_FoglipushswtstsType_FoglipushswtstsType_MAX = Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsInvalid;
constexpr int Scmsts7b_FoglipushswtstsType_FoglipushswtstsType_ARRAYSIZE = Scmsts7b_FoglipushswtstsType_FoglipushswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_FoglipushswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_FoglipushswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_FoglipushswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_FoglipushswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_FoglipushswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_FoglipushswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_FoglipushswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_FoglipushswtstsType>(
    Scmsts7b_FoglipushswtstsType_descriptor(), name, value);
}
enum Scmsts7b_FrntwiprinterspdType : int {
  Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdReserved = 0,
  Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdIntermediateSpeed1 = 1,
  Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdIntermediateSpeed2 = 2,
  Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdIntermediateSpeed3 = 3,
  Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdIntermediateSpeed4 = 4,
  Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdReserved5 = 5,
  Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdReserved6 = 6,
  Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdInvalid = 7
};
bool Scmsts7b_FrntwiprinterspdType_IsValid(int value);
constexpr Scmsts7b_FrntwiprinterspdType Scmsts7b_FrntwiprinterspdType_FrntwiprinterspdType_MIN = Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdReserved;
constexpr Scmsts7b_FrntwiprinterspdType Scmsts7b_FrntwiprinterspdType_FrntwiprinterspdType_MAX = Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdInvalid;
constexpr int Scmsts7b_FrntwiprinterspdType_FrntwiprinterspdType_ARRAYSIZE = Scmsts7b_FrntwiprinterspdType_FrntwiprinterspdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_FrntwiprinterspdType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_FrntwiprinterspdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_FrntwiprinterspdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_FrntwiprinterspdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_FrntwiprinterspdType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_FrntwiprinterspdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_FrntwiprinterspdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_FrntwiprinterspdType>(
    Scmsts7b_FrntwiprinterspdType_descriptor(), name, value);
}
enum Scmsts7b_MenuorvoldwnpushswtstsType : int {
  Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsNotPressed = 0,
  Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsPressed = 1,
  Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsReserved = 2,
  Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsInvalid = 3
};
bool Scmsts7b_MenuorvoldwnpushswtstsType_IsValid(int value);
constexpr Scmsts7b_MenuorvoldwnpushswtstsType Scmsts7b_MenuorvoldwnpushswtstsType_MenuorvoldwnpushswtstsType_MIN = Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsNotPressed;
constexpr Scmsts7b_MenuorvoldwnpushswtstsType Scmsts7b_MenuorvoldwnpushswtstsType_MenuorvoldwnpushswtstsType_MAX = Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsInvalid;
constexpr int Scmsts7b_MenuorvoldwnpushswtstsType_MenuorvoldwnpushswtstsType_ARRAYSIZE = Scmsts7b_MenuorvoldwnpushswtstsType_MenuorvoldwnpushswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_MenuorvoldwnpushswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_MenuorvoldwnpushswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_MenuorvoldwnpushswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_MenuorvoldwnpushswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_MenuorvoldwnpushswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_MenuorvoldwnpushswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_MenuorvoldwnpushswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_MenuorvoldwnpushswtstsType>(
    Scmsts7b_MenuorvoldwnpushswtstsType_descriptor(), name, value);
}
enum Scmsts7b_AccspdincorresuswtstsType : int {
  Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsNotPressed = 0,
  Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsPressed = 1,
  Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsReserved = 2,
  Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsInvalid = 3
};
bool Scmsts7b_AccspdincorresuswtstsType_IsValid(int value);
constexpr Scmsts7b_AccspdincorresuswtstsType Scmsts7b_AccspdincorresuswtstsType_AccspdincorresuswtstsType_MIN = Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsNotPressed;
constexpr Scmsts7b_AccspdincorresuswtstsType Scmsts7b_AccspdincorresuswtstsType_AccspdincorresuswtstsType_MAX = Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsInvalid;
constexpr int Scmsts7b_AccspdincorresuswtstsType_AccspdincorresuswtstsType_ARRAYSIZE = Scmsts7b_AccspdincorresuswtstsType_AccspdincorresuswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_AccspdincorresuswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_AccspdincorresuswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_AccspdincorresuswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_AccspdincorresuswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_AccspdincorresuswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_AccspdincorresuswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_AccspdincorresuswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_AccspdincorresuswtstsType>(
    Scmsts7b_AccspdincorresuswtstsType_descriptor(), name, value);
}
enum Scmsts7b_AcctimegapincswtstsType : int {
  Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsNotPressed = 0,
  Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsPressed = 1,
  Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsReserved = 2,
  Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsInvalid = 3
};
bool Scmsts7b_AcctimegapincswtstsType_IsValid(int value);
constexpr Scmsts7b_AcctimegapincswtstsType Scmsts7b_AcctimegapincswtstsType_AcctimegapincswtstsType_MIN = Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsNotPressed;
constexpr Scmsts7b_AcctimegapincswtstsType Scmsts7b_AcctimegapincswtstsType_AcctimegapincswtstsType_MAX = Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsInvalid;
constexpr int Scmsts7b_AcctimegapincswtstsType_AcctimegapincswtstsType_ARRAYSIZE = Scmsts7b_AcctimegapincswtstsType_AcctimegapincswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_AcctimegapincswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_AcctimegapincswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_AcctimegapincswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_AcctimegapincswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_AcctimegapincswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_AcctimegapincswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_AcctimegapincswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_AcctimegapincswtstsType>(
    Scmsts7b_AcctimegapincswtstsType_descriptor(), name, value);
}
enum Scmsts7b_SelnpushswtstsType : int {
  Scmsts7b_SelnpushswtstsType_SelnPushSwtStsNotPressed = 0,
  Scmsts7b_SelnpushswtstsType_SelnPushSwtStsPressed = 1,
  Scmsts7b_SelnpushswtstsType_SelnPushSwtStsReserved = 2,
  Scmsts7b_SelnpushswtstsType_SelnPushSwtStsInvalid = 3
};
bool Scmsts7b_SelnpushswtstsType_IsValid(int value);
constexpr Scmsts7b_SelnpushswtstsType Scmsts7b_SelnpushswtstsType_SelnpushswtstsType_MIN = Scmsts7b_SelnpushswtstsType_SelnPushSwtStsNotPressed;
constexpr Scmsts7b_SelnpushswtstsType Scmsts7b_SelnpushswtstsType_SelnpushswtstsType_MAX = Scmsts7b_SelnpushswtstsType_SelnPushSwtStsInvalid;
constexpr int Scmsts7b_SelnpushswtstsType_SelnpushswtstsType_ARRAYSIZE = Scmsts7b_SelnpushswtstsType_SelnpushswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_SelnpushswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_SelnpushswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_SelnpushswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_SelnpushswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_SelnpushswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_SelnpushswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_SelnpushswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_SelnpushswtstsType>(
    Scmsts7b_SelnpushswtstsType_descriptor(), name, value);
}
enum Scmsts7b_ModetogdecswtstsType : int {
  Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsNotPressed = 0,
  Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsPressed = 1,
  Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsReserved = 2,
  Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsInvalid = 3
};
bool Scmsts7b_ModetogdecswtstsType_IsValid(int value);
constexpr Scmsts7b_ModetogdecswtstsType Scmsts7b_ModetogdecswtstsType_ModetogdecswtstsType_MIN = Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsNotPressed;
constexpr Scmsts7b_ModetogdecswtstsType Scmsts7b_ModetogdecswtstsType_ModetogdecswtstsType_MAX = Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsInvalid;
constexpr int Scmsts7b_ModetogdecswtstsType_ModetogdecswtstsType_ARRAYSIZE = Scmsts7b_ModetogdecswtstsType_ModetogdecswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_ModetogdecswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_ModetogdecswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_ModetogdecswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_ModetogdecswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_ModetogdecswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_ModetogdecswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_ModetogdecswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_ModetogdecswtstsType>(
    Scmsts7b_ModetogdecswtstsType_descriptor(), name, value);
}
enum Scmsts7b_ModetogincswtstsType : int {
  Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsNotPressed = 0,
  Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsPressed = 1,
  Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsReserved = 2,
  Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsInvalid = 3
};
bool Scmsts7b_ModetogincswtstsType_IsValid(int value);
constexpr Scmsts7b_ModetogincswtstsType Scmsts7b_ModetogincswtstsType_ModetogincswtstsType_MIN = Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsNotPressed;
constexpr Scmsts7b_ModetogincswtstsType Scmsts7b_ModetogincswtstsType_ModetogincswtstsType_MAX = Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsInvalid;
constexpr int Scmsts7b_ModetogincswtstsType_ModetogincswtstsType_ARRAYSIZE = Scmsts7b_ModetogincswtstsType_ModetogincswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_ModetogincswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_ModetogincswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_ModetogincswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_ModetogincswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_ModetogincswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_ModetogincswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_ModetogincswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_ModetogincswtstsType>(
    Scmsts7b_ModetogincswtstsType_descriptor(), name, value);
}
enum Scmsts7b_MenupushswtstsType : int {
  Scmsts7b_MenupushswtstsType_MenuPushSwtStsNotPressed = 0,
  Scmsts7b_MenupushswtstsType_MenuPushSwtStsPressed = 1,
  Scmsts7b_MenupushswtstsType_MenuPushSwtStsReserved = 2,
  Scmsts7b_MenupushswtstsType_MenuPushSwtStsInvalid = 3
};
bool Scmsts7b_MenupushswtstsType_IsValid(int value);
constexpr Scmsts7b_MenupushswtstsType Scmsts7b_MenupushswtstsType_MenupushswtstsType_MIN = Scmsts7b_MenupushswtstsType_MenuPushSwtStsNotPressed;
constexpr Scmsts7b_MenupushswtstsType Scmsts7b_MenupushswtstsType_MenupushswtstsType_MAX = Scmsts7b_MenupushswtstsType_MenuPushSwtStsInvalid;
constexpr int Scmsts7b_MenupushswtstsType_MenupushswtstsType_ARRAYSIZE = Scmsts7b_MenupushswtstsType_MenupushswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_MenupushswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_MenupushswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_MenupushswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_MenupushswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_MenupushswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_MenupushswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_MenupushswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_MenupushswtstsType>(
    Scmsts7b_MenupushswtstsType_descriptor(), name, value);
}
enum Scmsts7b_SwcfailstsType : int {
  Scmsts7b_SwcfailstsType_SWCFailStsNormal = 0,
  Scmsts7b_SwcfailstsType_SWCFailStsFail = 1,
  Scmsts7b_SwcfailstsType_SWCFailStsReserved = 2,
  Scmsts7b_SwcfailstsType_SWCFailStsInvalid = 3
};
bool Scmsts7b_SwcfailstsType_IsValid(int value);
constexpr Scmsts7b_SwcfailstsType Scmsts7b_SwcfailstsType_SwcfailstsType_MIN = Scmsts7b_SwcfailstsType_SWCFailStsNormal;
constexpr Scmsts7b_SwcfailstsType Scmsts7b_SwcfailstsType_SwcfailstsType_MAX = Scmsts7b_SwcfailstsType_SWCFailStsInvalid;
constexpr int Scmsts7b_SwcfailstsType_SwcfailstsType_ARRAYSIZE = Scmsts7b_SwcfailstsType_SwcfailstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_SwcfailstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_SwcfailstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_SwcfailstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_SwcfailstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_SwcfailstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_SwcfailstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_SwcfailstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_SwcfailstsType>(
    Scmsts7b_SwcfailstsType_descriptor(), name, value);
}
enum Scmsts7b_AccspddecswtstsType : int {
  Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsNotPressed = 0,
  Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsPressed = 1,
  Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsReserved = 2,
  Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsInvalid = 3
};
bool Scmsts7b_AccspddecswtstsType_IsValid(int value);
constexpr Scmsts7b_AccspddecswtstsType Scmsts7b_AccspddecswtstsType_AccspddecswtstsType_MIN = Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsNotPressed;
constexpr Scmsts7b_AccspddecswtstsType Scmsts7b_AccspddecswtstsType_AccspddecswtstsType_MAX = Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsInvalid;
constexpr int Scmsts7b_AccspddecswtstsType_AccspddecswtstsType_ARRAYSIZE = Scmsts7b_AccspddecswtstsType_AccspddecswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_AccspddecswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_AccspddecswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_AccspddecswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_AccspddecswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_AccspddecswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_AccspddecswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_AccspddecswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_AccspddecswtstsType>(
    Scmsts7b_AccspddecswtstsType_descriptor(), name, value);
}
enum Scmsts7b_MenulepushswtstsType : int {
  Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsNotPressed = 0,
  Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsPressed = 1,
  Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsReserved = 2,
  Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsInvalid = 3
};
bool Scmsts7b_MenulepushswtstsType_IsValid(int value);
constexpr Scmsts7b_MenulepushswtstsType Scmsts7b_MenulepushswtstsType_MenulepushswtstsType_MIN = Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsNotPressed;
constexpr Scmsts7b_MenulepushswtstsType Scmsts7b_MenulepushswtstsType_MenulepushswtstsType_MAX = Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsInvalid;
constexpr int Scmsts7b_MenulepushswtstsType_MenulepushswtstsType_ARRAYSIZE = Scmsts7b_MenulepushswtstsType_MenulepushswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_MenulepushswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_MenulepushswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_MenulepushswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_MenulepushswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_MenulepushswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_MenulepushswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_MenulepushswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_MenulepushswtstsType>(
    Scmsts7b_MenulepushswtstsType_descriptor(), name, value);
}
enum Scmsts7b_MenuorvoluppushswtstsType : int {
  Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsNotPressed = 0,
  Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsPressed = 1,
  Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsReserved = 2,
  Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsInvalid = 3
};
bool Scmsts7b_MenuorvoluppushswtstsType_IsValid(int value);
constexpr Scmsts7b_MenuorvoluppushswtstsType Scmsts7b_MenuorvoluppushswtstsType_MenuorvoluppushswtstsType_MIN = Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsNotPressed;
constexpr Scmsts7b_MenuorvoluppushswtstsType Scmsts7b_MenuorvoluppushswtstsType_MenuorvoluppushswtstsType_MAX = Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsInvalid;
constexpr int Scmsts7b_MenuorvoluppushswtstsType_MenuorvoluppushswtstsType_ARRAYSIZE = Scmsts7b_MenuorvoluppushswtstsType_MenuorvoluppushswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_MenuorvoluppushswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_MenuorvoluppushswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_MenuorvoluppushswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_MenuorvoluppushswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_MenuorvoluppushswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_MenuorvoluppushswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_MenuorvoluppushswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_MenuorvoluppushswtstsType>(
    Scmsts7b_MenuorvoluppushswtstsType_descriptor(), name, value);
}
enum Scmsts7b_AcctimegapdecswtstsType : int {
  Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsNotPressed = 0,
  Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsPressed = 1,
  Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsReserved = 2,
  Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsInvalid = 3
};
bool Scmsts7b_AcctimegapdecswtstsType_IsValid(int value);
constexpr Scmsts7b_AcctimegapdecswtstsType Scmsts7b_AcctimegapdecswtstsType_AcctimegapdecswtstsType_MIN = Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsNotPressed;
constexpr Scmsts7b_AcctimegapdecswtstsType Scmsts7b_AcctimegapdecswtstsType_AcctimegapdecswtstsType_MAX = Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsInvalid;
constexpr int Scmsts7b_AcctimegapdecswtstsType_AcctimegapdecswtstsType_ARRAYSIZE = Scmsts7b_AcctimegapdecswtstsType_AcctimegapdecswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_AcctimegapdecswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_AcctimegapdecswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_AcctimegapdecswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_AcctimegapdecswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_AcctimegapdecswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_AcctimegapdecswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_AcctimegapdecswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_AcctimegapdecswtstsType>(
    Scmsts7b_AcctimegapdecswtstsType_descriptor(), name, value);
}
enum Scmsts7b_MenuripushswtstsType : int {
  Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsNotPressed = 0,
  Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsPressed = 1,
  Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsReserved = 2,
  Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsInvalid = 3
};
bool Scmsts7b_MenuripushswtstsType_IsValid(int value);
constexpr Scmsts7b_MenuripushswtstsType Scmsts7b_MenuripushswtstsType_MenuripushswtstsType_MIN = Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsNotPressed;
constexpr Scmsts7b_MenuripushswtstsType Scmsts7b_MenuripushswtstsType_MenuripushswtstsType_MAX = Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsInvalid;
constexpr int Scmsts7b_MenuripushswtstsType_MenuripushswtstsType_ARRAYSIZE = Scmsts7b_MenuripushswtstsType_MenuripushswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_MenuripushswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_MenuripushswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_MenuripushswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_MenuripushswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_MenuripushswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_MenuripushswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_MenuripushswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_MenuripushswtstsType>(
    Scmsts7b_MenuripushswtstsType_descriptor(), name, value);
}
enum Scmsts7b_AccsetswtstsType : int {
  Scmsts7b_AccsetswtstsType_AccSetSwtStsNotPressed = 0,
  Scmsts7b_AccsetswtstsType_AccSetSwtStsPressed = 1,
  Scmsts7b_AccsetswtstsType_AccSetSwtStsReserved = 2,
  Scmsts7b_AccsetswtstsType_AccSetSwtStsInvalid = 3
};
bool Scmsts7b_AccsetswtstsType_IsValid(int value);
constexpr Scmsts7b_AccsetswtstsType Scmsts7b_AccsetswtstsType_AccsetswtstsType_MIN = Scmsts7b_AccsetswtstsType_AccSetSwtStsNotPressed;
constexpr Scmsts7b_AccsetswtstsType Scmsts7b_AccsetswtstsType_AccsetswtstsType_MAX = Scmsts7b_AccsetswtstsType_AccSetSwtStsInvalid;
constexpr int Scmsts7b_AccsetswtstsType_AccsetswtstsType_ARRAYSIZE = Scmsts7b_AccsetswtstsType_AccsetswtstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scmsts7b_AccsetswtstsType_descriptor();
template<typename T>
inline const std::string& Scmsts7b_AccsetswtstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scmsts7b_AccsetswtstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scmsts7b_AccsetswtstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scmsts7b_AccsetswtstsType_descriptor(), enum_t_value);
}
inline bool Scmsts7b_AccsetswtstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scmsts7b_AccsetswtstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scmsts7b_AccsetswtstsType>(
    Scmsts7b_AccsetswtstsType_descriptor(), name, value);
}
enum Accreq7f_AccdrvoffType : int {
  Accreq7f_AccdrvoffType_AccDrvoffNoRequest = 0,
  Accreq7f_AccdrvoffType_AccDrvoffRequest = 1
};
bool Accreq7f_AccdrvoffType_IsValid(int value);
constexpr Accreq7f_AccdrvoffType Accreq7f_AccdrvoffType_AccdrvoffType_MIN = Accreq7f_AccdrvoffType_AccDrvoffNoRequest;
constexpr Accreq7f_AccdrvoffType Accreq7f_AccdrvoffType_AccdrvoffType_MAX = Accreq7f_AccdrvoffType_AccDrvoffRequest;
constexpr int Accreq7f_AccdrvoffType_AccdrvoffType_ARRAYSIZE = Accreq7f_AccdrvoffType_AccdrvoffType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Accreq7f_AccdrvoffType_descriptor();
template<typename T>
inline const std::string& Accreq7f_AccdrvoffType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Accreq7f_AccdrvoffType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Accreq7f_AccdrvoffType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Accreq7f_AccdrvoffType_descriptor(), enum_t_value);
}
inline bool Accreq7f_AccdrvoffType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Accreq7f_AccdrvoffType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Accreq7f_AccdrvoffType>(
    Accreq7f_AccdrvoffType_descriptor(), name, value);
}
enum Accreq7f_AccdestopType : int {
  Accreq7f_AccdestopType_AccDeStopNoRequest = 0,
  Accreq7f_AccdestopType_AccDeStoprequest = 1
};
bool Accreq7f_AccdestopType_IsValid(int value);
constexpr Accreq7f_AccdestopType Accreq7f_AccdestopType_AccdestopType_MIN = Accreq7f_AccdestopType_AccDeStopNoRequest;
constexpr Accreq7f_AccdestopType Accreq7f_AccdestopType_AccdestopType_MAX = Accreq7f_AccdestopType_AccDeStoprequest;
constexpr int Accreq7f_AccdestopType_AccdestopType_ARRAYSIZE = Accreq7f_AccdestopType_AccdestopType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Accreq7f_AccdestopType_descriptor();
template<typename T>
inline const std::string& Accreq7f_AccdestopType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Accreq7f_AccdestopType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Accreq7f_AccdestopType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Accreq7f_AccdestopType_descriptor(), enum_t_value);
}
inline bool Accreq7f_AccdestopType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Accreq7f_AccdestopType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Accreq7f_AccdestopType>(
    Accreq7f_AccdestopType_descriptor(), name, value);
}
enum Accreq7f_AccmodeType : int {
  Accreq7f_AccmodeType_AccModeOffMode = 0,
  Accreq7f_AccmodeType_AccModePassiveMode = 1,
  Accreq7f_AccmodeType_AccModeStandbyMode = 2,
  Accreq7f_AccmodeType_AccModeActiveControlMode = 3,
  Accreq7f_AccmodeType_AccModeBrakeOnlyMode = 4,
  Accreq7f_AccmodeType_AccModeOverrideMode = 5,
  Accreq7f_AccmodeType_AccModeStandstillMode = 6,
  Accreq7f_AccmodeType_AccModeFailureMode = 7
};
bool Accreq7f_AccmodeType_IsValid(int value);
constexpr Accreq7f_AccmodeType Accreq7f_AccmodeType_AccmodeType_MIN = Accreq7f_AccmodeType_AccModeOffMode;
constexpr Accreq7f_AccmodeType Accreq7f_AccmodeType_AccmodeType_MAX = Accreq7f_AccmodeType_AccModeFailureMode;
constexpr int Accreq7f_AccmodeType_AccmodeType_ARRAYSIZE = Accreq7f_AccmodeType_AccmodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Accreq7f_AccmodeType_descriptor();
template<typename T>
inline const std::string& Accreq7f_AccmodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Accreq7f_AccmodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Accreq7f_AccmodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Accreq7f_AccmodeType_descriptor(), enum_t_value);
}
inline bool Accreq7f_AccmodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Accreq7f_AccmodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Accreq7f_AccmodeType>(
    Accreq7f_AccmodeType_descriptor(), name, value);
}
enum Accreq7f_AcchvydecelType : int {
  Accreq7f_AcchvydecelType_AccHvydecelNotRequest = 0,
  Accreq7f_AcchvydecelType_AccHvydecelrequest = 1
};
bool Accreq7f_AcchvydecelType_IsValid(int value);
constexpr Accreq7f_AcchvydecelType Accreq7f_AcchvydecelType_AcchvydecelType_MIN = Accreq7f_AcchvydecelType_AccHvydecelNotRequest;
constexpr Accreq7f_AcchvydecelType Accreq7f_AcchvydecelType_AcchvydecelType_MAX = Accreq7f_AcchvydecelType_AccHvydecelrequest;
constexpr int Accreq7f_AcchvydecelType_AcchvydecelType_ARRAYSIZE = Accreq7f_AcchvydecelType_AcchvydecelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Accreq7f_AcchvydecelType_descriptor();
template<typename T>
inline const std::string& Accreq7f_AcchvydecelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Accreq7f_AcchvydecelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Accreq7f_AcchvydecelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Accreq7f_AcchvydecelType_descriptor(), enum_t_value);
}
inline bool Accreq7f_AcchvydecelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Accreq7f_AcchvydecelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Accreq7f_AcchvydecelType>(
    Accreq7f_AcchvydecelType_descriptor(), name, value);
}
enum Accreq7f_AccheavymodeType : int {
  Accreq7f_AccheavymodeType_AccHeavymodeinactive = 0,
  Accreq7f_AccheavymodeType_AccHeavymodereserved1 = 1,
  Accreq7f_AccheavymodeType_AccHeavymodereserved2 = 2,
  Accreq7f_AccheavymodeType_AccHeavymodeactive = 3
};
bool Accreq7f_AccheavymodeType_IsValid(int value);
constexpr Accreq7f_AccheavymodeType Accreq7f_AccheavymodeType_AccheavymodeType_MIN = Accreq7f_AccheavymodeType_AccHeavymodeinactive;
constexpr Accreq7f_AccheavymodeType Accreq7f_AccheavymodeType_AccheavymodeType_MAX = Accreq7f_AccheavymodeType_AccHeavymodeactive;
constexpr int Accreq7f_AccheavymodeType_AccheavymodeType_ARRAYSIZE = Accreq7f_AccheavymodeType_AccheavymodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Accreq7f_AccheavymodeType_descriptor();
template<typename T>
inline const std::string& Accreq7f_AccheavymodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Accreq7f_AccheavymodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Accreq7f_AccheavymodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Accreq7f_AccheavymodeType_descriptor(), enum_t_value);
}
inline bool Accreq7f_AccheavymodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Accreq7f_AccheavymodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Accreq7f_AccheavymodeType>(
    Accreq7f_AccheavymodeType_descriptor(), name, value);
}
enum Motorsts0286_FrntmottqvalidType : int {
  Motorsts0286_FrntmottqvalidType_FrntMotTqValidvalid = 0,
  Motorsts0286_FrntmottqvalidType_FrntMotTqValidinvalid = 1
};
bool Motorsts0286_FrntmottqvalidType_IsValid(int value);
constexpr Motorsts0286_FrntmottqvalidType Motorsts0286_FrntmottqvalidType_FrntmottqvalidType_MIN = Motorsts0286_FrntmottqvalidType_FrntMotTqValidvalid;
constexpr Motorsts0286_FrntmottqvalidType Motorsts0286_FrntmottqvalidType_FrntmottqvalidType_MAX = Motorsts0286_FrntmottqvalidType_FrntMotTqValidinvalid;
constexpr int Motorsts0286_FrntmottqvalidType_FrntmottqvalidType_ARRAYSIZE = Motorsts0286_FrntmottqvalidType_FrntmottqvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Motorsts0286_FrntmottqvalidType_descriptor();
template<typename T>
inline const std::string& Motorsts0286_FrntmottqvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Motorsts0286_FrntmottqvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Motorsts0286_FrntmottqvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Motorsts0286_FrntmottqvalidType_descriptor(), enum_t_value);
}
inline bool Motorsts0286_FrntmottqvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Motorsts0286_FrntmottqvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Motorsts0286_FrntmottqvalidType>(
    Motorsts0286_FrntmottqvalidType_descriptor(), name, value);
}
enum Motorsts0286_FrntmotspdvalidType : int {
  Motorsts0286_FrntmotspdvalidType_FrntMotSpdValidvalid = 0,
  Motorsts0286_FrntmotspdvalidType_FrntMotSpdValidinvalid = 1
};
bool Motorsts0286_FrntmotspdvalidType_IsValid(int value);
constexpr Motorsts0286_FrntmotspdvalidType Motorsts0286_FrntmotspdvalidType_FrntmotspdvalidType_MIN = Motorsts0286_FrntmotspdvalidType_FrntMotSpdValidvalid;
constexpr Motorsts0286_FrntmotspdvalidType Motorsts0286_FrntmotspdvalidType_FrntmotspdvalidType_MAX = Motorsts0286_FrntmotspdvalidType_FrntMotSpdValidinvalid;
constexpr int Motorsts0286_FrntmotspdvalidType_FrntmotspdvalidType_ARRAYSIZE = Motorsts0286_FrntmotspdvalidType_FrntmotspdvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Motorsts0286_FrntmotspdvalidType_descriptor();
template<typename T>
inline const std::string& Motorsts0286_FrntmotspdvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Motorsts0286_FrntmotspdvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Motorsts0286_FrntmotspdvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Motorsts0286_FrntmotspdvalidType_descriptor(), enum_t_value);
}
inline bool Motorsts0286_FrntmotspdvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Motorsts0286_FrntmotspdvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Motorsts0286_FrntmotspdvalidType>(
    Motorsts0286_FrntmotspdvalidType_descriptor(), name, value);
}
enum Motorsts018e_RearmottqvalidType : int {
  Motorsts018e_RearmottqvalidType_RearMotTqValidvalid = 0,
  Motorsts018e_RearmottqvalidType_RearMotTqValidinvalid = 1
};
bool Motorsts018e_RearmottqvalidType_IsValid(int value);
constexpr Motorsts018e_RearmottqvalidType Motorsts018e_RearmottqvalidType_RearmottqvalidType_MIN = Motorsts018e_RearmottqvalidType_RearMotTqValidvalid;
constexpr Motorsts018e_RearmottqvalidType Motorsts018e_RearmottqvalidType_RearmottqvalidType_MAX = Motorsts018e_RearmottqvalidType_RearMotTqValidinvalid;
constexpr int Motorsts018e_RearmottqvalidType_RearmottqvalidType_ARRAYSIZE = Motorsts018e_RearmottqvalidType_RearmottqvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Motorsts018e_RearmottqvalidType_descriptor();
template<typename T>
inline const std::string& Motorsts018e_RearmottqvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Motorsts018e_RearmottqvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Motorsts018e_RearmottqvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Motorsts018e_RearmottqvalidType_descriptor(), enum_t_value);
}
inline bool Motorsts018e_RearmottqvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Motorsts018e_RearmottqvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Motorsts018e_RearmottqvalidType>(
    Motorsts018e_RearmottqvalidType_descriptor(), name, value);
}
enum Motorsts018e_RearmotspdvalidType : int {
  Motorsts018e_RearmotspdvalidType_RearMotSpdValidvalid = 0,
  Motorsts018e_RearmotspdvalidType_RearMotSpdValidinvalid = 1
};
bool Motorsts018e_RearmotspdvalidType_IsValid(int value);
constexpr Motorsts018e_RearmotspdvalidType Motorsts018e_RearmotspdvalidType_RearmotspdvalidType_MIN = Motorsts018e_RearmotspdvalidType_RearMotSpdValidvalid;
constexpr Motorsts018e_RearmotspdvalidType Motorsts018e_RearmotspdvalidType_RearmotspdvalidType_MAX = Motorsts018e_RearmotspdvalidType_RearMotSpdValidinvalid;
constexpr int Motorsts018e_RearmotspdvalidType_RearmotspdvalidType_ARRAYSIZE = Motorsts018e_RearmotspdvalidType_RearmotspdvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Motorsts018e_RearmotspdvalidType_descriptor();
template<typename T>
inline const std::string& Motorsts018e_RearmotspdvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Motorsts018e_RearmotspdvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Motorsts018e_RearmotspdvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Motorsts018e_RearmotspdvalidType_descriptor(), enum_t_value);
}
inline bool Motorsts018e_RearmotspdvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Motorsts018e_RearmotspdvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Motorsts018e_RearmotspdvalidType>(
    Motorsts018e_RearmotspdvalidType_descriptor(), name, value);
}
enum Epsreqc6_EpsreqtypType : int {
  Epsreqc6_EpsreqtypType_EPSReqTypNoRequest = 0,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved1DSR = 1,
  Epsreqc6_EpsreqtypType_EPSReqTypTOIRequest = 2,
  Epsreqc6_EpsreqtypType_EPSReqTypPAIRequest = 3,
  Epsreqc6_EpsreqtypType_EPSReqTypDAIRequest = 4,
  Epsreqc6_EpsreqtypType_EPSReqTypHI1Request = 5,
  Epsreqc6_EpsreqtypType_EPSReqTypHI2Request = 6,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved7 = 7,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved8 = 8,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved9 = 9,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved10 = 10,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved11 = 11,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved12 = 12,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved13 = 13,
  Epsreqc6_EpsreqtypType_EPSReqTypReserved14 = 14,
  Epsreqc6_EpsreqtypType_EPSReqTypSignalNotAvailable = 15
};
bool Epsreqc6_EpsreqtypType_IsValid(int value);
constexpr Epsreqc6_EpsreqtypType Epsreqc6_EpsreqtypType_EpsreqtypType_MIN = Epsreqc6_EpsreqtypType_EPSReqTypNoRequest;
constexpr Epsreqc6_EpsreqtypType Epsreqc6_EpsreqtypType_EpsreqtypType_MAX = Epsreqc6_EpsreqtypType_EPSReqTypSignalNotAvailable;
constexpr int Epsreqc6_EpsreqtypType_EpsreqtypType_ARRAYSIZE = Epsreqc6_EpsreqtypType_EpsreqtypType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsreqc6_EpsreqtypType_descriptor();
template<typename T>
inline const std::string& Epsreqc6_EpsreqtypType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsreqc6_EpsreqtypType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsreqc6_EpsreqtypType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsreqc6_EpsreqtypType_descriptor(), enum_t_value);
}
inline bool Epsreqc6_EpsreqtypType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsreqc6_EpsreqtypType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsreqc6_EpsreqtypType>(
    Epsreqc6_EpsreqtypType_descriptor(), name, value);
}
enum Epsreqc6_SysvalidType : int {
  Epsreqc6_SysvalidType_SysValidInvalid = 0,
  Epsreqc6_SysvalidType_SysValidValid = 1
};
bool Epsreqc6_SysvalidType_IsValid(int value);
constexpr Epsreqc6_SysvalidType Epsreqc6_SysvalidType_SysvalidType_MIN = Epsreqc6_SysvalidType_SysValidInvalid;
constexpr Epsreqc6_SysvalidType Epsreqc6_SysvalidType_SysvalidType_MAX = Epsreqc6_SysvalidType_SysValidValid;
constexpr int Epsreqc6_SysvalidType_SysvalidType_ARRAYSIZE = Epsreqc6_SysvalidType_SysvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsreqc6_SysvalidType_descriptor();
template<typename T>
inline const std::string& Epsreqc6_SysvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsreqc6_SysvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsreqc6_SysvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsreqc6_SysvalidType_descriptor(), enum_t_value);
}
inline bool Epsreqc6_SysvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsreqc6_SysvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsreqc6_SysvalidType>(
    Epsreqc6_SysvalidType_descriptor(), name, value);
}
enum Epsreqc6_PilotsymType : int {
  Epsreqc6_PilotsymType_PilotSymNoSymbol = 0,
  Epsreqc6_PilotsymType_PilotSymGraySymbol = 1,
  Epsreqc6_PilotsymType_PilotSymWhiteSymbol = 2,
  Epsreqc6_PilotsymType_PilotSymreserved = 3
};
bool Epsreqc6_PilotsymType_IsValid(int value);
constexpr Epsreqc6_PilotsymType Epsreqc6_PilotsymType_PilotsymType_MIN = Epsreqc6_PilotsymType_PilotSymNoSymbol;
constexpr Epsreqc6_PilotsymType Epsreqc6_PilotsymType_PilotsymType_MAX = Epsreqc6_PilotsymType_PilotSymreserved;
constexpr int Epsreqc6_PilotsymType_PilotsymType_ARRAYSIZE = Epsreqc6_PilotsymType_PilotsymType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsreqc6_PilotsymType_descriptor();
template<typename T>
inline const std::string& Epsreqc6_PilotsymType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsreqc6_PilotsymType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsreqc6_PilotsymType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsreqc6_PilotsymType_descriptor(), enum_t_value);
}
inline bool Epsreqc6_PilotsymType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsreqc6_PilotsymType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsreqc6_PilotsymType>(
    Epsreqc6_PilotsymType_descriptor(), name, value);
}
enum Epsreqc6_AdcaccsymType : int {
  Epsreqc6_AdcaccsymType_AdcAccsymNoSymbol = 0,
  Epsreqc6_AdcaccsymType_AdcAccsymGraySymbol = 1,
  Epsreqc6_AdcaccsymType_AdcAccsymWhiteSymbol = 2,
  Epsreqc6_AdcaccsymType_AdcAccsymreserved = 3
};
bool Epsreqc6_AdcaccsymType_IsValid(int value);
constexpr Epsreqc6_AdcaccsymType Epsreqc6_AdcaccsymType_AdcaccsymType_MIN = Epsreqc6_AdcaccsymType_AdcAccsymNoSymbol;
constexpr Epsreqc6_AdcaccsymType Epsreqc6_AdcaccsymType_AdcaccsymType_MAX = Epsreqc6_AdcaccsymType_AdcAccsymreserved;
constexpr int Epsreqc6_AdcaccsymType_AdcaccsymType_ARRAYSIZE = Epsreqc6_AdcaccsymType_AdcaccsymType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsreqc6_AdcaccsymType_descriptor();
template<typename T>
inline const std::string& Epsreqc6_AdcaccsymType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsreqc6_AdcaccsymType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsreqc6_AdcaccsymType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsreqc6_AdcaccsymType_descriptor(), enum_t_value);
}
inline bool Epsreqc6_AdcaccsymType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsreqc6_AdcaccsymType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsreqc6_AdcaccsymType>(
    Epsreqc6_AdcaccsymType_descriptor(), name, value);
}
enum Epsstatus01d5_EpswarnlampType : int {
  Epsstatus01d5_EpswarnlampType_EPSwarnLampoff = 0,
  Epsstatus01d5_EpswarnlampType_EPSwarnLampon = 1,
  Epsstatus01d5_EpswarnlampType_EPSwarnLampNotAvailable = 2,
  Epsstatus01d5_EpswarnlampType_EPSwarnLampreserved = 3
};
bool Epsstatus01d5_EpswarnlampType_IsValid(int value);
constexpr Epsstatus01d5_EpswarnlampType Epsstatus01d5_EpswarnlampType_EpswarnlampType_MIN = Epsstatus01d5_EpswarnlampType_EPSwarnLampoff;
constexpr Epsstatus01d5_EpswarnlampType Epsstatus01d5_EpswarnlampType_EpswarnlampType_MAX = Epsstatus01d5_EpswarnlampType_EPSwarnLampreserved;
constexpr int Epsstatus01d5_EpswarnlampType_EpswarnlampType_ARRAYSIZE = Epsstatus01d5_EpswarnlampType_EpswarnlampType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus01d5_EpswarnlampType_descriptor();
template<typename T>
inline const std::string& Epsstatus01d5_EpswarnlampType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus01d5_EpswarnlampType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus01d5_EpswarnlampType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus01d5_EpswarnlampType_descriptor(), enum_t_value);
}
inline bool Epsstatus01d5_EpswarnlampType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus01d5_EpswarnlampType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus01d5_EpswarnlampType>(
    Epsstatus01d5_EpswarnlampType_descriptor(), name, value);
}
enum Epsstatus01d5_AbsagreqavlType : int {
  Epsstatus01d5_AbsagreqavlType_AbsAgreqavlNotAvailable = 0,
  Epsstatus01d5_AbsagreqavlType_AbsAgreqavlavailable = 1
};
bool Epsstatus01d5_AbsagreqavlType_IsValid(int value);
constexpr Epsstatus01d5_AbsagreqavlType Epsstatus01d5_AbsagreqavlType_AbsagreqavlType_MIN = Epsstatus01d5_AbsagreqavlType_AbsAgreqavlNotAvailable;
constexpr Epsstatus01d5_AbsagreqavlType Epsstatus01d5_AbsagreqavlType_AbsagreqavlType_MAX = Epsstatus01d5_AbsagreqavlType_AbsAgreqavlavailable;
constexpr int Epsstatus01d5_AbsagreqavlType_AbsagreqavlType_ARRAYSIZE = Epsstatus01d5_AbsagreqavlType_AbsagreqavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus01d5_AbsagreqavlType_descriptor();
template<typename T>
inline const std::string& Epsstatus01d5_AbsagreqavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus01d5_AbsagreqavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus01d5_AbsagreqavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus01d5_AbsagreqavlType_descriptor(), enum_t_value);
}
inline bool Epsstatus01d5_AbsagreqavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus01d5_AbsagreqavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus01d5_AbsagreqavlType>(
    Epsstatus01d5_AbsagreqavlType_descriptor(), name, value);
}
enum Epsstatus01d5_EpsstsType : int {
  Epsstatus01d5_EpsstsType_EPSstsinit = 0,
  Epsstatus01d5_EpsstsType_EPSstsnormal = 1,
  Epsstatus01d5_EpsstsType_EPSstsDegradedDueToTempOrVol = 2,
  Epsstatus01d5_EpsstsType_EPSstsTemporaryError = 3,
  Epsstatus01d5_EpsstsType_EPSstsPermamemtError = 4,
  Epsstatus01d5_EpsstsType_EPSstsreserved5 = 5,
  Epsstatus01d5_EpsstsType_EPSstsreserved6 = 6,
  Epsstatus01d5_EpsstsType_EPSstsinvalid = 7
};
bool Epsstatus01d5_EpsstsType_IsValid(int value);
constexpr Epsstatus01d5_EpsstsType Epsstatus01d5_EpsstsType_EpsstsType_MIN = Epsstatus01d5_EpsstsType_EPSstsinit;
constexpr Epsstatus01d5_EpsstsType Epsstatus01d5_EpsstsType_EpsstsType_MAX = Epsstatus01d5_EpsstsType_EPSstsinvalid;
constexpr int Epsstatus01d5_EpsstsType_EpsstsType_ARRAYSIZE = Epsstatus01d5_EpsstsType_EpsstsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus01d5_EpsstsType_descriptor();
template<typename T>
inline const std::string& Epsstatus01d5_EpsstsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus01d5_EpsstsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus01d5_EpsstsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus01d5_EpsstsType_descriptor(), enum_t_value);
}
inline bool Epsstatus01d5_EpsstsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus01d5_EpsstsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus01d5_EpsstsType>(
    Epsstatus01d5_EpsstsType_descriptor(), name, value);
}
enum Epsstatus01d5_EpsmodType : int {
  Epsstatus01d5_EpsmodType_EPSModNone = 0,
  Epsstatus01d5_EpsmodType_EPSModPAI = 1,
  Epsstatus01d5_EpsmodType_EPSModDAI = 2,
  Epsstatus01d5_EpsmodType_EPSModTOI = 3,
  Epsstatus01d5_EpsmodType_EPSModinvalid = 7
};
bool Epsstatus01d5_EpsmodType_IsValid(int value);
constexpr Epsstatus01d5_EpsmodType Epsstatus01d5_EpsmodType_EpsmodType_MIN = Epsstatus01d5_EpsmodType_EPSModNone;
constexpr Epsstatus01d5_EpsmodType Epsstatus01d5_EpsmodType_EpsmodType_MAX = Epsstatus01d5_EpsmodType_EPSModinvalid;
constexpr int Epsstatus01d5_EpsmodType_EpsmodType_ARRAYSIZE = Epsstatus01d5_EpsmodType_EpsmodType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus01d5_EpsmodType_descriptor();
template<typename T>
inline const std::string& Epsstatus01d5_EpsmodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus01d5_EpsmodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus01d5_EpsmodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus01d5_EpsmodType_descriptor(), enum_t_value);
}
inline bool Epsstatus01d5_EpsmodType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus01d5_EpsmodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus01d5_EpsmodType>(
    Epsstatus01d5_EpsmodType_descriptor(), name, value);
}
enum Epsstatus01d5_SteeragspddirType : int {
  Epsstatus01d5_SteeragspddirType_SteeragspddirLeftPlus = 0,
  Epsstatus01d5_SteeragspddirType_SteeragspddirRightMinus = 1
};
bool Epsstatus01d5_SteeragspddirType_IsValid(int value);
constexpr Epsstatus01d5_SteeragspddirType Epsstatus01d5_SteeragspddirType_SteeragspddirType_MIN = Epsstatus01d5_SteeragspddirType_SteeragspddirLeftPlus;
constexpr Epsstatus01d5_SteeragspddirType Epsstatus01d5_SteeragspddirType_SteeragspddirType_MAX = Epsstatus01d5_SteeragspddirType_SteeragspddirRightMinus;
constexpr int Epsstatus01d5_SteeragspddirType_SteeragspddirType_ARRAYSIZE = Epsstatus01d5_SteeragspddirType_SteeragspddirType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus01d5_SteeragspddirType_descriptor();
template<typename T>
inline const std::string& Epsstatus01d5_SteeragspddirType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus01d5_SteeragspddirType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus01d5_SteeragspddirType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus01d5_SteeragspddirType_descriptor(), enum_t_value);
}
inline bool Epsstatus01d5_SteeragspddirType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus01d5_SteeragspddirType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus01d5_SteeragspddirType>(
    Epsstatus01d5_SteeragspddirType_descriptor(), name, value);
}
enum Epsstatus01d5_SteerangledirType : int {
  Epsstatus01d5_SteerangledirType_SteerAngledirLeftPlus = 0,
  Epsstatus01d5_SteerangledirType_SteerAngledirRightMinus = 1
};
bool Epsstatus01d5_SteerangledirType_IsValid(int value);
constexpr Epsstatus01d5_SteerangledirType Epsstatus01d5_SteerangledirType_SteerangledirType_MIN = Epsstatus01d5_SteerangledirType_SteerAngledirLeftPlus;
constexpr Epsstatus01d5_SteerangledirType Epsstatus01d5_SteerangledirType_SteerangledirType_MAX = Epsstatus01d5_SteerangledirType_SteerAngledirRightMinus;
constexpr int Epsstatus01d5_SteerangledirType_SteerangledirType_ARRAYSIZE = Epsstatus01d5_SteerangledirType_SteerangledirType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus01d5_SteerangledirType_descriptor();
template<typename T>
inline const std::string& Epsstatus01d5_SteerangledirType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus01d5_SteerangledirType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus01d5_SteerangledirType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus01d5_SteerangledirType_descriptor(), enum_t_value);
}
inline bool Epsstatus01d5_SteerangledirType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus01d5_SteerangledirType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus01d5_SteerangledirType>(
    Epsstatus01d5_SteerangledirType_descriptor(), name, value);
}
enum Epsstatus01d5_SteerangleandspdvalidType : int {
  Epsstatus01d5_SteerangleandspdvalidType_SteerAngleandspdvalidvalid = 0,
  Epsstatus01d5_SteerangleandspdvalidType_SteerAngleandspdvalidinvalid = 1
};
bool Epsstatus01d5_SteerangleandspdvalidType_IsValid(int value);
constexpr Epsstatus01d5_SteerangleandspdvalidType Epsstatus01d5_SteerangleandspdvalidType_SteerangleandspdvalidType_MIN = Epsstatus01d5_SteerangleandspdvalidType_SteerAngleandspdvalidvalid;
constexpr Epsstatus01d5_SteerangleandspdvalidType Epsstatus01d5_SteerangleandspdvalidType_SteerangleandspdvalidType_MAX = Epsstatus01d5_SteerangleandspdvalidType_SteerAngleandspdvalidinvalid;
constexpr int Epsstatus01d5_SteerangleandspdvalidType_SteerangleandspdvalidType_ARRAYSIZE = Epsstatus01d5_SteerangleandspdvalidType_SteerangleandspdvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus01d5_SteerangleandspdvalidType_descriptor();
template<typename T>
inline const std::string& Epsstatus01d5_SteerangleandspdvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus01d5_SteerangleandspdvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus01d5_SteerangleandspdvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus01d5_SteerangleandspdvalidType_descriptor(), enum_t_value);
}
inline bool Epsstatus01d5_SteerangleandspdvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus01d5_SteerangleandspdvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus01d5_SteerangleandspdvalidType>(
    Epsstatus01d5_SteerangleandspdvalidType_descriptor(), name, value);
}
enum Epsstatus02d6_EpstqreqavlType : int {
  Epsstatus02d6_EpstqreqavlType_EpsTqreqavlNotAvailable = 0,
  Epsstatus02d6_EpstqreqavlType_EpsTqreqavlAvailable = 1
};
bool Epsstatus02d6_EpstqreqavlType_IsValid(int value);
constexpr Epsstatus02d6_EpstqreqavlType Epsstatus02d6_EpstqreqavlType_EpstqreqavlType_MIN = Epsstatus02d6_EpstqreqavlType_EpsTqreqavlNotAvailable;
constexpr Epsstatus02d6_EpstqreqavlType Epsstatus02d6_EpstqreqavlType_EpstqreqavlType_MAX = Epsstatus02d6_EpstqreqavlType_EpsTqreqavlAvailable;
constexpr int Epsstatus02d6_EpstqreqavlType_EpstqreqavlType_ARRAYSIZE = Epsstatus02d6_EpstqreqavlType_EpstqreqavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus02d6_EpstqreqavlType_descriptor();
template<typename T>
inline const std::string& Epsstatus02d6_EpstqreqavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus02d6_EpstqreqavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus02d6_EpstqreqavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus02d6_EpstqreqavlType_descriptor(), enum_t_value);
}
inline bool Epsstatus02d6_EpstqreqavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus02d6_EpstqreqavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus02d6_EpstqreqavlType>(
    Epsstatus02d6_EpstqreqavlType_descriptor(), name, value);
}
enum Epsstatus02d6_EpspinionangreqavlType : int {
  Epsstatus02d6_EpspinionangreqavlType_EpsPinionangreqavlNotAvailable = 0,
  Epsstatus02d6_EpspinionangreqavlType_EpsPinionangreqavlAvailable = 1
};
bool Epsstatus02d6_EpspinionangreqavlType_IsValid(int value);
constexpr Epsstatus02d6_EpspinionangreqavlType Epsstatus02d6_EpspinionangreqavlType_EpspinionangreqavlType_MIN = Epsstatus02d6_EpspinionangreqavlType_EpsPinionangreqavlNotAvailable;
constexpr Epsstatus02d6_EpspinionangreqavlType Epsstatus02d6_EpspinionangreqavlType_EpspinionangreqavlType_MAX = Epsstatus02d6_EpspinionangreqavlType_EpsPinionangreqavlAvailable;
constexpr int Epsstatus02d6_EpspinionangreqavlType_EpspinionangreqavlType_ARRAYSIZE = Epsstatus02d6_EpspinionangreqavlType_EpspinionangreqavlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus02d6_EpspinionangreqavlType_descriptor();
template<typename T>
inline const std::string& Epsstatus02d6_EpspinionangreqavlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus02d6_EpspinionangreqavlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus02d6_EpspinionangreqavlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus02d6_EpspinionangreqavlType_descriptor(), enum_t_value);
}
inline bool Epsstatus02d6_EpspinionangreqavlType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus02d6_EpspinionangreqavlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus02d6_EpspinionangreqavlType>(
    Epsstatus02d6_EpspinionangreqavlType_descriptor(), name, value);
}
enum Epsstatus02d6_EpshandsoffdetnconfidenceType : int {
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOn = 0,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel1 = 1,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel2 = 2,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel3 = 3,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel4 = 4,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel5 = 5,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel6 = 6,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel7 = 7,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel8 = 8,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel9 = 9,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel10 = 10,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel11 = 11,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel12 = 12,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel13 = 13,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel14 = 14,
  Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceSignalNotAvalible = 15
};
bool Epsstatus02d6_EpshandsoffdetnconfidenceType_IsValid(int value);
constexpr Epsstatus02d6_EpshandsoffdetnconfidenceType Epsstatus02d6_EpshandsoffdetnconfidenceType_EpshandsoffdetnconfidenceType_MIN = Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOn;
constexpr Epsstatus02d6_EpshandsoffdetnconfidenceType Epsstatus02d6_EpshandsoffdetnconfidenceType_EpshandsoffdetnconfidenceType_MAX = Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceSignalNotAvalible;
constexpr int Epsstatus02d6_EpshandsoffdetnconfidenceType_EpshandsoffdetnconfidenceType_ARRAYSIZE = Epsstatus02d6_EpshandsoffdetnconfidenceType_EpshandsoffdetnconfidenceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus02d6_EpshandsoffdetnconfidenceType_descriptor();
template<typename T>
inline const std::string& Epsstatus02d6_EpshandsoffdetnconfidenceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus02d6_EpshandsoffdetnconfidenceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus02d6_EpshandsoffdetnconfidenceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus02d6_EpshandsoffdetnconfidenceType_descriptor(), enum_t_value);
}
inline bool Epsstatus02d6_EpshandsoffdetnconfidenceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus02d6_EpshandsoffdetnconfidenceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus02d6_EpshandsoffdetnconfidenceType>(
    Epsstatus02d6_EpshandsoffdetnconfidenceType_descriptor(), name, value);
}
enum Epsstatus02d6_EpspinionagvalidType : int {
  Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidValid = 0,
  Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidInvalid = 1,
  Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidSignalNotAvailable = 2,
  Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidReserved = 3
};
bool Epsstatus02d6_EpspinionagvalidType_IsValid(int value);
constexpr Epsstatus02d6_EpspinionagvalidType Epsstatus02d6_EpspinionagvalidType_EpspinionagvalidType_MIN = Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidValid;
constexpr Epsstatus02d6_EpspinionagvalidType Epsstatus02d6_EpspinionagvalidType_EpspinionagvalidType_MAX = Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidReserved;
constexpr int Epsstatus02d6_EpspinionagvalidType_EpspinionagvalidType_ARRAYSIZE = Epsstatus02d6_EpspinionagvalidType_EpspinionagvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus02d6_EpspinionagvalidType_descriptor();
template<typename T>
inline const std::string& Epsstatus02d6_EpspinionagvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus02d6_EpspinionagvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus02d6_EpspinionagvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus02d6_EpspinionagvalidType_descriptor(), enum_t_value);
}
inline bool Epsstatus02d6_EpspinionagvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus02d6_EpspinionagvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus02d6_EpspinionagvalidType>(
    Epsstatus02d6_EpspinionagvalidType_descriptor(), name, value);
}
enum Epsstatus02d6_EpsdrvoverridedetnType : int {
  Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnOverrideDetected = 0,
  Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnOverrideNotDetected = 1,
  Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnSignalNotAvailable = 2,
  Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnNoActiveADCRequest = 3
};
bool Epsstatus02d6_EpsdrvoverridedetnType_IsValid(int value);
constexpr Epsstatus02d6_EpsdrvoverridedetnType Epsstatus02d6_EpsdrvoverridedetnType_EpsdrvoverridedetnType_MIN = Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnOverrideDetected;
constexpr Epsstatus02d6_EpsdrvoverridedetnType Epsstatus02d6_EpsdrvoverridedetnType_EpsdrvoverridedetnType_MAX = Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnNoActiveADCRequest;
constexpr int Epsstatus02d6_EpsdrvoverridedetnType_EpsdrvoverridedetnType_ARRAYSIZE = Epsstatus02d6_EpsdrvoverridedetnType_EpsdrvoverridedetnType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus02d6_EpsdrvoverridedetnType_descriptor();
template<typename T>
inline const std::string& Epsstatus02d6_EpsdrvoverridedetnType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus02d6_EpsdrvoverridedetnType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus02d6_EpsdrvoverridedetnType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus02d6_EpsdrvoverridedetnType_descriptor(), enum_t_value);
}
inline bool Epsstatus02d6_EpsdrvoverridedetnType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus02d6_EpsdrvoverridedetnType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus02d6_EpsdrvoverridedetnType>(
    Epsstatus02d6_EpsdrvoverridedetnType_descriptor(), name, value);
}
enum Epsstatus02d6_EpsmotortqvalidType : int {
  Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidValid = 0,
  Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidInvalid = 1,
  Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidSignalNotAvailable = 2,
  Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidReserved = 3
};
bool Epsstatus02d6_EpsmotortqvalidType_IsValid(int value);
constexpr Epsstatus02d6_EpsmotortqvalidType Epsstatus02d6_EpsmotortqvalidType_EpsmotortqvalidType_MIN = Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidValid;
constexpr Epsstatus02d6_EpsmotortqvalidType Epsstatus02d6_EpsmotortqvalidType_EpsmotortqvalidType_MAX = Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidReserved;
constexpr int Epsstatus02d6_EpsmotortqvalidType_EpsmotortqvalidType_ARRAYSIZE = Epsstatus02d6_EpsmotortqvalidType_EpsmotortqvalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus02d6_EpsmotortqvalidType_descriptor();
template<typename T>
inline const std::string& Epsstatus02d6_EpsmotortqvalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus02d6_EpsmotortqvalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus02d6_EpsmotortqvalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus02d6_EpsmotortqvalidType_descriptor(), enum_t_value);
}
inline bool Epsstatus02d6_EpsmotortqvalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus02d6_EpsmotortqvalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus02d6_EpsmotortqvalidType>(
    Epsstatus02d6_EpsmotortqvalidType_descriptor(), name, value);
}
enum Epsstatus02d6_EpsestrackforcevalidType : int {
  Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidValid = 0,
  Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidInvalid = 1,
  Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidSignalNotAvailable = 2,
  Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidReserved = 3
};
bool Epsstatus02d6_EpsestrackforcevalidType_IsValid(int value);
constexpr Epsstatus02d6_EpsestrackforcevalidType Epsstatus02d6_EpsestrackforcevalidType_EpsestrackforcevalidType_MIN = Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidValid;
constexpr Epsstatus02d6_EpsestrackforcevalidType Epsstatus02d6_EpsestrackforcevalidType_EpsestrackforcevalidType_MAX = Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidReserved;
constexpr int Epsstatus02d6_EpsestrackforcevalidType_EpsestrackforcevalidType_ARRAYSIZE = Epsstatus02d6_EpsestrackforcevalidType_EpsestrackforcevalidType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Epsstatus02d6_EpsestrackforcevalidType_descriptor();
template<typename T>
inline const std::string& Epsstatus02d6_EpsestrackforcevalidType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Epsstatus02d6_EpsestrackforcevalidType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Epsstatus02d6_EpsestrackforcevalidType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Epsstatus02d6_EpsestrackforcevalidType_descriptor(), enum_t_value);
}
inline bool Epsstatus02d6_EpsestrackforcevalidType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Epsstatus02d6_EpsestrackforcevalidType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Epsstatus02d6_EpsestrackforcevalidType>(
    Epsstatus02d6_EpsestrackforcevalidType_descriptor(), name, value);
}
// ===================================================================

class Avpreq15e PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Avpreq15e) */ {
 public:
  inline Avpreq15e() : Avpreq15e(nullptr) {}
  virtual ~Avpreq15e();

  Avpreq15e(const Avpreq15e& from);
  Avpreq15e(Avpreq15e&& from) noexcept
    : Avpreq15e() {
    *this = ::std::move(from);
  }

  inline Avpreq15e& operator=(const Avpreq15e& from) {
    CopyFrom(from);
    return *this;
  }
  inline Avpreq15e& operator=(Avpreq15e&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Avpreq15e& default_instance();

  static inline const Avpreq15e* internal_default_instance() {
    return reinterpret_cast<const Avpreq15e*>(
               &_Avpreq15e_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Avpreq15e& a, Avpreq15e& b) {
    a.Swap(&b);
  }
  inline void Swap(Avpreq15e* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Avpreq15e* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Avpreq15e* New() const final {
    return CreateMaybeMessage<Avpreq15e>(nullptr);
  }

  Avpreq15e* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Avpreq15e>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Avpreq15e& from);
  void MergeFrom(const Avpreq15e& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Avpreq15e* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Avpreq15e";
  }
  protected:
  explicit Avpreq15e(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Avpreq15e_AvpapaparkmodType AvpapaparkmodType;
  static constexpr AvpapaparkmodType AvpApaparkmodoff =
    Avpreq15e_AvpapaparkmodType_AvpApaparkmodoff;
  static constexpr AvpapaparkmodType AvpApaparkmodSapa =
    Avpreq15e_AvpapaparkmodType_AvpApaparkmodSapa;
  static constexpr AvpapaparkmodType AvpApaparkmodVpps =
    Avpreq15e_AvpapaparkmodType_AvpApaparkmodVpps;
  static constexpr AvpapaparkmodType AvpApaparkmodNBS =
    Avpreq15e_AvpapaparkmodType_AvpApaparkmodNBS;
  static constexpr AvpapaparkmodType AvpApaparkmodDescriptionForTheValue0x4 =
    Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x4;
  static constexpr AvpapaparkmodType AvpApaparkmodDescriptionForTheValue0x5 =
    Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x5;
  static constexpr AvpapaparkmodType AvpApaparkmodDescriptionForTheValue0x6 =
    Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x6;
  static constexpr AvpapaparkmodType AvpApaparkmodDescriptionForTheValue0x7 =
    Avpreq15e_AvpapaparkmodType_AvpApaparkmodDescriptionForTheValue0x7;
  static inline bool AvpapaparkmodType_IsValid(int value) {
    return Avpreq15e_AvpapaparkmodType_IsValid(value);
  }
  static constexpr AvpapaparkmodType AvpapaparkmodType_MIN =
    Avpreq15e_AvpapaparkmodType_AvpapaparkmodType_MIN;
  static constexpr AvpapaparkmodType AvpapaparkmodType_MAX =
    Avpreq15e_AvpapaparkmodType_AvpapaparkmodType_MAX;
  static constexpr int AvpapaparkmodType_ARRAYSIZE =
    Avpreq15e_AvpapaparkmodType_AvpapaparkmodType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvpapaparkmodType_descriptor() {
    return Avpreq15e_AvpapaparkmodType_descriptor();
  }
  template<typename T>
  static inline const std::string& AvpapaparkmodType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvpapaparkmodType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvpapaparkmodType_Name.");
    return Avpreq15e_AvpapaparkmodType_Name(enum_t_value);
  }
  static inline bool AvpapaparkmodType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AvpapaparkmodType* value) {
    return Avpreq15e_AvpapaparkmodType_Parse(name, value);
  }

  typedef Avpreq15e_AvpnbsstsType AvpnbsstsType;
  static constexpr AvpnbsstsType AvpNbsstsNBSOff =
    Avpreq15e_AvpnbsstsType_AvpNbsstsNBSOff;
  static constexpr AvpnbsstsType AvpNbsstsNBSInitial =
    Avpreq15e_AvpnbsstsType_AvpNbsstsNBSInitial;
  static constexpr AvpnbsstsType AvpNbsstsNBSStandby =
    Avpreq15e_AvpnbsstsType_AvpNbsstsNBSStandby;
  static constexpr AvpnbsstsType AvpNbsstsNBSMoving =
    Avpreq15e_AvpnbsstsType_AvpNbsstsNBSMoving;
  static constexpr AvpnbsstsType AvpNbsstsNBSAbort =
    Avpreq15e_AvpnbsstsType_AvpNbsstsNBSAbort;
  static constexpr AvpnbsstsType AvpNbsstsNBSFail =
    Avpreq15e_AvpnbsstsType_AvpNbsstsNBSFail;
  static constexpr AvpnbsstsType AvpNbsstsDescriptionForTheValue0x6 =
    Avpreq15e_AvpnbsstsType_AvpNbsstsDescriptionForTheValue0x6;
  static constexpr AvpnbsstsType AvpNbsstsDescriptionForTheValue0x7 =
    Avpreq15e_AvpnbsstsType_AvpNbsstsDescriptionForTheValue0x7;
  static inline bool AvpnbsstsType_IsValid(int value) {
    return Avpreq15e_AvpnbsstsType_IsValid(value);
  }
  static constexpr AvpnbsstsType AvpnbsstsType_MIN =
    Avpreq15e_AvpnbsstsType_AvpnbsstsType_MIN;
  static constexpr AvpnbsstsType AvpnbsstsType_MAX =
    Avpreq15e_AvpnbsstsType_AvpnbsstsType_MAX;
  static constexpr int AvpnbsstsType_ARRAYSIZE =
    Avpreq15e_AvpnbsstsType_AvpnbsstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvpnbsstsType_descriptor() {
    return Avpreq15e_AvpnbsstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AvpnbsstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvpnbsstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvpnbsstsType_Name.");
    return Avpreq15e_AvpnbsstsType_Name(enum_t_value);
  }
  static inline bool AvpnbsstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AvpnbsstsType* value) {
    return Avpreq15e_AvpnbsstsType_Parse(name, value);
  }

  typedef Avpreq15e_AvpadcvcunbsstsType AvpadcvcunbsstsType;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsNBSOFF =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSOFF;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsNBSIntial =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSIntial;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsNBSStandby =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSStandby;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsNBSMoving =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSMoving;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsNBSAbort =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSAbort;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsNBSFail =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsNBSFail;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0x6 =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0x6;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0x7 =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0x7;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0x8 =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0x8;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0x9 =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0x9;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0xA =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xA;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0xB =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xB;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0xC =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xC;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0xD =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xD;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0xE =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xE;
  static constexpr AvpadcvcunbsstsType AvpAdcvcunbsstsDescriptionForTheValue0xF =
    Avpreq15e_AvpadcvcunbsstsType_AvpAdcvcunbsstsDescriptionForTheValue0xF;
  static inline bool AvpadcvcunbsstsType_IsValid(int value) {
    return Avpreq15e_AvpadcvcunbsstsType_IsValid(value);
  }
  static constexpr AvpadcvcunbsstsType AvpadcvcunbsstsType_MIN =
    Avpreq15e_AvpadcvcunbsstsType_AvpadcvcunbsstsType_MIN;
  static constexpr AvpadcvcunbsstsType AvpadcvcunbsstsType_MAX =
    Avpreq15e_AvpadcvcunbsstsType_AvpadcvcunbsstsType_MAX;
  static constexpr int AvpadcvcunbsstsType_ARRAYSIZE =
    Avpreq15e_AvpadcvcunbsstsType_AvpadcvcunbsstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvpadcvcunbsstsType_descriptor() {
    return Avpreq15e_AvpadcvcunbsstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AvpadcvcunbsstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvpadcvcunbsstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvpadcvcunbsstsType_Name.");
    return Avpreq15e_AvpadcvcunbsstsType_Name(enum_t_value);
  }
  static inline bool AvpadcvcunbsstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AvpadcvcunbsstsType* value) {
    return Avpreq15e_AvpadcvcunbsstsType_Parse(name, value);
  }

  typedef Avpreq15e_AvpapastsType AvpapastsType;
  static constexpr AvpapastsType AvpApastsinitial =
    Avpreq15e_AvpapastsType_AvpApastsinitial;
  static constexpr AvpapastsType AvpApastsStandby =
    Avpreq15e_AvpapastsType_AvpApastsStandby;
  static constexpr AvpapastsType AvpApastsSearch =
    Avpreq15e_AvpapastsType_AvpApastsSearch;
  static constexpr AvpapastsType AvpApastsPreGuidence =
    Avpreq15e_AvpapastsType_AvpApastsPreGuidence;
  static constexpr AvpapastsType AvpApastsGuidance =
    Avpreq15e_AvpapastsType_AvpApastsGuidance;
  static constexpr AvpapastsType AvpApastsReserved =
    Avpreq15e_AvpapastsType_AvpApastsReserved;
  static constexpr AvpapastsType AvpApastsAbort =
    Avpreq15e_AvpapastsType_AvpApastsAbort;
  static constexpr AvpapastsType AvpApastsFault =
    Avpreq15e_AvpapastsType_AvpApastsFault;
  static constexpr AvpapastsType AvpApastsPubRoad =
    Avpreq15e_AvpapastsType_AvpApastsPubRoad;
  static constexpr AvpapastsType AvpApastsOffMode =
    Avpreq15e_AvpapastsType_AvpApastsOffMode;
  static constexpr AvpapastsType AvpApastsReserved10 =
    Avpreq15e_AvpapastsType_AvpApastsReserved10;
  static constexpr AvpapastsType AvpApastsReserved11 =
    Avpreq15e_AvpapastsType_AvpApastsReserved11;
  static constexpr AvpapastsType AvpApastsReserved12 =
    Avpreq15e_AvpapastsType_AvpApastsReserved12;
  static constexpr AvpapastsType AvpApastsReserved13 =
    Avpreq15e_AvpapastsType_AvpApastsReserved13;
  static constexpr AvpapastsType AvpApastsReserved14 =
    Avpreq15e_AvpapastsType_AvpApastsReserved14;
  static constexpr AvpapastsType AvpApastsReserved15 =
    Avpreq15e_AvpapastsType_AvpApastsReserved15;
  static inline bool AvpapastsType_IsValid(int value) {
    return Avpreq15e_AvpapastsType_IsValid(value);
  }
  static constexpr AvpapastsType AvpapastsType_MIN =
    Avpreq15e_AvpapastsType_AvpapastsType_MIN;
  static constexpr AvpapastsType AvpapastsType_MAX =
    Avpreq15e_AvpapastsType_AvpapastsType_MAX;
  static constexpr int AvpapastsType_ARRAYSIZE =
    Avpreq15e_AvpapastsType_AvpapastsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvpapastsType_descriptor() {
    return Avpreq15e_AvpapastsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AvpapastsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvpapastsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvpapastsType_Name.");
    return Avpreq15e_AvpapastsType_Name(enum_t_value);
  }
  static inline bool AvpapastsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AvpapastsType* value) {
    return Avpreq15e_AvpapastsType_Parse(name, value);
  }

  typedef Avpreq15e_AvpbrkmodstsType AvpbrkmodstsType;
  static constexpr AvpbrkmodstsType AvpBrkmodstsNoBrake =
    Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsNoBrake;
  static constexpr AvpbrkmodstsType AvpBrkmodstsComfort =
    Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsComfort;
  static constexpr AvpbrkmodstsType AvpBrkmodstsEmergency =
    Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsEmergency;
  static constexpr AvpbrkmodstsType AvpBrkmodstsReserved =
    Avpreq15e_AvpbrkmodstsType_AvpBrkmodstsReserved;
  static inline bool AvpbrkmodstsType_IsValid(int value) {
    return Avpreq15e_AvpbrkmodstsType_IsValid(value);
  }
  static constexpr AvpbrkmodstsType AvpbrkmodstsType_MIN =
    Avpreq15e_AvpbrkmodstsType_AvpbrkmodstsType_MIN;
  static constexpr AvpbrkmodstsType AvpbrkmodstsType_MAX =
    Avpreq15e_AvpbrkmodstsType_AvpbrkmodstsType_MAX;
  static constexpr int AvpbrkmodstsType_ARRAYSIZE =
    Avpreq15e_AvpbrkmodstsType_AvpbrkmodstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvpbrkmodstsType_descriptor() {
    return Avpreq15e_AvpbrkmodstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AvpbrkmodstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvpbrkmodstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvpbrkmodstsType_Name.");
    return Avpreq15e_AvpbrkmodstsType_Name(enum_t_value);
  }
  static inline bool AvpbrkmodstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AvpbrkmodstsType* value) {
    return Avpreq15e_AvpbrkmodstsType_Parse(name, value);
  }

  typedef Avpreq15e_AvptargearreqType AvptargearreqType;
  static constexpr AvptargearreqType AvpTargearreqNoGearRequest =
    Avpreq15e_AvptargearreqType_AvpTargearreqNoGearRequest;
  static constexpr AvptargearreqType AvpTargearreqD =
    Avpreq15e_AvptargearreqType_AvpTargearreqD;
  static constexpr AvptargearreqType AvpTargearreqR =
    Avpreq15e_AvptargearreqType_AvpTargearreqR;
  static constexpr AvptargearreqType AvpTargearreqN =
    Avpreq15e_AvptargearreqType_AvpTargearreqN;
  static constexpr AvptargearreqType AvpTargearreqP =
    Avpreq15e_AvptargearreqType_AvpTargearreqP;
  static inline bool AvptargearreqType_IsValid(int value) {
    return Avpreq15e_AvptargearreqType_IsValid(value);
  }
  static constexpr AvptargearreqType AvptargearreqType_MIN =
    Avpreq15e_AvptargearreqType_AvptargearreqType_MIN;
  static constexpr AvptargearreqType AvptargearreqType_MAX =
    Avpreq15e_AvptargearreqType_AvptargearreqType_MAX;
  static constexpr int AvptargearreqType_ARRAYSIZE =
    Avpreq15e_AvptargearreqType_AvptargearreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvptargearreqType_descriptor() {
    return Avpreq15e_AvptargearreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& AvptargearreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvptargearreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvptargearreqType_Name.");
    return Avpreq15e_AvptargearreqType_Name(enum_t_value);
  }
  static inline bool AvptargearreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AvptargearreqType* value) {
    return Avpreq15e_AvptargearreqType_Parse(name, value);
  }

  typedef Avpreq15e_AvpcrtlmodeType AvpcrtlmodeType;
  static constexpr AvpcrtlmodeType AvpCrtlmodeNo =
    Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeNo;
  static constexpr AvpcrtlmodeType AvpCrtlmodeDistCrtl =
    Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeDistCrtl;
  static constexpr AvpcrtlmodeType AvpCrtlmodeSpdCrtl =
    Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeSpdCrtl;
  static constexpr AvpcrtlmodeType AvpCrtlmodeRes =
    Avpreq15e_AvpcrtlmodeType_AvpCrtlmodeRes;
  static inline bool AvpcrtlmodeType_IsValid(int value) {
    return Avpreq15e_AvpcrtlmodeType_IsValid(value);
  }
  static constexpr AvpcrtlmodeType AvpcrtlmodeType_MIN =
    Avpreq15e_AvpcrtlmodeType_AvpcrtlmodeType_MIN;
  static constexpr AvpcrtlmodeType AvpcrtlmodeType_MAX =
    Avpreq15e_AvpcrtlmodeType_AvpcrtlmodeType_MAX;
  static constexpr int AvpcrtlmodeType_ARRAYSIZE =
    Avpreq15e_AvpcrtlmodeType_AvpcrtlmodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvpcrtlmodeType_descriptor() {
    return Avpreq15e_AvpcrtlmodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& AvpcrtlmodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvpcrtlmodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvpcrtlmodeType_Name.");
    return Avpreq15e_AvpcrtlmodeType_Name(enum_t_value);
  }
  static inline bool AvpcrtlmodeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AvpcrtlmodeType* value) {
    return Avpreq15e_AvpcrtlmodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAvpapaparkmodFieldNumber = 1,
    kAvpnbsstsFieldNumber = 2,
    kAvpadcvcunbsstsFieldNumber = 3,
    kAvpapastsFieldNumber = 4,
    kAvpspdlmtFieldNumber = 6,
    kAvpbrkmodstsFieldNumber = 5,
    kAvpgearreqactvFieldNumber = 7,
    kAvpmsgcntrFieldNumber = 8,
    kAvpcrcFieldNumber = 9,
    kAvpdstreqFieldNumber = 10,
    kAvptargearreqFieldNumber = 11,
    kAvpcrtlmodeFieldNumber = 12,
  };
  // optional .apollo.canbus.Avpreq15e.AvpapaparkmodType avpapaparkmod = 1;
  bool has_avpapaparkmod() const;
  private:
  bool _internal_has_avpapaparkmod() const;
  public:
  void clear_avpapaparkmod();
  ::apollo::canbus::Avpreq15e_AvpapaparkmodType avpapaparkmod() const;
  void set_avpapaparkmod(::apollo::canbus::Avpreq15e_AvpapaparkmodType value);
  private:
  ::apollo::canbus::Avpreq15e_AvpapaparkmodType _internal_avpapaparkmod() const;
  void _internal_set_avpapaparkmod(::apollo::canbus::Avpreq15e_AvpapaparkmodType value);
  public:

  // optional .apollo.canbus.Avpreq15e.AvpnbsstsType avpnbssts = 2;
  bool has_avpnbssts() const;
  private:
  bool _internal_has_avpnbssts() const;
  public:
  void clear_avpnbssts();
  ::apollo::canbus::Avpreq15e_AvpnbsstsType avpnbssts() const;
  void set_avpnbssts(::apollo::canbus::Avpreq15e_AvpnbsstsType value);
  private:
  ::apollo::canbus::Avpreq15e_AvpnbsstsType _internal_avpnbssts() const;
  void _internal_set_avpnbssts(::apollo::canbus::Avpreq15e_AvpnbsstsType value);
  public:

  // optional .apollo.canbus.Avpreq15e.AvpadcvcunbsstsType avpadcvcunbssts = 3;
  bool has_avpadcvcunbssts() const;
  private:
  bool _internal_has_avpadcvcunbssts() const;
  public:
  void clear_avpadcvcunbssts();
  ::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType avpadcvcunbssts() const;
  void set_avpadcvcunbssts(::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType value);
  private:
  ::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType _internal_avpadcvcunbssts() const;
  void _internal_set_avpadcvcunbssts(::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType value);
  public:

  // optional .apollo.canbus.Avpreq15e.AvpapastsType avpapasts = 4;
  bool has_avpapasts() const;
  private:
  bool _internal_has_avpapasts() const;
  public:
  void clear_avpapasts();
  ::apollo::canbus::Avpreq15e_AvpapastsType avpapasts() const;
  void set_avpapasts(::apollo::canbus::Avpreq15e_AvpapastsType value);
  private:
  ::apollo::canbus::Avpreq15e_AvpapastsType _internal_avpapasts() const;
  void _internal_set_avpapasts(::apollo::canbus::Avpreq15e_AvpapastsType value);
  public:

  // optional double avpspdlmt = 6;
  bool has_avpspdlmt() const;
  private:
  bool _internal_has_avpspdlmt() const;
  public:
  void clear_avpspdlmt();
  double avpspdlmt() const;
  void set_avpspdlmt(double value);
  private:
  double _internal_avpspdlmt() const;
  void _internal_set_avpspdlmt(double value);
  public:

  // optional .apollo.canbus.Avpreq15e.AvpbrkmodstsType avpbrkmodsts = 5;
  bool has_avpbrkmodsts() const;
  private:
  bool _internal_has_avpbrkmodsts() const;
  public:
  void clear_avpbrkmodsts();
  ::apollo::canbus::Avpreq15e_AvpbrkmodstsType avpbrkmodsts() const;
  void set_avpbrkmodsts(::apollo::canbus::Avpreq15e_AvpbrkmodstsType value);
  private:
  ::apollo::canbus::Avpreq15e_AvpbrkmodstsType _internal_avpbrkmodsts() const;
  void _internal_set_avpbrkmodsts(::apollo::canbus::Avpreq15e_AvpbrkmodstsType value);
  public:

  // optional bool avpgearreqactv = 7;
  bool has_avpgearreqactv() const;
  private:
  bool _internal_has_avpgearreqactv() const;
  public:
  void clear_avpgearreqactv();
  bool avpgearreqactv() const;
  void set_avpgearreqactv(bool value);
  private:
  bool _internal_avpgearreqactv() const;
  void _internal_set_avpgearreqactv(bool value);
  public:

  // optional int32 avpmsgcntr = 8;
  bool has_avpmsgcntr() const;
  private:
  bool _internal_has_avpmsgcntr() const;
  public:
  void clear_avpmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 avpmsgcntr() const;
  void set_avpmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avpmsgcntr() const;
  void _internal_set_avpmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 avpcrc = 9;
  bool has_avpcrc() const;
  private:
  bool _internal_has_avpcrc() const;
  public:
  void clear_avpcrc();
  ::PROTOBUF_NAMESPACE_ID::int32 avpcrc() const;
  void set_avpcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avpcrc() const;
  void _internal_set_avpcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 avpdstreq = 10;
  bool has_avpdstreq() const;
  private:
  bool _internal_has_avpdstreq() const;
  public:
  void clear_avpdstreq();
  ::PROTOBUF_NAMESPACE_ID::int32 avpdstreq() const;
  void set_avpdstreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_avpdstreq() const;
  void _internal_set_avpdstreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Avpreq15e.AvptargearreqType avptargearreq = 11;
  bool has_avptargearreq() const;
  private:
  bool _internal_has_avptargearreq() const;
  public:
  void clear_avptargearreq();
  ::apollo::canbus::Avpreq15e_AvptargearreqType avptargearreq() const;
  void set_avptargearreq(::apollo::canbus::Avpreq15e_AvptargearreqType value);
  private:
  ::apollo::canbus::Avpreq15e_AvptargearreqType _internal_avptargearreq() const;
  void _internal_set_avptargearreq(::apollo::canbus::Avpreq15e_AvptargearreqType value);
  public:

  // optional .apollo.canbus.Avpreq15e.AvpcrtlmodeType avpcrtlmode = 12;
  bool has_avpcrtlmode() const;
  private:
  bool _internal_has_avpcrtlmode() const;
  public:
  void clear_avpcrtlmode();
  ::apollo::canbus::Avpreq15e_AvpcrtlmodeType avpcrtlmode() const;
  void set_avpcrtlmode(::apollo::canbus::Avpreq15e_AvpcrtlmodeType value);
  private:
  ::apollo::canbus::Avpreq15e_AvpcrtlmodeType _internal_avpcrtlmode() const;
  void _internal_set_avpcrtlmode(::apollo::canbus::Avpreq15e_AvpcrtlmodeType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Avpreq15e)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int avpapaparkmod_;
  int avpnbssts_;
  int avpadcvcunbssts_;
  int avpapasts_;
  double avpspdlmt_;
  int avpbrkmodsts_;
  bool avpgearreqactv_;
  ::PROTOBUF_NAMESPACE_ID::int32 avpmsgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 avpcrc_;
  ::PROTOBUF_NAMESPACE_ID::int32 avpdstreq_;
  int avptargearreq_;
  int avpcrtlmode_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Vcusts01218 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcusts01218) */ {
 public:
  inline Vcusts01218() : Vcusts01218(nullptr) {}
  virtual ~Vcusts01218();

  Vcusts01218(const Vcusts01218& from);
  Vcusts01218(Vcusts01218&& from) noexcept
    : Vcusts01218() {
    *this = ::std::move(from);
  }

  inline Vcusts01218& operator=(const Vcusts01218& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcusts01218& operator=(Vcusts01218&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vcusts01218& default_instance();

  static inline const Vcusts01218* internal_default_instance() {
    return reinterpret_cast<const Vcusts01218*>(
               &_Vcusts01218_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vcusts01218& a, Vcusts01218& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcusts01218* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcusts01218* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vcusts01218* New() const final {
    return CreateMaybeMessage<Vcusts01218>(nullptr);
  }

  Vcusts01218* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vcusts01218>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vcusts01218& from);
  void MergeFrom(const Vcusts01218& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcusts01218* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcusts01218";
  }
  protected:
  explicit Vcusts01218(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vcusts01218_VcunbsstsType VcunbsstsType;
  static constexpr VcunbsstsType VCUNBSSTsNBSInitial =
    Vcusts01218_VcunbsstsType_VCUNBSSTsNBSInitial;
  static constexpr VcunbsstsType VCUNBSSTsNBSStandby =
    Vcusts01218_VcunbsstsType_VCUNBSSTsNBSStandby;
  static constexpr VcunbsstsType VCUNBSSTsNBSActive =
    Vcusts01218_VcunbsstsType_VCUNBSSTsNBSActive;
  static constexpr VcunbsstsType VCUNBSSTsNBSOverride =
    Vcusts01218_VcunbsstsType_VCUNBSSTsNBSOverride;
  static constexpr VcunbsstsType VCUNBSSTsNBSInhibit =
    Vcusts01218_VcunbsstsType_VCUNBSSTsNBSInhibit;
  static constexpr VcunbsstsType VCUNBSSTsObstacleDetected =
    Vcusts01218_VcunbsstsType_VCUNBSSTsObstacleDetected;
  static constexpr VcunbsstsType VCUNBSSTsGearshiftAllowed =
    Vcusts01218_VcunbsstsType_VCUNBSSTsGearshiftAllowed;
  static constexpr VcunbsstsType VCUNBSSTsRes =
    Vcusts01218_VcunbsstsType_VCUNBSSTsRes;
  static inline bool VcunbsstsType_IsValid(int value) {
    return Vcusts01218_VcunbsstsType_IsValid(value);
  }
  static constexpr VcunbsstsType VcunbsstsType_MIN =
    Vcusts01218_VcunbsstsType_VcunbsstsType_MIN;
  static constexpr VcunbsstsType VcunbsstsType_MAX =
    Vcusts01218_VcunbsstsType_VcunbsstsType_MAX;
  static constexpr int VcunbsstsType_ARRAYSIZE =
    Vcusts01218_VcunbsstsType_VcunbsstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VcunbsstsType_descriptor() {
    return Vcusts01218_VcunbsstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& VcunbsstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VcunbsstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VcunbsstsType_Name.");
    return Vcusts01218_VcunbsstsType_Name(enum_t_value);
  }
  static inline bool VcunbsstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VcunbsstsType* value) {
    return Vcusts01218_VcunbsstsType_Parse(name, value);
  }

  typedef Vcusts01218_TaggearvalidType TaggearvalidType;
  static constexpr TaggearvalidType TagGearvalidvalid =
    Vcusts01218_TaggearvalidType_TagGearvalidvalid;
  static constexpr TaggearvalidType TagGearvalidinvalid =
    Vcusts01218_TaggearvalidType_TagGearvalidinvalid;
  static inline bool TaggearvalidType_IsValid(int value) {
    return Vcusts01218_TaggearvalidType_IsValid(value);
  }
  static constexpr TaggearvalidType TaggearvalidType_MIN =
    Vcusts01218_TaggearvalidType_TaggearvalidType_MIN;
  static constexpr TaggearvalidType TaggearvalidType_MAX =
    Vcusts01218_TaggearvalidType_TaggearvalidType_MAX;
  static constexpr int TaggearvalidType_ARRAYSIZE =
    Vcusts01218_TaggearvalidType_TaggearvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaggearvalidType_descriptor() {
    return Vcusts01218_TaggearvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& TaggearvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaggearvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaggearvalidType_Name.");
    return Vcusts01218_TaggearvalidType_Name(enum_t_value);
  }
  static inline bool TaggearvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TaggearvalidType* value) {
    return Vcusts01218_TaggearvalidType_Parse(name, value);
  }

  typedef Vcusts01218_ActualgearvalidType ActualgearvalidType;
  static constexpr ActualgearvalidType ActualGearvalidvalid =
    Vcusts01218_ActualgearvalidType_ActualGearvalidvalid;
  static constexpr ActualgearvalidType ActualGearvalidinvalid =
    Vcusts01218_ActualgearvalidType_ActualGearvalidinvalid;
  static inline bool ActualgearvalidType_IsValid(int value) {
    return Vcusts01218_ActualgearvalidType_IsValid(value);
  }
  static constexpr ActualgearvalidType ActualgearvalidType_MIN =
    Vcusts01218_ActualgearvalidType_ActualgearvalidType_MIN;
  static constexpr ActualgearvalidType ActualgearvalidType_MAX =
    Vcusts01218_ActualgearvalidType_ActualgearvalidType_MAX;
  static constexpr int ActualgearvalidType_ARRAYSIZE =
    Vcusts01218_ActualgearvalidType_ActualgearvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActualgearvalidType_descriptor() {
    return Vcusts01218_ActualgearvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& ActualgearvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActualgearvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActualgearvalidType_Name.");
    return Vcusts01218_ActualgearvalidType_Name(enum_t_value);
  }
  static inline bool ActualgearvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActualgearvalidType* value) {
    return Vcusts01218_ActualgearvalidType_Parse(name, value);
  }

  typedef Vcusts01218_ActualgearType ActualgearType;
  static constexpr ActualgearType ActualGearnone =
    Vcusts01218_ActualgearType_ActualGearnone;
  static constexpr ActualgearType ActualGearD =
    Vcusts01218_ActualgearType_ActualGearD;
  static constexpr ActualgearType ActualGearR =
    Vcusts01218_ActualgearType_ActualGearR;
  static constexpr ActualgearType ActualGearN =
    Vcusts01218_ActualgearType_ActualGearN;
  static constexpr ActualgearType ActualGearP =
    Vcusts01218_ActualgearType_ActualGearP;
  static inline bool ActualgearType_IsValid(int value) {
    return Vcusts01218_ActualgearType_IsValid(value);
  }
  static constexpr ActualgearType ActualgearType_MIN =
    Vcusts01218_ActualgearType_ActualgearType_MIN;
  static constexpr ActualgearType ActualgearType_MAX =
    Vcusts01218_ActualgearType_ActualgearType_MAX;
  static constexpr int ActualgearType_ARRAYSIZE =
    Vcusts01218_ActualgearType_ActualgearType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ActualgearType_descriptor() {
    return Vcusts01218_ActualgearType_descriptor();
  }
  template<typename T>
  static inline const std::string& ActualgearType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActualgearType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActualgearType_Name.");
    return Vcusts01218_ActualgearType_Name(enum_t_value);
  }
  static inline bool ActualgearType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActualgearType* value) {
    return Vcusts01218_ActualgearType_Parse(name, value);
  }

  typedef Vcusts01218_VcuepfailType VcuepfailType;
  static constexpr VcuepfailType VcuEpfailInit =
    Vcusts01218_VcuepfailType_VcuEpfailInit;
  static constexpr VcuepfailType VcuEpfailNormal =
    Vcusts01218_VcuepfailType_VcuEpfailNormal;
  static constexpr VcuepfailType VcuEpfailFault =
    Vcusts01218_VcuepfailType_VcuEpfailFault;
  static inline bool VcuepfailType_IsValid(int value) {
    return Vcusts01218_VcuepfailType_IsValid(value);
  }
  static constexpr VcuepfailType VcuepfailType_MIN =
    Vcusts01218_VcuepfailType_VcuepfailType_MIN;
  static constexpr VcuepfailType VcuepfailType_MAX =
    Vcusts01218_VcuepfailType_VcuepfailType_MAX;
  static constexpr int VcuepfailType_ARRAYSIZE =
    Vcusts01218_VcuepfailType_VcuepfailType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VcuepfailType_descriptor() {
    return Vcusts01218_VcuepfailType_descriptor();
  }
  template<typename T>
  static inline const std::string& VcuepfailType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VcuepfailType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VcuepfailType_Name.");
    return Vcusts01218_VcuepfailType_Name(enum_t_value);
  }
  static inline bool VcuepfailType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VcuepfailType* value) {
    return Vcusts01218_VcuepfailType_Parse(name, value);
  }

  typedef Vcusts01218_VcumodindType VcumodindType;
  static constexpr VcumodindType VCUmodindAuto =
    Vcusts01218_VcumodindType_VCUmodindAuto;
  static constexpr VcumodindType VCUmodindEconomy =
    Vcusts01218_VcumodindType_VCUmodindEconomy;
  static constexpr VcumodindType VCUmodindComfort =
    Vcusts01218_VcumodindType_VCUmodindComfort;
  static constexpr VcumodindType VCUmodindSport =
    Vcusts01218_VcumodindType_VCUmodindSport;
  static constexpr VcumodindType VCUmodindReserved4 =
    Vcusts01218_VcumodindType_VCUmodindReserved4;
  static constexpr VcumodindType VCUmodindReserved5 =
    Vcusts01218_VcumodindType_VCUmodindReserved5;
  static constexpr VcumodindType VCUmodindReserved6 =
    Vcusts01218_VcumodindType_VCUmodindReserved6;
  static constexpr VcumodindType VCUmodindInvalid =
    Vcusts01218_VcumodindType_VCUmodindInvalid;
  static inline bool VcumodindType_IsValid(int value) {
    return Vcusts01218_VcumodindType_IsValid(value);
  }
  static constexpr VcumodindType VcumodindType_MIN =
    Vcusts01218_VcumodindType_VcumodindType_MIN;
  static constexpr VcumodindType VcumodindType_MAX =
    Vcusts01218_VcumodindType_VcumodindType_MAX;
  static constexpr int VcumodindType_ARRAYSIZE =
    Vcusts01218_VcumodindType_VcumodindType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VcumodindType_descriptor() {
    return Vcusts01218_VcumodindType_descriptor();
  }
  template<typename T>
  static inline const std::string& VcumodindType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VcumodindType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VcumodindType_Name.");
    return Vcusts01218_VcumodindType_Name(enum_t_value);
  }
  static inline bool VcumodindType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VcumodindType* value) {
    return Vcusts01218_VcumodindType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVcunbsstsFieldNumber = 1,
    kVcuvlcstsFieldNumber = 2,
    kVcullcstsFieldNumber = 3,
    kTaggearvalidFieldNumber = 4,
    kTaggearFieldNumber = 5,
    kActualgearvalidFieldNumber = 6,
    kActualgearFieldNumber = 7,
    kVcu17MsgcntrFieldNumber = 8,
    kVcu17CrcFieldNumber = 9,
    kVcuepfailFieldNumber = 10,
    kVcumodindFieldNumber = 11,
  };
  // optional .apollo.canbus.Vcusts01218.VcunbsstsType vcunbssts = 1;
  bool has_vcunbssts() const;
  private:
  bool _internal_has_vcunbssts() const;
  public:
  void clear_vcunbssts();
  ::apollo::canbus::Vcusts01218_VcunbsstsType vcunbssts() const;
  void set_vcunbssts(::apollo::canbus::Vcusts01218_VcunbsstsType value);
  private:
  ::apollo::canbus::Vcusts01218_VcunbsstsType _internal_vcunbssts() const;
  void _internal_set_vcunbssts(::apollo::canbus::Vcusts01218_VcunbsstsType value);
  public:

  // optional int32 vcuvlcsts = 2;
  bool has_vcuvlcsts() const;
  private:
  bool _internal_has_vcuvlcsts() const;
  public:
  void clear_vcuvlcsts();
  ::PROTOBUF_NAMESPACE_ID::int32 vcuvlcsts() const;
  void set_vcuvlcsts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vcuvlcsts() const;
  void _internal_set_vcuvlcsts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 vcullcsts = 3;
  bool has_vcullcsts() const;
  private:
  bool _internal_has_vcullcsts() const;
  public:
  void clear_vcullcsts();
  ::PROTOBUF_NAMESPACE_ID::int32 vcullcsts() const;
  void set_vcullcsts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vcullcsts() const;
  void _internal_set_vcullcsts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Vcusts01218.TaggearvalidType taggearvalid = 4;
  bool has_taggearvalid() const;
  private:
  bool _internal_has_taggearvalid() const;
  public:
  void clear_taggearvalid();
  ::apollo::canbus::Vcusts01218_TaggearvalidType taggearvalid() const;
  void set_taggearvalid(::apollo::canbus::Vcusts01218_TaggearvalidType value);
  private:
  ::apollo::canbus::Vcusts01218_TaggearvalidType _internal_taggearvalid() const;
  void _internal_set_taggearvalid(::apollo::canbus::Vcusts01218_TaggearvalidType value);
  public:

  // optional int32 taggear = 5;
  bool has_taggear() const;
  private:
  bool _internal_has_taggear() const;
  public:
  void clear_taggear();
  ::PROTOBUF_NAMESPACE_ID::int32 taggear() const;
  void set_taggear(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taggear() const;
  void _internal_set_taggear(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Vcusts01218.ActualgearvalidType actualgearvalid = 6;
  bool has_actualgearvalid() const;
  private:
  bool _internal_has_actualgearvalid() const;
  public:
  void clear_actualgearvalid();
  ::apollo::canbus::Vcusts01218_ActualgearvalidType actualgearvalid() const;
  void set_actualgearvalid(::apollo::canbus::Vcusts01218_ActualgearvalidType value);
  private:
  ::apollo::canbus::Vcusts01218_ActualgearvalidType _internal_actualgearvalid() const;
  void _internal_set_actualgearvalid(::apollo::canbus::Vcusts01218_ActualgearvalidType value);
  public:

  // optional .apollo.canbus.Vcusts01218.ActualgearType actualgear = 7;
  bool has_actualgear() const;
  private:
  bool _internal_has_actualgear() const;
  public:
  void clear_actualgear();
  ::apollo::canbus::Vcusts01218_ActualgearType actualgear() const;
  void set_actualgear(::apollo::canbus::Vcusts01218_ActualgearType value);
  private:
  ::apollo::canbus::Vcusts01218_ActualgearType _internal_actualgear() const;
  void _internal_set_actualgear(::apollo::canbus::Vcusts01218_ActualgearType value);
  public:

  // optional int32 vcu17msgcntr = 8;
  bool has_vcu17msgcntr() const;
  private:
  bool _internal_has_vcu17msgcntr() const;
  public:
  void clear_vcu17msgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 vcu17msgcntr() const;
  void set_vcu17msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vcu17msgcntr() const;
  void _internal_set_vcu17msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 vcu17crc = 9;
  bool has_vcu17crc() const;
  private:
  bool _internal_has_vcu17crc() const;
  public:
  void clear_vcu17crc();
  ::PROTOBUF_NAMESPACE_ID::int32 vcu17crc() const;
  void set_vcu17crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vcu17crc() const;
  void _internal_set_vcu17crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Vcusts01218.VcuepfailType vcuepfail = 10;
  bool has_vcuepfail() const;
  private:
  bool _internal_has_vcuepfail() const;
  public:
  void clear_vcuepfail();
  ::apollo::canbus::Vcusts01218_VcuepfailType vcuepfail() const;
  void set_vcuepfail(::apollo::canbus::Vcusts01218_VcuepfailType value);
  private:
  ::apollo::canbus::Vcusts01218_VcuepfailType _internal_vcuepfail() const;
  void _internal_set_vcuepfail(::apollo::canbus::Vcusts01218_VcuepfailType value);
  public:

  // optional .apollo.canbus.Vcusts01218.VcumodindType vcumodind = 11;
  bool has_vcumodind() const;
  private:
  bool _internal_has_vcumodind() const;
  public:
  void clear_vcumodind();
  ::apollo::canbus::Vcusts01218_VcumodindType vcumodind() const;
  void set_vcumodind(::apollo::canbus::Vcusts01218_VcumodindType value);
  private:
  ::apollo::canbus::Vcusts01218_VcumodindType _internal_vcumodind() const;
  void _internal_set_vcumodind(::apollo::canbus::Vcusts01218_VcumodindType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcusts01218)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int vcunbssts_;
  ::PROTOBUF_NAMESPACE_ID::int32 vcuvlcsts_;
  ::PROTOBUF_NAMESPACE_ID::int32 vcullcsts_;
  int taggearvalid_;
  ::PROTOBUF_NAMESPACE_ID::int32 taggear_;
  int actualgearvalid_;
  int actualgear_;
  ::PROTOBUF_NAMESPACE_ID::int32 vcu17msgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 vcu17crc_;
  int vcuepfail_;
  int vcumodind_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Vcusts0221c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vcusts0221c) */ {
 public:
  inline Vcusts0221c() : Vcusts0221c(nullptr) {}
  virtual ~Vcusts0221c();

  Vcusts0221c(const Vcusts0221c& from);
  Vcusts0221c(Vcusts0221c&& from) noexcept
    : Vcusts0221c() {
    *this = ::std::move(from);
  }

  inline Vcusts0221c& operator=(const Vcusts0221c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vcusts0221c& operator=(Vcusts0221c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vcusts0221c& default_instance();

  static inline const Vcusts0221c* internal_default_instance() {
    return reinterpret_cast<const Vcusts0221c*>(
               &_Vcusts0221c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vcusts0221c& a, Vcusts0221c& b) {
    a.Swap(&b);
  }
  inline void Swap(Vcusts0221c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vcusts0221c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vcusts0221c* New() const final {
    return CreateMaybeMessage<Vcusts0221c>(nullptr);
  }

  Vcusts0221c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vcusts0221c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vcusts0221c& from);
  void MergeFrom(const Vcusts0221c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vcusts0221c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vcusts0221c";
  }
  protected:
  explicit Vcusts0221c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vcusts0221c_AccpedelftravelvalidType AccpedelftravelvalidType;
  static constexpr AccpedelftravelvalidType Accpedelftravelvalidvalid =
    Vcusts0221c_AccpedelftravelvalidType_Accpedelftravelvalidvalid;
  static constexpr AccpedelftravelvalidType Accpedelftravelvalidinvalid =
    Vcusts0221c_AccpedelftravelvalidType_Accpedelftravelvalidinvalid;
  static inline bool AccpedelftravelvalidType_IsValid(int value) {
    return Vcusts0221c_AccpedelftravelvalidType_IsValid(value);
  }
  static constexpr AccpedelftravelvalidType AccpedelftravelvalidType_MIN =
    Vcusts0221c_AccpedelftravelvalidType_AccpedelftravelvalidType_MIN;
  static constexpr AccpedelftravelvalidType AccpedelftravelvalidType_MAX =
    Vcusts0221c_AccpedelftravelvalidType_AccpedelftravelvalidType_MAX;
  static constexpr int AccpedelftravelvalidType_ARRAYSIZE =
    Vcusts0221c_AccpedelftravelvalidType_AccpedelftravelvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccpedelftravelvalidType_descriptor() {
    return Vcusts0221c_AccpedelftravelvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccpedelftravelvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccpedelftravelvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccpedelftravelvalidType_Name.");
    return Vcusts0221c_AccpedelftravelvalidType_Name(enum_t_value);
  }
  static inline bool AccpedelftravelvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccpedelftravelvalidType* value) {
    return Vcusts0221c_AccpedelftravelvalidType_Parse(name, value);
  }

  typedef Vcusts0221c_AccpedacttravelvalidType AccpedacttravelvalidType;
  static constexpr AccpedacttravelvalidType Accpedacttravelvalidvalid =
    Vcusts0221c_AccpedacttravelvalidType_Accpedacttravelvalidvalid;
  static constexpr AccpedacttravelvalidType Accpedacttravelvalidinvalid =
    Vcusts0221c_AccpedacttravelvalidType_Accpedacttravelvalidinvalid;
  static inline bool AccpedacttravelvalidType_IsValid(int value) {
    return Vcusts0221c_AccpedacttravelvalidType_IsValid(value);
  }
  static constexpr AccpedacttravelvalidType AccpedacttravelvalidType_MIN =
    Vcusts0221c_AccpedacttravelvalidType_AccpedacttravelvalidType_MIN;
  static constexpr AccpedacttravelvalidType AccpedacttravelvalidType_MAX =
    Vcusts0221c_AccpedacttravelvalidType_AccpedacttravelvalidType_MAX;
  static constexpr int AccpedacttravelvalidType_ARRAYSIZE =
    Vcusts0221c_AccpedacttravelvalidType_AccpedacttravelvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccpedacttravelvalidType_descriptor() {
    return Vcusts0221c_AccpedacttravelvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccpedacttravelvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccpedacttravelvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccpedacttravelvalidType_Name.");
    return Vcusts0221c_AccpedacttravelvalidType_Name(enum_t_value);
  }
  static inline bool AccpedacttravelvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccpedacttravelvalidType* value) {
    return Vcusts0221c_AccpedacttravelvalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccpedelftravelFieldNumber = 2,
    kAccpedelftravelvalidFieldNumber = 1,
    kAccpedacttravelvalidFieldNumber = 3,
    kAccpedacttravelFieldNumber = 4,
    kVcu4MsgcntrFieldNumber = 5,
    kVcu4CrcFieldNumber = 6,
  };
  // optional double accpedelftravel = 2;
  bool has_accpedelftravel() const;
  private:
  bool _internal_has_accpedelftravel() const;
  public:
  void clear_accpedelftravel();
  double accpedelftravel() const;
  void set_accpedelftravel(double value);
  private:
  double _internal_accpedelftravel() const;
  void _internal_set_accpedelftravel(double value);
  public:

  // optional .apollo.canbus.Vcusts0221c.AccpedelftravelvalidType accpedelftravelvalid = 1;
  bool has_accpedelftravelvalid() const;
  private:
  bool _internal_has_accpedelftravelvalid() const;
  public:
  void clear_accpedelftravelvalid();
  ::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType accpedelftravelvalid() const;
  void set_accpedelftravelvalid(::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType value);
  private:
  ::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType _internal_accpedelftravelvalid() const;
  void _internal_set_accpedelftravelvalid(::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType value);
  public:

  // optional .apollo.canbus.Vcusts0221c.AccpedacttravelvalidType accpedacttravelvalid = 3;
  bool has_accpedacttravelvalid() const;
  private:
  bool _internal_has_accpedacttravelvalid() const;
  public:
  void clear_accpedacttravelvalid();
  ::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType accpedacttravelvalid() const;
  void set_accpedacttravelvalid(::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType value);
  private:
  ::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType _internal_accpedacttravelvalid() const;
  void _internal_set_accpedacttravelvalid(::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType value);
  public:

  // optional double accpedacttravel = 4;
  bool has_accpedacttravel() const;
  private:
  bool _internal_has_accpedacttravel() const;
  public:
  void clear_accpedacttravel();
  double accpedacttravel() const;
  void set_accpedacttravel(double value);
  private:
  double _internal_accpedacttravel() const;
  void _internal_set_accpedacttravel(double value);
  public:

  // optional int32 vcu4msgcntr = 5;
  bool has_vcu4msgcntr() const;
  private:
  bool _internal_has_vcu4msgcntr() const;
  public:
  void clear_vcu4msgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 vcu4msgcntr() const;
  void set_vcu4msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vcu4msgcntr() const;
  void _internal_set_vcu4msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 vcu4crc = 6;
  bool has_vcu4crc() const;
  private:
  bool _internal_has_vcu4crc() const;
  public:
  void clear_vcu4crc();
  ::PROTOBUF_NAMESPACE_ID::int32 vcu4crc() const;
  void set_vcu4crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vcu4crc() const;
  void _internal_set_vcu4crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vcusts0221c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double accpedelftravel_;
  int accpedelftravelvalid_;
  int accpedacttravelvalid_;
  double accpedacttravel_;
  ::PROTOBUF_NAMESPACE_ID::int32 vcu4msgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 vcu4crc_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Brkdrvstatus24c PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Brkdrvstatus24c) */ {
 public:
  inline Brkdrvstatus24c() : Brkdrvstatus24c(nullptr) {}
  virtual ~Brkdrvstatus24c();

  Brkdrvstatus24c(const Brkdrvstatus24c& from);
  Brkdrvstatus24c(Brkdrvstatus24c&& from) noexcept
    : Brkdrvstatus24c() {
    *this = ::std::move(from);
  }

  inline Brkdrvstatus24c& operator=(const Brkdrvstatus24c& from) {
    CopyFrom(from);
    return *this;
  }
  inline Brkdrvstatus24c& operator=(Brkdrvstatus24c&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Brkdrvstatus24c& default_instance();

  static inline const Brkdrvstatus24c* internal_default_instance() {
    return reinterpret_cast<const Brkdrvstatus24c*>(
               &_Brkdrvstatus24c_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Brkdrvstatus24c& a, Brkdrvstatus24c& b) {
    a.Swap(&b);
  }
  inline void Swap(Brkdrvstatus24c* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Brkdrvstatus24c* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Brkdrvstatus24c* New() const final {
    return CreateMaybeMessage<Brkdrvstatus24c>(nullptr);
  }

  Brkdrvstatus24c* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Brkdrvstatus24c>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Brkdrvstatus24c& from);
  void MergeFrom(const Brkdrvstatus24c& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Brkdrvstatus24c* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Brkdrvstatus24c";
  }
  protected:
  explicit Brkdrvstatus24c(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Brkdrvstatus24c_BrkpressurestsType BrkpressurestsType;
  static constexpr BrkpressurestsType BrkpressureStsNotInit =
    Brkdrvstatus24c_BrkpressurestsType_BrkpressureStsNotInit;
  static constexpr BrkpressurestsType BrkpressureStsnormal =
    Brkdrvstatus24c_BrkpressurestsType_BrkpressureStsnormal;
  static constexpr BrkpressurestsType BrkpressureStsfault =
    Brkdrvstatus24c_BrkpressurestsType_BrkpressureStsfault;
  static inline bool BrkpressurestsType_IsValid(int value) {
    return Brkdrvstatus24c_BrkpressurestsType_IsValid(value);
  }
  static constexpr BrkpressurestsType BrkpressurestsType_MIN =
    Brkdrvstatus24c_BrkpressurestsType_BrkpressurestsType_MIN;
  static constexpr BrkpressurestsType BrkpressurestsType_MAX =
    Brkdrvstatus24c_BrkpressurestsType_BrkpressurestsType_MAX;
  static constexpr int BrkpressurestsType_ARRAYSIZE =
    Brkdrvstatus24c_BrkpressurestsType_BrkpressurestsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BrkpressurestsType_descriptor() {
    return Brkdrvstatus24c_BrkpressurestsType_descriptor();
  }
  template<typename T>
  static inline const std::string& BrkpressurestsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BrkpressurestsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BrkpressurestsType_Name.");
    return Brkdrvstatus24c_BrkpressurestsType_Name(enum_t_value);
  }
  static inline bool BrkpressurestsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BrkpressurestsType* value) {
    return Brkdrvstatus24c_BrkpressurestsType_Parse(name, value);
  }

  typedef Brkdrvstatus24c_VehspdstsType VehspdstsType;
  static constexpr VehspdstsType Vehspdstsvalid =
    Brkdrvstatus24c_VehspdstsType_Vehspdstsvalid;
  static constexpr VehspdstsType Vehspdstsinvalid =
    Brkdrvstatus24c_VehspdstsType_Vehspdstsinvalid;
  static inline bool VehspdstsType_IsValid(int value) {
    return Brkdrvstatus24c_VehspdstsType_IsValid(value);
  }
  static constexpr VehspdstsType VehspdstsType_MIN =
    Brkdrvstatus24c_VehspdstsType_VehspdstsType_MIN;
  static constexpr VehspdstsType VehspdstsType_MAX =
    Brkdrvstatus24c_VehspdstsType_VehspdstsType_MAX;
  static constexpr int VehspdstsType_ARRAYSIZE =
    Brkdrvstatus24c_VehspdstsType_VehspdstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VehspdstsType_descriptor() {
    return Brkdrvstatus24c_VehspdstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& VehspdstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VehspdstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VehspdstsType_Name.");
    return Brkdrvstatus24c_VehspdstsType_Name(enum_t_value);
  }
  static inline bool VehspdstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VehspdstsType* value) {
    return Brkdrvstatus24c_VehspdstsType_Parse(name, value);
  }

  typedef Brkdrvstatus24c_VehspddirType VehspddirType;
  static constexpr VehspddirType Vehspddirstandstill =
    Brkdrvstatus24c_VehspddirType_Vehspddirstandstill;
  static constexpr VehspddirType Vehspddirforward =
    Brkdrvstatus24c_VehspddirType_Vehspddirforward;
  static constexpr VehspddirType Vehspddirbackward =
    Brkdrvstatus24c_VehspddirType_Vehspddirbackward;
  static constexpr VehspddirType Vehspddirreserved =
    Brkdrvstatus24c_VehspddirType_Vehspddirreserved;
  static inline bool VehspddirType_IsValid(int value) {
    return Brkdrvstatus24c_VehspddirType_IsValid(value);
  }
  static constexpr VehspddirType VehspddirType_MIN =
    Brkdrvstatus24c_VehspddirType_VehspddirType_MIN;
  static constexpr VehspddirType VehspddirType_MAX =
    Brkdrvstatus24c_VehspddirType_VehspddirType_MAX;
  static constexpr int VehspddirType_ARRAYSIZE =
    Brkdrvstatus24c_VehspddirType_VehspddirType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VehspddirType_descriptor() {
    return Brkdrvstatus24c_VehspddirType_descriptor();
  }
  template<typename T>
  static inline const std::string& VehspddirType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VehspddirType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VehspddirType_Name.");
    return Brkdrvstatus24c_VehspddirType_Name(enum_t_value);
  }
  static inline bool VehspddirType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VehspddirType* value) {
    return Brkdrvstatus24c_VehspddirType_Parse(name, value);
  }

  typedef Brkdrvstatus24c_EpbswstsType EpbswstsType;
  static constexpr EpbswstsType EPBswstsNotPressed =
    Brkdrvstatus24c_EpbswstsType_EPBswstsNotPressed;
  static constexpr EpbswstsType EPBswstspressed =
    Brkdrvstatus24c_EpbswstsType_EPBswstspressed;
  static constexpr EpbswstsType EPBswstsreserved =
    Brkdrvstatus24c_EpbswstsType_EPBswstsreserved;
  static constexpr EpbswstsType EPBswstsinvalid =
    Brkdrvstatus24c_EpbswstsType_EPBswstsinvalid;
  static inline bool EpbswstsType_IsValid(int value) {
    return Brkdrvstatus24c_EpbswstsType_IsValid(value);
  }
  static constexpr EpbswstsType EpbswstsType_MIN =
    Brkdrvstatus24c_EpbswstsType_EpbswstsType_MIN;
  static constexpr EpbswstsType EpbswstsType_MAX =
    Brkdrvstatus24c_EpbswstsType_EpbswstsType_MAX;
  static constexpr int EpbswstsType_ARRAYSIZE =
    Brkdrvstatus24c_EpbswstsType_EpbswstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpbswstsType_descriptor() {
    return Brkdrvstatus24c_EpbswstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpbswstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpbswstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpbswstsType_Name.");
    return Brkdrvstatus24c_EpbswstsType_Name(enum_t_value);
  }
  static inline bool EpbswstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpbswstsType* value) {
    return Brkdrvstatus24c_EpbswstsType_Parse(name, value);
  }

  typedef Brkdrvstatus24c_DrvstateType DrvstateType;
  static constexpr DrvstateType DrvStateParked =
    Brkdrvstatus24c_DrvstateType_DrvStateParked;
  static constexpr DrvstateType DrvStateReadyForDrving =
    Brkdrvstatus24c_DrvstateType_DrvStateReadyForDrving;
  static constexpr DrvstateType DrvStatedriving =
    Brkdrvstatus24c_DrvstateType_DrvStatedriving;
  static constexpr DrvstateType DrvStateinvalid =
    Brkdrvstatus24c_DrvstateType_DrvStateinvalid;
  static constexpr DrvstateType DrvStateInvalidOtherValuesReserved =
    Brkdrvstatus24c_DrvstateType_DrvStateInvalidOtherValuesReserved;
  static inline bool DrvstateType_IsValid(int value) {
    return Brkdrvstatus24c_DrvstateType_IsValid(value);
  }
  static constexpr DrvstateType DrvstateType_MIN =
    Brkdrvstatus24c_DrvstateType_DrvstateType_MIN;
  static constexpr DrvstateType DrvstateType_MAX =
    Brkdrvstatus24c_DrvstateType_DrvstateType_MAX;
  static constexpr int DrvstateType_ARRAYSIZE =
    Brkdrvstatus24c_DrvstateType_DrvstateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrvstateType_descriptor() {
    return Brkdrvstatus24c_DrvstateType_descriptor();
  }
  template<typename T>
  static inline const std::string& DrvstateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrvstateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrvstateType_Name.");
    return Brkdrvstatus24c_DrvstateType_Name(enum_t_value);
  }
  static inline bool DrvstateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrvstateType* value) {
    return Brkdrvstatus24c_DrvstateType_Parse(name, value);
  }

  typedef Brkdrvstatus24c_BrkpedlstsType BrkpedlstsType;
  static constexpr BrkpedlstsType BrkPedlStsNotPressed =
    Brkdrvstatus24c_BrkpedlstsType_BrkPedlStsNotPressed;
  static constexpr BrkpedlstsType BrkPedlStspressed =
    Brkdrvstatus24c_BrkpedlstsType_BrkPedlStspressed;
  static constexpr BrkpedlstsType BrkPedlStsreserved =
    Brkdrvstatus24c_BrkpedlstsType_BrkPedlStsreserved;
  static constexpr BrkpedlstsType BrkPedlStsinvalid =
    Brkdrvstatus24c_BrkpedlstsType_BrkPedlStsinvalid;
  static inline bool BrkpedlstsType_IsValid(int value) {
    return Brkdrvstatus24c_BrkpedlstsType_IsValid(value);
  }
  static constexpr BrkpedlstsType BrkpedlstsType_MIN =
    Brkdrvstatus24c_BrkpedlstsType_BrkpedlstsType_MIN;
  static constexpr BrkpedlstsType BrkpedlstsType_MAX =
    Brkdrvstatus24c_BrkpedlstsType_BrkpedlstsType_MAX;
  static constexpr int BrkpedlstsType_ARRAYSIZE =
    Brkdrvstatus24c_BrkpedlstsType_BrkpedlstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BrkpedlstsType_descriptor() {
    return Brkdrvstatus24c_BrkpedlstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& BrkpedlstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BrkpedlstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BrkpedlstsType_Name.");
    return Brkdrvstatus24c_BrkpedlstsType_Name(enum_t_value);
  }
  static inline bool BrkpedlstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BrkpedlstsType* value) {
    return Brkdrvstatus24c_BrkpedlstsType_Parse(name, value);
  }

  typedef Brkdrvstatus24c_BrklistsType BrklistsType;
  static constexpr BrklistsType BrkListsNoRequest =
    Brkdrvstatus24c_BrklistsType_BrkListsNoRequest;
  static constexpr BrklistsType BrkListsrequest =
    Brkdrvstatus24c_BrklistsType_BrkListsrequest;
  static constexpr BrklistsType BrkListsreserved =
    Brkdrvstatus24c_BrklistsType_BrkListsreserved;
  static constexpr BrklistsType BrkListsinvalid =
    Brkdrvstatus24c_BrklistsType_BrkListsinvalid;
  static inline bool BrklistsType_IsValid(int value) {
    return Brkdrvstatus24c_BrklistsType_IsValid(value);
  }
  static constexpr BrklistsType BrklistsType_MIN =
    Brkdrvstatus24c_BrklistsType_BrklistsType_MIN;
  static constexpr BrklistsType BrklistsType_MAX =
    Brkdrvstatus24c_BrklistsType_BrklistsType_MAX;
  static constexpr int BrklistsType_ARRAYSIZE =
    Brkdrvstatus24c_BrklistsType_BrklistsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BrklistsType_descriptor() {
    return Brkdrvstatus24c_BrklistsType_descriptor();
  }
  template<typename T>
  static inline const std::string& BrklistsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BrklistsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BrklistsType_Name.");
    return Brkdrvstatus24c_BrklistsType_Name(enum_t_value);
  }
  static inline bool BrklistsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BrklistsType* value) {
    return Brkdrvstatus24c_BrklistsType_Parse(name, value);
  }

  typedef Brkdrvstatus24c_EpbfaillampType EpbfaillampType;
  static constexpr EpbfaillampType EPBfaillampoff =
    Brkdrvstatus24c_EpbfaillampType_EPBfaillampoff;
  static constexpr EpbfaillampType EPBfaillampon =
    Brkdrvstatus24c_EpbfaillampType_EPBfaillampon;
  static constexpr EpbfaillampType EPBfaillampblinking =
    Brkdrvstatus24c_EpbfaillampType_EPBfaillampblinking;
  static constexpr EpbfaillampType EPBfaillampinvalid =
    Brkdrvstatus24c_EpbfaillampType_EPBfaillampinvalid;
  static inline bool EpbfaillampType_IsValid(int value) {
    return Brkdrvstatus24c_EpbfaillampType_IsValid(value);
  }
  static constexpr EpbfaillampType EpbfaillampType_MIN =
    Brkdrvstatus24c_EpbfaillampType_EpbfaillampType_MIN;
  static constexpr EpbfaillampType EpbfaillampType_MAX =
    Brkdrvstatus24c_EpbfaillampType_EpbfaillampType_MAX;
  static constexpr int EpbfaillampType_ARRAYSIZE =
    Brkdrvstatus24c_EpbfaillampType_EpbfaillampType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpbfaillampType_descriptor() {
    return Brkdrvstatus24c_EpbfaillampType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpbfaillampType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpbfaillampType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpbfaillampType_Name.");
    return Brkdrvstatus24c_EpbfaillampType_Name(enum_t_value);
  }
  static inline bool EpbfaillampType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpbfaillampType* value) {
    return Brkdrvstatus24c_EpbfaillampType_Parse(name, value);
  }

  typedef Brkdrvstatus24c_EpbwarnlampType EpbwarnlampType;
  static constexpr EpbwarnlampType EPBwarnlampOnlyReadyDuringFunction =
    Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampOnlyReadyDuringFunction;
  static constexpr EpbwarnlampType EPBwarnlampDoorOpenDuringAuto =
    Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampDoorOpenDuringAuto;
  static constexpr EpbwarnlampType EPBwarnlampSeatBeltUnbuckled =
    Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampSeatBeltUnbuckled;
  static constexpr EpbwarnlampType EPBwarnlampDoorOpenAndBeltUnbuckled =
    Brkdrvstatus24c_EpbwarnlampType_EPBwarnlampDoorOpenAndBeltUnbuckled;
  static inline bool EpbwarnlampType_IsValid(int value) {
    return Brkdrvstatus24c_EpbwarnlampType_IsValid(value);
  }
  static constexpr EpbwarnlampType EpbwarnlampType_MIN =
    Brkdrvstatus24c_EpbwarnlampType_EpbwarnlampType_MIN;
  static constexpr EpbwarnlampType EpbwarnlampType_MAX =
    Brkdrvstatus24c_EpbwarnlampType_EpbwarnlampType_MAX;
  static constexpr int EpbwarnlampType_ARRAYSIZE =
    Brkdrvstatus24c_EpbwarnlampType_EpbwarnlampType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpbwarnlampType_descriptor() {
    return Brkdrvstatus24c_EpbwarnlampType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpbwarnlampType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpbwarnlampType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpbwarnlampType_Name.");
    return Brkdrvstatus24c_EpbwarnlampType_Name(enum_t_value);
  }
  static inline bool EpbwarnlampType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpbwarnlampType* value) {
    return Brkdrvstatus24c_EpbwarnlampType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrkmsgcntrFieldNumber = 1,
    kBrkpressurestsFieldNumber = 2,
    kBrkpressureFieldNumber = 3,
    kLongaccvalueFieldNumber = 4,
    kVehspdstsFieldNumber = 5,
    kVehspddirFieldNumber = 6,
    kVehspdFieldNumber = 7,
    kEpbswstsFieldNumber = 8,
    kDrvstateFieldNumber = 9,
    kBrkpedlstsFieldNumber = 10,
    kBrklistsFieldNumber = 11,
    kEpbfaillampFieldNumber = 12,
    kEpbwarnlampFieldNumber = 13,
  };
  // optional int32 brkmsgcntr = 1;
  bool has_brkmsgcntr() const;
  private:
  bool _internal_has_brkmsgcntr() const;
  public:
  void clear_brkmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 brkmsgcntr() const;
  void set_brkmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brkmsgcntr() const;
  void _internal_set_brkmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.BrkpressurestsType brkpressurests = 2;
  bool has_brkpressurests() const;
  private:
  bool _internal_has_brkpressurests() const;
  public:
  void clear_brkpressurests();
  ::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType brkpressurests() const;
  void set_brkpressurests(::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType _internal_brkpressurests() const;
  void _internal_set_brkpressurests(::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType value);
  public:

  // optional double brkpressure = 3;
  bool has_brkpressure() const;
  private:
  bool _internal_has_brkpressure() const;
  public:
  void clear_brkpressure();
  double brkpressure() const;
  void set_brkpressure(double value);
  private:
  double _internal_brkpressure() const;
  void _internal_set_brkpressure(double value);
  public:

  // optional double longaccvalue = 4;
  bool has_longaccvalue() const;
  private:
  bool _internal_has_longaccvalue() const;
  public:
  void clear_longaccvalue();
  double longaccvalue() const;
  void set_longaccvalue(double value);
  private:
  double _internal_longaccvalue() const;
  void _internal_set_longaccvalue(double value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.VehspdstsType vehspdsts = 5;
  bool has_vehspdsts() const;
  private:
  bool _internal_has_vehspdsts() const;
  public:
  void clear_vehspdsts();
  ::apollo::canbus::Brkdrvstatus24c_VehspdstsType vehspdsts() const;
  void set_vehspdsts(::apollo::canbus::Brkdrvstatus24c_VehspdstsType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_VehspdstsType _internal_vehspdsts() const;
  void _internal_set_vehspdsts(::apollo::canbus::Brkdrvstatus24c_VehspdstsType value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.VehspddirType vehspddir = 6;
  bool has_vehspddir() const;
  private:
  bool _internal_has_vehspddir() const;
  public:
  void clear_vehspddir();
  ::apollo::canbus::Brkdrvstatus24c_VehspddirType vehspddir() const;
  void set_vehspddir(::apollo::canbus::Brkdrvstatus24c_VehspddirType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_VehspddirType _internal_vehspddir() const;
  void _internal_set_vehspddir(::apollo::canbus::Brkdrvstatus24c_VehspddirType value);
  public:

  // optional int32 vehspd = 7;
  bool has_vehspd() const;
  private:
  bool _internal_has_vehspd() const;
  public:
  void clear_vehspd();
  ::PROTOBUF_NAMESPACE_ID::int32 vehspd() const;
  void set_vehspd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehspd() const;
  void _internal_set_vehspd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.EpbswstsType epbswsts = 8;
  bool has_epbswsts() const;
  private:
  bool _internal_has_epbswsts() const;
  public:
  void clear_epbswsts();
  ::apollo::canbus::Brkdrvstatus24c_EpbswstsType epbswsts() const;
  void set_epbswsts(::apollo::canbus::Brkdrvstatus24c_EpbswstsType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_EpbswstsType _internal_epbswsts() const;
  void _internal_set_epbswsts(::apollo::canbus::Brkdrvstatus24c_EpbswstsType value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.DrvstateType drvstate = 9;
  bool has_drvstate() const;
  private:
  bool _internal_has_drvstate() const;
  public:
  void clear_drvstate();
  ::apollo::canbus::Brkdrvstatus24c_DrvstateType drvstate() const;
  void set_drvstate(::apollo::canbus::Brkdrvstatus24c_DrvstateType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_DrvstateType _internal_drvstate() const;
  void _internal_set_drvstate(::apollo::canbus::Brkdrvstatus24c_DrvstateType value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.BrkpedlstsType brkpedlsts = 10;
  bool has_brkpedlsts() const;
  private:
  bool _internal_has_brkpedlsts() const;
  public:
  void clear_brkpedlsts();
  ::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType brkpedlsts() const;
  void set_brkpedlsts(::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType _internal_brkpedlsts() const;
  void _internal_set_brkpedlsts(::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.BrklistsType brklists = 11;
  bool has_brklists() const;
  private:
  bool _internal_has_brklists() const;
  public:
  void clear_brklists();
  ::apollo::canbus::Brkdrvstatus24c_BrklistsType brklists() const;
  void set_brklists(::apollo::canbus::Brkdrvstatus24c_BrklistsType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_BrklistsType _internal_brklists() const;
  void _internal_set_brklists(::apollo::canbus::Brkdrvstatus24c_BrklistsType value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.EpbfaillampType epbfaillamp = 12;
  bool has_epbfaillamp() const;
  private:
  bool _internal_has_epbfaillamp() const;
  public:
  void clear_epbfaillamp();
  ::apollo::canbus::Brkdrvstatus24c_EpbfaillampType epbfaillamp() const;
  void set_epbfaillamp(::apollo::canbus::Brkdrvstatus24c_EpbfaillampType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_EpbfaillampType _internal_epbfaillamp() const;
  void _internal_set_epbfaillamp(::apollo::canbus::Brkdrvstatus24c_EpbfaillampType value);
  public:

  // optional .apollo.canbus.Brkdrvstatus24c.EpbwarnlampType epbwarnlamp = 13;
  bool has_epbwarnlamp() const;
  private:
  bool _internal_has_epbwarnlamp() const;
  public:
  void clear_epbwarnlamp();
  ::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType epbwarnlamp() const;
  void set_epbwarnlamp(::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType value);
  private:
  ::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType _internal_epbwarnlamp() const;
  void _internal_set_epbwarnlamp(::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Brkdrvstatus24c)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 brkmsgcntr_;
  int brkpressurests_;
  double brkpressure_;
  double longaccvalue_;
  int vehspdsts_;
  int vehspddir_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehspd_;
  int epbswsts_;
  int drvstate_;
  int brkpedlsts_;
  int brklists_;
  int epbfaillamp_;
  int epbwarnlamp_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Bodystatus24d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Bodystatus24d) */ {
 public:
  inline Bodystatus24d() : Bodystatus24d(nullptr) {}
  virtual ~Bodystatus24d();

  Bodystatus24d(const Bodystatus24d& from);
  Bodystatus24d(Bodystatus24d&& from) noexcept
    : Bodystatus24d() {
    *this = ::std::move(from);
  }

  inline Bodystatus24d& operator=(const Bodystatus24d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bodystatus24d& operator=(Bodystatus24d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bodystatus24d& default_instance();

  static inline const Bodystatus24d* internal_default_instance() {
    return reinterpret_cast<const Bodystatus24d*>(
               &_Bodystatus24d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Bodystatus24d& a, Bodystatus24d& b) {
    a.Swap(&b);
  }
  inline void Swap(Bodystatus24d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bodystatus24d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bodystatus24d* New() const final {
    return CreateMaybeMessage<Bodystatus24d>(nullptr);
  }

  Bodystatus24d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bodystatus24d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bodystatus24d& from);
  void MergeFrom(const Bodystatus24d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bodystatus24d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Bodystatus24d";
  }
  protected:
  explicit Bodystatus24d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bodystatus24d_DoorajarfrntlestsType DoorajarfrntlestsType;
  static constexpr DoorajarfrntlestsType DoorAjarFrntLeStsOpened =
    Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsOpened;
  static constexpr DoorajarfrntlestsType DoorAjarFrntLeStsClosed =
    Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsClosed;
  static constexpr DoorajarfrntlestsType DoorAjarFrntLeStsReserved =
    Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsReserved;
  static constexpr DoorajarfrntlestsType DoorAjarFrntLeStsInvalid =
    Bodystatus24d_DoorajarfrntlestsType_DoorAjarFrntLeStsInvalid;
  static inline bool DoorajarfrntlestsType_IsValid(int value) {
    return Bodystatus24d_DoorajarfrntlestsType_IsValid(value);
  }
  static constexpr DoorajarfrntlestsType DoorajarfrntlestsType_MIN =
    Bodystatus24d_DoorajarfrntlestsType_DoorajarfrntlestsType_MIN;
  static constexpr DoorajarfrntlestsType DoorajarfrntlestsType_MAX =
    Bodystatus24d_DoorajarfrntlestsType_DoorajarfrntlestsType_MAX;
  static constexpr int DoorajarfrntlestsType_ARRAYSIZE =
    Bodystatus24d_DoorajarfrntlestsType_DoorajarfrntlestsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DoorajarfrntlestsType_descriptor() {
    return Bodystatus24d_DoorajarfrntlestsType_descriptor();
  }
  template<typename T>
  static inline const std::string& DoorajarfrntlestsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DoorajarfrntlestsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DoorajarfrntlestsType_Name.");
    return Bodystatus24d_DoorajarfrntlestsType_Name(enum_t_value);
  }
  static inline bool DoorajarfrntlestsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DoorajarfrntlestsType* value) {
    return Bodystatus24d_DoorajarfrntlestsType_Parse(name, value);
  }

  typedef Bodystatus24d_DoorajarfrntristsType DoorajarfrntristsType;
  static constexpr DoorajarfrntristsType DoorAjarFrntRiStsOpened =
    Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsOpened;
  static constexpr DoorajarfrntristsType DoorAjarFrntRiStsClosed =
    Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsClosed;
  static constexpr DoorajarfrntristsType DoorAjarFrntRiStsReserved =
    Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsReserved;
  static constexpr DoorajarfrntristsType DoorAjarFrntRiStsInvalid =
    Bodystatus24d_DoorajarfrntristsType_DoorAjarFrntRiStsInvalid;
  static inline bool DoorajarfrntristsType_IsValid(int value) {
    return Bodystatus24d_DoorajarfrntristsType_IsValid(value);
  }
  static constexpr DoorajarfrntristsType DoorajarfrntristsType_MIN =
    Bodystatus24d_DoorajarfrntristsType_DoorajarfrntristsType_MIN;
  static constexpr DoorajarfrntristsType DoorajarfrntristsType_MAX =
    Bodystatus24d_DoorajarfrntristsType_DoorajarfrntristsType_MAX;
  static constexpr int DoorajarfrntristsType_ARRAYSIZE =
    Bodystatus24d_DoorajarfrntristsType_DoorajarfrntristsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DoorajarfrntristsType_descriptor() {
    return Bodystatus24d_DoorajarfrntristsType_descriptor();
  }
  template<typename T>
  static inline const std::string& DoorajarfrntristsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DoorajarfrntristsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DoorajarfrntristsType_Name.");
    return Bodystatus24d_DoorajarfrntristsType_Name(enum_t_value);
  }
  static inline bool DoorajarfrntristsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DoorajarfrntristsType* value) {
    return Bodystatus24d_DoorajarfrntristsType_Parse(name, value);
  }

  typedef Bodystatus24d_DoorajarrelestsType DoorajarrelestsType;
  static constexpr DoorajarrelestsType DoorAjarReLeStsOpened =
    Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsOpened;
  static constexpr DoorajarrelestsType DoorAjarReLeStsClosed =
    Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsClosed;
  static constexpr DoorajarrelestsType DoorAjarReLeStsReserved =
    Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsReserved;
  static constexpr DoorajarrelestsType DoorAjarReLeStsInvalid =
    Bodystatus24d_DoorajarrelestsType_DoorAjarReLeStsInvalid;
  static inline bool DoorajarrelestsType_IsValid(int value) {
    return Bodystatus24d_DoorajarrelestsType_IsValid(value);
  }
  static constexpr DoorajarrelestsType DoorajarrelestsType_MIN =
    Bodystatus24d_DoorajarrelestsType_DoorajarrelestsType_MIN;
  static constexpr DoorajarrelestsType DoorajarrelestsType_MAX =
    Bodystatus24d_DoorajarrelestsType_DoorajarrelestsType_MAX;
  static constexpr int DoorajarrelestsType_ARRAYSIZE =
    Bodystatus24d_DoorajarrelestsType_DoorajarrelestsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DoorajarrelestsType_descriptor() {
    return Bodystatus24d_DoorajarrelestsType_descriptor();
  }
  template<typename T>
  static inline const std::string& DoorajarrelestsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DoorajarrelestsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DoorajarrelestsType_Name.");
    return Bodystatus24d_DoorajarrelestsType_Name(enum_t_value);
  }
  static inline bool DoorajarrelestsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DoorajarrelestsType* value) {
    return Bodystatus24d_DoorajarrelestsType_Parse(name, value);
  }

  typedef Bodystatus24d_SeatoccpfrntlefailType SeatoccpfrntlefailType;
  static constexpr SeatoccpfrntlefailType SeatOccpFrntLeFailNoFailure =
    Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailNoFailure;
  static constexpr SeatoccpfrntlefailType SeatOccpFrntLeFailFailure =
    Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailFailure;
  static constexpr SeatoccpfrntlefailType SeatOccpFrntLeFailReserved =
    Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailReserved;
  static constexpr SeatoccpfrntlefailType SeatOccpFrntLeFailInvalid =
    Bodystatus24d_SeatoccpfrntlefailType_SeatOccpFrntLeFailInvalid;
  static inline bool SeatoccpfrntlefailType_IsValid(int value) {
    return Bodystatus24d_SeatoccpfrntlefailType_IsValid(value);
  }
  static constexpr SeatoccpfrntlefailType SeatoccpfrntlefailType_MIN =
    Bodystatus24d_SeatoccpfrntlefailType_SeatoccpfrntlefailType_MIN;
  static constexpr SeatoccpfrntlefailType SeatoccpfrntlefailType_MAX =
    Bodystatus24d_SeatoccpfrntlefailType_SeatoccpfrntlefailType_MAX;
  static constexpr int SeatoccpfrntlefailType_ARRAYSIZE =
    Bodystatus24d_SeatoccpfrntlefailType_SeatoccpfrntlefailType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeatoccpfrntlefailType_descriptor() {
    return Bodystatus24d_SeatoccpfrntlefailType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeatoccpfrntlefailType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeatoccpfrntlefailType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeatoccpfrntlefailType_Name.");
    return Bodystatus24d_SeatoccpfrntlefailType_Name(enum_t_value);
  }
  static inline bool SeatoccpfrntlefailType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeatoccpfrntlefailType* value) {
    return Bodystatus24d_SeatoccpfrntlefailType_Parse(name, value);
  }

  typedef Bodystatus24d_SteerwhlheatstsType SteerwhlheatstsType;
  static constexpr SteerwhlheatstsType SteerWhlHeatStsHeaterOff =
    Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsHeaterOff;
  static constexpr SteerwhlheatstsType SteerWhlHeatStsHeaterOn =
    Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsHeaterOn;
  static constexpr SteerwhlheatstsType SteerWhlHeatStsReserved =
    Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsReserved;
  static constexpr SteerwhlheatstsType SteerWhlHeatStsInvalid =
    Bodystatus24d_SteerwhlheatstsType_SteerWhlHeatStsInvalid;
  static inline bool SteerwhlheatstsType_IsValid(int value) {
    return Bodystatus24d_SteerwhlheatstsType_IsValid(value);
  }
  static constexpr SteerwhlheatstsType SteerwhlheatstsType_MIN =
    Bodystatus24d_SteerwhlheatstsType_SteerwhlheatstsType_MIN;
  static constexpr SteerwhlheatstsType SteerwhlheatstsType_MAX =
    Bodystatus24d_SteerwhlheatstsType_SteerwhlheatstsType_MAX;
  static constexpr int SteerwhlheatstsType_ARRAYSIZE =
    Bodystatus24d_SteerwhlheatstsType_SteerwhlheatstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SteerwhlheatstsType_descriptor() {
    return Bodystatus24d_SteerwhlheatstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SteerwhlheatstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SteerwhlheatstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SteerwhlheatstsType_Name.");
    return Bodystatus24d_SteerwhlheatstsType_Name(enum_t_value);
  }
  static inline bool SteerwhlheatstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SteerwhlheatstsType* value) {
    return Bodystatus24d_SteerwhlheatstsType_Parse(name, value);
  }

  typedef Bodystatus24d_TrajarstsType TrajarstsType;
  static constexpr TrajarstsType TrAjarStsOpened =
    Bodystatus24d_TrajarstsType_TrAjarStsOpened;
  static constexpr TrajarstsType TrAjarStsClosed =
    Bodystatus24d_TrajarstsType_TrAjarStsClosed;
  static constexpr TrajarstsType TrAjarStsReserved =
    Bodystatus24d_TrajarstsType_TrAjarStsReserved;
  static constexpr TrajarstsType TrAjarStsInvalid =
    Bodystatus24d_TrajarstsType_TrAjarStsInvalid;
  static inline bool TrajarstsType_IsValid(int value) {
    return Bodystatus24d_TrajarstsType_IsValid(value);
  }
  static constexpr TrajarstsType TrajarstsType_MIN =
    Bodystatus24d_TrajarstsType_TrajarstsType_MIN;
  static constexpr TrajarstsType TrajarstsType_MAX =
    Bodystatus24d_TrajarstsType_TrajarstsType_MAX;
  static constexpr int TrajarstsType_ARRAYSIZE =
    Bodystatus24d_TrajarstsType_TrajarstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrajarstsType_descriptor() {
    return Bodystatus24d_TrajarstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& TrajarstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrajarstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrajarstsType_Name.");
    return Bodystatus24d_TrajarstsType_Name(enum_t_value);
  }
  static inline bool TrajarstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrajarstsType* value) {
    return Bodystatus24d_TrajarstsType_Parse(name, value);
  }

  typedef Bodystatus24d_HoodajarstsType HoodajarstsType;
  static constexpr HoodajarstsType HoodAjarStsOpened =
    Bodystatus24d_HoodajarstsType_HoodAjarStsOpened;
  static constexpr HoodajarstsType HoodAjarStsClosed =
    Bodystatus24d_HoodajarstsType_HoodAjarStsClosed;
  static constexpr HoodajarstsType HoodAjarStsReserved =
    Bodystatus24d_HoodajarstsType_HoodAjarStsReserved;
  static constexpr HoodajarstsType HoodAjarStsInvalid =
    Bodystatus24d_HoodajarstsType_HoodAjarStsInvalid;
  static inline bool HoodajarstsType_IsValid(int value) {
    return Bodystatus24d_HoodajarstsType_IsValid(value);
  }
  static constexpr HoodajarstsType HoodajarstsType_MIN =
    Bodystatus24d_HoodajarstsType_HoodajarstsType_MIN;
  static constexpr HoodajarstsType HoodajarstsType_MAX =
    Bodystatus24d_HoodajarstsType_HoodajarstsType_MAX;
  static constexpr int HoodajarstsType_ARRAYSIZE =
    Bodystatus24d_HoodajarstsType_HoodajarstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HoodajarstsType_descriptor() {
    return Bodystatus24d_HoodajarstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& HoodajarstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HoodajarstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HoodajarstsType_Name.");
    return Bodystatus24d_HoodajarstsType_Name(enum_t_value);
  }
  static inline bool HoodajarstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HoodajarstsType* value) {
    return Bodystatus24d_HoodajarstsType_Parse(name, value);
  }

  typedef Bodystatus24d_DoorajarreristsType DoorajarreristsType;
  static constexpr DoorajarreristsType DoorAjarReRiStsOpened =
    Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsOpened;
  static constexpr DoorajarreristsType DoorAjarReRiStsClosed =
    Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsClosed;
  static constexpr DoorajarreristsType DoorAjarReRiStsReserved =
    Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsReserved;
  static constexpr DoorajarreristsType DoorAjarReRiStsInvalid =
    Bodystatus24d_DoorajarreristsType_DoorAjarReRiStsInvalid;
  static inline bool DoorajarreristsType_IsValid(int value) {
    return Bodystatus24d_DoorajarreristsType_IsValid(value);
  }
  static constexpr DoorajarreristsType DoorajarreristsType_MIN =
    Bodystatus24d_DoorajarreristsType_DoorajarreristsType_MIN;
  static constexpr DoorajarreristsType DoorajarreristsType_MAX =
    Bodystatus24d_DoorajarreristsType_DoorajarreristsType_MAX;
  static constexpr int DoorajarreristsType_ARRAYSIZE =
    Bodystatus24d_DoorajarreristsType_DoorajarreristsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DoorajarreristsType_descriptor() {
    return Bodystatus24d_DoorajarreristsType_descriptor();
  }
  template<typename T>
  static inline const std::string& DoorajarreristsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DoorajarreristsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DoorajarreristsType_Name.");
    return Bodystatus24d_DoorajarreristsType_Name(enum_t_value);
  }
  static inline bool DoorajarreristsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DoorajarreristsType* value) {
    return Bodystatus24d_DoorajarreristsType_Parse(name, value);
  }

  typedef Bodystatus24d_SeatoccpfrntlestsType SeatoccpfrntlestsType;
  static constexpr SeatoccpfrntlestsType SeatOccpFrntLeStsNoOccupant =
    Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsNoOccupant;
  static constexpr SeatoccpfrntlestsType SeatOccpFrntLeStsOccupant =
    Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsOccupant;
  static constexpr SeatoccpfrntlestsType SeatOccpFrntLeStsReserved =
    Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsReserved;
  static constexpr SeatoccpfrntlestsType SeatOccpFrntLeStsInvalid =
    Bodystatus24d_SeatoccpfrntlestsType_SeatOccpFrntLeStsInvalid;
  static inline bool SeatoccpfrntlestsType_IsValid(int value) {
    return Bodystatus24d_SeatoccpfrntlestsType_IsValid(value);
  }
  static constexpr SeatoccpfrntlestsType SeatoccpfrntlestsType_MIN =
    Bodystatus24d_SeatoccpfrntlestsType_SeatoccpfrntlestsType_MIN;
  static constexpr SeatoccpfrntlestsType SeatoccpfrntlestsType_MAX =
    Bodystatus24d_SeatoccpfrntlestsType_SeatoccpfrntlestsType_MAX;
  static constexpr int SeatoccpfrntlestsType_ARRAYSIZE =
    Bodystatus24d_SeatoccpfrntlestsType_SeatoccpfrntlestsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeatoccpfrntlestsType_descriptor() {
    return Bodystatus24d_SeatoccpfrntlestsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeatoccpfrntlestsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeatoccpfrntlestsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeatoccpfrntlestsType_Name.");
    return Bodystatus24d_SeatoccpfrntlestsType_Name(enum_t_value);
  }
  static inline bool SeatoccpfrntlestsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeatoccpfrntlestsType* value) {
    return Bodystatus24d_SeatoccpfrntlestsType_Parse(name, value);
  }

  typedef Bodystatus24d_CooltlvllowwarnreqType CooltlvllowwarnreqType;
  static constexpr CooltlvllowwarnreqType CooltLvlLowWarnReqNoRequest =
    Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqNoRequest;
  static constexpr CooltlvllowwarnreqType CooltLvlLowWarnReqRequest =
    Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqRequest;
  static constexpr CooltlvllowwarnreqType CooltLvlLowWarnReqReserved =
    Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqReserved;
  static constexpr CooltlvllowwarnreqType CooltLvlLowWarnReqInvalid =
    Bodystatus24d_CooltlvllowwarnreqType_CooltLvlLowWarnReqInvalid;
  static inline bool CooltlvllowwarnreqType_IsValid(int value) {
    return Bodystatus24d_CooltlvllowwarnreqType_IsValid(value);
  }
  static constexpr CooltlvllowwarnreqType CooltlvllowwarnreqType_MIN =
    Bodystatus24d_CooltlvllowwarnreqType_CooltlvllowwarnreqType_MIN;
  static constexpr CooltlvllowwarnreqType CooltlvllowwarnreqType_MAX =
    Bodystatus24d_CooltlvllowwarnreqType_CooltlvllowwarnreqType_MAX;
  static constexpr int CooltlvllowwarnreqType_ARRAYSIZE =
    Bodystatus24d_CooltlvllowwarnreqType_CooltlvllowwarnreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CooltlvllowwarnreqType_descriptor() {
    return Bodystatus24d_CooltlvllowwarnreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& CooltlvllowwarnreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CooltlvllowwarnreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CooltlvllowwarnreqType_Name.");
    return Bodystatus24d_CooltlvllowwarnreqType_Name(enum_t_value);
  }
  static inline bool CooltlvllowwarnreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CooltlvllowwarnreqType* value) {
    return Bodystatus24d_CooltlvllowwarnreqType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDoorajarfrntlestsFieldNumber = 1,
    kDoorajarfrntristsFieldNumber = 2,
    kDoorajarrelestsFieldNumber = 3,
    kBcmclosurecrcFieldNumber = 4,
    kSeatoccpfrntlefailFieldNumber = 5,
    kSteerwhlheatstsFieldNumber = 6,
    kBcmclosuremsgcntrFieldNumber = 7,
    kTrajarstsFieldNumber = 8,
    kHoodajarstsFieldNumber = 9,
    kDoorajarreristsFieldNumber = 10,
    kSeatoccpfrntlestsFieldNumber = 11,
    kCooltlvllowwarnreqFieldNumber = 12,
    kVehspdFieldNumber = 13,
  };
  // optional .apollo.canbus.Bodystatus24d.DoorajarfrntlestsType doorajarfrntlests = 1;
  bool has_doorajarfrntlests() const;
  private:
  bool _internal_has_doorajarfrntlests() const;
  public:
  void clear_doorajarfrntlests();
  ::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType doorajarfrntlests() const;
  void set_doorajarfrntlests(::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType value);
  private:
  ::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType _internal_doorajarfrntlests() const;
  void _internal_set_doorajarfrntlests(::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType value);
  public:

  // optional .apollo.canbus.Bodystatus24d.DoorajarfrntristsType doorajarfrntrists = 2;
  bool has_doorajarfrntrists() const;
  private:
  bool _internal_has_doorajarfrntrists() const;
  public:
  void clear_doorajarfrntrists();
  ::apollo::canbus::Bodystatus24d_DoorajarfrntristsType doorajarfrntrists() const;
  void set_doorajarfrntrists(::apollo::canbus::Bodystatus24d_DoorajarfrntristsType value);
  private:
  ::apollo::canbus::Bodystatus24d_DoorajarfrntristsType _internal_doorajarfrntrists() const;
  void _internal_set_doorajarfrntrists(::apollo::canbus::Bodystatus24d_DoorajarfrntristsType value);
  public:

  // optional .apollo.canbus.Bodystatus24d.DoorajarrelestsType doorajarrelests = 3;
  bool has_doorajarrelests() const;
  private:
  bool _internal_has_doorajarrelests() const;
  public:
  void clear_doorajarrelests();
  ::apollo::canbus::Bodystatus24d_DoorajarrelestsType doorajarrelests() const;
  void set_doorajarrelests(::apollo::canbus::Bodystatus24d_DoorajarrelestsType value);
  private:
  ::apollo::canbus::Bodystatus24d_DoorajarrelestsType _internal_doorajarrelests() const;
  void _internal_set_doorajarrelests(::apollo::canbus::Bodystatus24d_DoorajarrelestsType value);
  public:

  // optional int32 bcmclosurecrc = 4;
  bool has_bcmclosurecrc() const;
  private:
  bool _internal_has_bcmclosurecrc() const;
  public:
  void clear_bcmclosurecrc();
  ::PROTOBUF_NAMESPACE_ID::int32 bcmclosurecrc() const;
  void set_bcmclosurecrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bcmclosurecrc() const;
  void _internal_set_bcmclosurecrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Bodystatus24d.SeatoccpfrntlefailType seatoccpfrntlefail = 5;
  bool has_seatoccpfrntlefail() const;
  private:
  bool _internal_has_seatoccpfrntlefail() const;
  public:
  void clear_seatoccpfrntlefail();
  ::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType seatoccpfrntlefail() const;
  void set_seatoccpfrntlefail(::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType value);
  private:
  ::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType _internal_seatoccpfrntlefail() const;
  void _internal_set_seatoccpfrntlefail(::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType value);
  public:

  // optional .apollo.canbus.Bodystatus24d.SteerwhlheatstsType steerwhlheatsts = 6;
  bool has_steerwhlheatsts() const;
  private:
  bool _internal_has_steerwhlheatsts() const;
  public:
  void clear_steerwhlheatsts();
  ::apollo::canbus::Bodystatus24d_SteerwhlheatstsType steerwhlheatsts() const;
  void set_steerwhlheatsts(::apollo::canbus::Bodystatus24d_SteerwhlheatstsType value);
  private:
  ::apollo::canbus::Bodystatus24d_SteerwhlheatstsType _internal_steerwhlheatsts() const;
  void _internal_set_steerwhlheatsts(::apollo::canbus::Bodystatus24d_SteerwhlheatstsType value);
  public:

  // optional int32 bcmclosuremsgcntr = 7;
  bool has_bcmclosuremsgcntr() const;
  private:
  bool _internal_has_bcmclosuremsgcntr() const;
  public:
  void clear_bcmclosuremsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 bcmclosuremsgcntr() const;
  void set_bcmclosuremsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bcmclosuremsgcntr() const;
  void _internal_set_bcmclosuremsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Bodystatus24d.TrajarstsType trajarsts = 8;
  bool has_trajarsts() const;
  private:
  bool _internal_has_trajarsts() const;
  public:
  void clear_trajarsts();
  ::apollo::canbus::Bodystatus24d_TrajarstsType trajarsts() const;
  void set_trajarsts(::apollo::canbus::Bodystatus24d_TrajarstsType value);
  private:
  ::apollo::canbus::Bodystatus24d_TrajarstsType _internal_trajarsts() const;
  void _internal_set_trajarsts(::apollo::canbus::Bodystatus24d_TrajarstsType value);
  public:

  // optional .apollo.canbus.Bodystatus24d.HoodajarstsType hoodajarsts = 9;
  bool has_hoodajarsts() const;
  private:
  bool _internal_has_hoodajarsts() const;
  public:
  void clear_hoodajarsts();
  ::apollo::canbus::Bodystatus24d_HoodajarstsType hoodajarsts() const;
  void set_hoodajarsts(::apollo::canbus::Bodystatus24d_HoodajarstsType value);
  private:
  ::apollo::canbus::Bodystatus24d_HoodajarstsType _internal_hoodajarsts() const;
  void _internal_set_hoodajarsts(::apollo::canbus::Bodystatus24d_HoodajarstsType value);
  public:

  // optional .apollo.canbus.Bodystatus24d.DoorajarreristsType doorajarrerists = 10;
  bool has_doorajarrerists() const;
  private:
  bool _internal_has_doorajarrerists() const;
  public:
  void clear_doorajarrerists();
  ::apollo::canbus::Bodystatus24d_DoorajarreristsType doorajarrerists() const;
  void set_doorajarrerists(::apollo::canbus::Bodystatus24d_DoorajarreristsType value);
  private:
  ::apollo::canbus::Bodystatus24d_DoorajarreristsType _internal_doorajarrerists() const;
  void _internal_set_doorajarrerists(::apollo::canbus::Bodystatus24d_DoorajarreristsType value);
  public:

  // optional .apollo.canbus.Bodystatus24d.SeatoccpfrntlestsType seatoccpfrntlests = 11;
  bool has_seatoccpfrntlests() const;
  private:
  bool _internal_has_seatoccpfrntlests() const;
  public:
  void clear_seatoccpfrntlests();
  ::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType seatoccpfrntlests() const;
  void set_seatoccpfrntlests(::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType value);
  private:
  ::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType _internal_seatoccpfrntlests() const;
  void _internal_set_seatoccpfrntlests(::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType value);
  public:

  // optional .apollo.canbus.Bodystatus24d.CooltlvllowwarnreqType cooltlvllowwarnreq = 12;
  bool has_cooltlvllowwarnreq() const;
  private:
  bool _internal_has_cooltlvllowwarnreq() const;
  public:
  void clear_cooltlvllowwarnreq();
  ::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType cooltlvllowwarnreq() const;
  void set_cooltlvllowwarnreq(::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType value);
  private:
  ::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType _internal_cooltlvllowwarnreq() const;
  void _internal_set_cooltlvllowwarnreq(::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType value);
  public:

  // optional double vehspd = 13;
  bool has_vehspd() const;
  private:
  bool _internal_has_vehspd() const;
  public:
  void clear_vehspd();
  double vehspd() const;
  void set_vehspd(double value);
  private:
  double _internal_vehspd() const;
  void _internal_set_vehspd(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Bodystatus24d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int doorajarfrntlests_;
  int doorajarfrntrists_;
  int doorajarrelests_;
  ::PROTOBUF_NAMESPACE_ID::int32 bcmclosurecrc_;
  int seatoccpfrntlefail_;
  int steerwhlheatsts_;
  ::PROTOBUF_NAMESPACE_ID::int32 bcmclosuremsgcntr_;
  int trajarsts_;
  int hoodajarsts_;
  int doorajarrerists_;
  int seatoccpfrntlests_;
  int cooltlvllowwarnreq_;
  double vehspd_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Driverstatus24e PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Driverstatus24e) */ {
 public:
  inline Driverstatus24e() : Driverstatus24e(nullptr) {}
  virtual ~Driverstatus24e();

  Driverstatus24e(const Driverstatus24e& from);
  Driverstatus24e(Driverstatus24e&& from) noexcept
    : Driverstatus24e() {
    *this = ::std::move(from);
  }

  inline Driverstatus24e& operator=(const Driverstatus24e& from) {
    CopyFrom(from);
    return *this;
  }
  inline Driverstatus24e& operator=(Driverstatus24e&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Driverstatus24e& default_instance();

  static inline const Driverstatus24e* internal_default_instance() {
    return reinterpret_cast<const Driverstatus24e*>(
               &_Driverstatus24e_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Driverstatus24e& a, Driverstatus24e& b) {
    a.Swap(&b);
  }
  inline void Swap(Driverstatus24e* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Driverstatus24e* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Driverstatus24e* New() const final {
    return CreateMaybeMessage<Driverstatus24e>(nullptr);
  }

  Driverstatus24e* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Driverstatus24e>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Driverstatus24e& from);
  void MergeFrom(const Driverstatus24e& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Driverstatus24e* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Driverstatus24e";
  }
  protected:
  explicit Driverstatus24e(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Driverstatus24e_EpbstsType EpbstsType;
  static constexpr EpbstsType EPBstsunknow =
    Driverstatus24e_EpbstsType_EPBstsunknow;
  static constexpr EpbstsType EPBstsapplied =
    Driverstatus24e_EpbstsType_EPBstsapplied;
  static constexpr EpbstsType EPBstsreleasing =
    Driverstatus24e_EpbstsType_EPBstsreleasing;
  static constexpr EpbstsType EPBstsNotApplied =
    Driverstatus24e_EpbstsType_EPBstsNotApplied;
  static constexpr EpbstsType EPBstsapplying =
    Driverstatus24e_EpbstsType_EPBstsapplying;
  static constexpr EpbstsType EPBstsreserved4 =
    Driverstatus24e_EpbstsType_EPBstsreserved4;
  static constexpr EpbstsType EPBstsreserved6 =
    Driverstatus24e_EpbstsType_EPBstsreserved6;
  static constexpr EpbstsType EPBstsreserved7 =
    Driverstatus24e_EpbstsType_EPBstsreserved7;
  static inline bool EpbstsType_IsValid(int value) {
    return Driverstatus24e_EpbstsType_IsValid(value);
  }
  static constexpr EpbstsType EpbstsType_MIN =
    Driverstatus24e_EpbstsType_EpbstsType_MIN;
  static constexpr EpbstsType EpbstsType_MAX =
    Driverstatus24e_EpbstsType_EpbstsType_MAX;
  static constexpr int EpbstsType_ARRAYSIZE =
    Driverstatus24e_EpbstsType_EpbstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpbstsType_descriptor() {
    return Driverstatus24e_EpbstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpbstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpbstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpbstsType_Name.");
    return Driverstatus24e_EpbstsType_Name(enum_t_value);
  }
  static inline bool EpbstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpbstsType* value) {
    return Driverstatus24e_EpbstsType_Parse(name, value);
  }

  typedef Driverstatus24e_VcuaccrpedlovrdType VcuaccrpedlovrdType;
  static constexpr VcuaccrpedlovrdType VCUAccrPedlOvrdNoRequest =
    Driverstatus24e_VcuaccrpedlovrdType_VCUAccrPedlOvrdNoRequest;
  static constexpr VcuaccrpedlovrdType VCUAccrPedlOvrdrequest =
    Driverstatus24e_VcuaccrpedlovrdType_VCUAccrPedlOvrdrequest;
  static inline bool VcuaccrpedlovrdType_IsValid(int value) {
    return Driverstatus24e_VcuaccrpedlovrdType_IsValid(value);
  }
  static constexpr VcuaccrpedlovrdType VcuaccrpedlovrdType_MIN =
    Driverstatus24e_VcuaccrpedlovrdType_VcuaccrpedlovrdType_MIN;
  static constexpr VcuaccrpedlovrdType VcuaccrpedlovrdType_MAX =
    Driverstatus24e_VcuaccrpedlovrdType_VcuaccrpedlovrdType_MAX;
  static constexpr int VcuaccrpedlovrdType_ARRAYSIZE =
    Driverstatus24e_VcuaccrpedlovrdType_VcuaccrpedlovrdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VcuaccrpedlovrdType_descriptor() {
    return Driverstatus24e_VcuaccrpedlovrdType_descriptor();
  }
  template<typename T>
  static inline const std::string& VcuaccrpedlovrdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VcuaccrpedlovrdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VcuaccrpedlovrdType_Name.");
    return Driverstatus24e_VcuaccrpedlovrdType_Name(enum_t_value);
  }
  static inline bool VcuaccrpedlovrdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VcuaccrpedlovrdType* value) {
    return Driverstatus24e_VcuaccrpedlovrdType_Parse(name, value);
  }

  typedef Driverstatus24e_Ibesp2warningType Ibesp2warningType;
  static constexpr Ibesp2warningType Ibesp2WarningIBoosterSystemOK =
    Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterSystemOK;
  static constexpr Ibesp2warningType Ibesp2WarningIBoosterInReducedPerformanceYellowLamp =
    Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterInReducedPerformanceYellowLamp;
  static constexpr Ibesp2warningType Ibesp2WarningIBoosterDeactivatedYellowLamp =
    Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterDeactivatedYellowLamp;
  static constexpr Ibesp2warningType Ibesp2WarningIBoosterInDiagnosisOrPlantMode =
    Driverstatus24e_Ibesp2warningType_Ibesp2WarningIBoosterInDiagnosisOrPlantMode;
  static inline bool Ibesp2warningType_IsValid(int value) {
    return Driverstatus24e_Ibesp2warningType_IsValid(value);
  }
  static constexpr Ibesp2warningType Ibesp2warningType_MIN =
    Driverstatus24e_Ibesp2warningType_Ibesp2warningType_MIN;
  static constexpr Ibesp2warningType Ibesp2warningType_MAX =
    Driverstatus24e_Ibesp2warningType_Ibesp2warningType_MAX;
  static constexpr int Ibesp2warningType_ARRAYSIZE =
    Driverstatus24e_Ibesp2warningType_Ibesp2warningType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Ibesp2warningType_descriptor() {
    return Driverstatus24e_Ibesp2warningType_descriptor();
  }
  template<typename T>
  static inline const std::string& Ibesp2warningType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Ibesp2warningType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Ibesp2warningType_Name.");
    return Driverstatus24e_Ibesp2warningType_Name(enum_t_value);
  }
  static inline bool Ibesp2warningType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Ibesp2warningType* value) {
    return Driverstatus24e_Ibesp2warningType_Parse(name, value);
  }

  typedef Driverstatus24e_AirbwarnreqType AirbwarnreqType;
  static constexpr AirbwarnreqType AirbWarnReqWarningLampOff =
    Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampOff;
  static constexpr AirbwarnreqType AirbWarnReqWarningLampOnFaultDetected =
    Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampOnFaultDetected;
  static constexpr AirbwarnreqType AirbWarnReqWarningLampIsBlinking =
    Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampIsBlinking;
  static constexpr AirbwarnreqType AirbWarnReqWarningLampOnSystemInitialization =
    Driverstatus24e_AirbwarnreqType_AirbWarnReqWarningLampOnSystemInitialization;
  static inline bool AirbwarnreqType_IsValid(int value) {
    return Driverstatus24e_AirbwarnreqType_IsValid(value);
  }
  static constexpr AirbwarnreqType AirbwarnreqType_MIN =
    Driverstatus24e_AirbwarnreqType_AirbwarnreqType_MIN;
  static constexpr AirbwarnreqType AirbwarnreqType_MAX =
    Driverstatus24e_AirbwarnreqType_AirbwarnreqType_MAX;
  static constexpr int AirbwarnreqType_ARRAYSIZE =
    Driverstatus24e_AirbwarnreqType_AirbwarnreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AirbwarnreqType_descriptor() {
    return Driverstatus24e_AirbwarnreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& AirbwarnreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AirbwarnreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AirbwarnreqType_Name.");
    return Driverstatus24e_AirbwarnreqType_Name(enum_t_value);
  }
  static inline bool AirbwarnreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AirbwarnreqType* value) {
    return Driverstatus24e_AirbwarnreqType_Parse(name, value);
  }

  typedef Driverstatus24e_SeatbltmidrowristsType SeatbltmidrowristsType;
  static constexpr SeatbltmidrowristsType SeatBltMidRowRiStsSeabeltMiddleRowRightNotBuckled =
    Driverstatus24e_SeatbltmidrowristsType_SeatBltMidRowRiStsSeabeltMiddleRowRightNotBuckled;
  static constexpr SeatbltmidrowristsType SeatBltMidRowRiStsSeatbeltMiddleRowRightBuckled =
    Driverstatus24e_SeatbltmidrowristsType_SeatBltMidRowRiStsSeatbeltMiddleRowRightBuckled;
  static inline bool SeatbltmidrowristsType_IsValid(int value) {
    return Driverstatus24e_SeatbltmidrowristsType_IsValid(value);
  }
  static constexpr SeatbltmidrowristsType SeatbltmidrowristsType_MIN =
    Driverstatus24e_SeatbltmidrowristsType_SeatbltmidrowristsType_MIN;
  static constexpr SeatbltmidrowristsType SeatbltmidrowristsType_MAX =
    Driverstatus24e_SeatbltmidrowristsType_SeatbltmidrowristsType_MAX;
  static constexpr int SeatbltmidrowristsType_ARRAYSIZE =
    Driverstatus24e_SeatbltmidrowristsType_SeatbltmidrowristsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeatbltmidrowristsType_descriptor() {
    return Driverstatus24e_SeatbltmidrowristsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeatbltmidrowristsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeatbltmidrowristsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeatbltmidrowristsType_Name.");
    return Driverstatus24e_SeatbltmidrowristsType_Name(enum_t_value);
  }
  static inline bool SeatbltmidrowristsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeatbltmidrowristsType* value) {
    return Driverstatus24e_SeatbltmidrowristsType_Parse(name, value);
  }

  typedef Driverstatus24e_SeatbltmidrowmidstsType SeatbltmidrowmidstsType;
  static constexpr SeatbltmidrowmidstsType SeatBltMidRowMidStsSeabeltMiddleRowMiddleNotBuckled =
    Driverstatus24e_SeatbltmidrowmidstsType_SeatBltMidRowMidStsSeabeltMiddleRowMiddleNotBuckled;
  static constexpr SeatbltmidrowmidstsType SeatBltMidRowMidStsSeatbeltMiddleRowMiddleBuckled =
    Driverstatus24e_SeatbltmidrowmidstsType_SeatBltMidRowMidStsSeatbeltMiddleRowMiddleBuckled;
  static inline bool SeatbltmidrowmidstsType_IsValid(int value) {
    return Driverstatus24e_SeatbltmidrowmidstsType_IsValid(value);
  }
  static constexpr SeatbltmidrowmidstsType SeatbltmidrowmidstsType_MIN =
    Driverstatus24e_SeatbltmidrowmidstsType_SeatbltmidrowmidstsType_MIN;
  static constexpr SeatbltmidrowmidstsType SeatbltmidrowmidstsType_MAX =
    Driverstatus24e_SeatbltmidrowmidstsType_SeatbltmidrowmidstsType_MAX;
  static constexpr int SeatbltmidrowmidstsType_ARRAYSIZE =
    Driverstatus24e_SeatbltmidrowmidstsType_SeatbltmidrowmidstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeatbltmidrowmidstsType_descriptor() {
    return Driverstatus24e_SeatbltmidrowmidstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeatbltmidrowmidstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeatbltmidrowmidstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeatbltmidrowmidstsType_Name.");
    return Driverstatus24e_SeatbltmidrowmidstsType_Name(enum_t_value);
  }
  static inline bool SeatbltmidrowmidstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeatbltmidrowmidstsType* value) {
    return Driverstatus24e_SeatbltmidrowmidstsType_Parse(name, value);
  }

  typedef Driverstatus24e_SeatbltfrntlestsType SeatbltfrntlestsType;
  static constexpr SeatbltfrntlestsType SeatBltFrntLeStsSeabeltFrontLeftNotBuckled =
    Driverstatus24e_SeatbltfrntlestsType_SeatBltFrntLeStsSeabeltFrontLeftNotBuckled;
  static constexpr SeatbltfrntlestsType SeatBltFrntLeStsSeatbeltFrontLeftBuckled =
    Driverstatus24e_SeatbltfrntlestsType_SeatBltFrntLeStsSeatbeltFrontLeftBuckled;
  static inline bool SeatbltfrntlestsType_IsValid(int value) {
    return Driverstatus24e_SeatbltfrntlestsType_IsValid(value);
  }
  static constexpr SeatbltfrntlestsType SeatbltfrntlestsType_MIN =
    Driverstatus24e_SeatbltfrntlestsType_SeatbltfrntlestsType_MIN;
  static constexpr SeatbltfrntlestsType SeatbltfrntlestsType_MAX =
    Driverstatus24e_SeatbltfrntlestsType_SeatbltfrntlestsType_MAX;
  static constexpr int SeatbltfrntlestsType_ARRAYSIZE =
    Driverstatus24e_SeatbltfrntlestsType_SeatbltfrntlestsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeatbltfrntlestsType_descriptor() {
    return Driverstatus24e_SeatbltfrntlestsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeatbltfrntlestsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeatbltfrntlestsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeatbltfrntlestsType_Name.");
    return Driverstatus24e_SeatbltfrntlestsType_Name(enum_t_value);
  }
  static inline bool SeatbltfrntlestsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeatbltfrntlestsType* value) {
    return Driverstatus24e_SeatbltfrntlestsType_Parse(name, value);
  }

  typedef Driverstatus24e_PassairbginhbnlampreqType PassairbginhbnlampreqType;
  static constexpr PassairbginhbnlampreqType PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOff =
    Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOff;
  static constexpr PassairbginhbnlampreqType PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOn =
    Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOn;
  static constexpr PassairbginhbnlampreqType PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOnSystemInitialization =
    Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqPassengerAirbagInhibitionLampOnSystemInitialization;
  static constexpr PassairbginhbnlampreqType PassAirbgInhbnLampReqReserved =
    Driverstatus24e_PassairbginhbnlampreqType_PassAirbgInhbnLampReqReserved;
  static inline bool PassairbginhbnlampreqType_IsValid(int value) {
    return Driverstatus24e_PassairbginhbnlampreqType_IsValid(value);
  }
  static constexpr PassairbginhbnlampreqType PassairbginhbnlampreqType_MIN =
    Driverstatus24e_PassairbginhbnlampreqType_PassairbginhbnlampreqType_MIN;
  static constexpr PassairbginhbnlampreqType PassairbginhbnlampreqType_MAX =
    Driverstatus24e_PassairbginhbnlampreqType_PassairbginhbnlampreqType_MAX;
  static constexpr int PassairbginhbnlampreqType_ARRAYSIZE =
    Driverstatus24e_PassairbginhbnlampreqType_PassairbginhbnlampreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PassairbginhbnlampreqType_descriptor() {
    return Driverstatus24e_PassairbginhbnlampreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& PassairbginhbnlampreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PassairbginhbnlampreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PassairbginhbnlampreqType_Name.");
    return Driverstatus24e_PassairbginhbnlampreqType_Name(enum_t_value);
  }
  static inline bool PassairbginhbnlampreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PassairbginhbnlampreqType* value) {
    return Driverstatus24e_PassairbginhbnlampreqType_Parse(name, value);
  }

  typedef Driverstatus24e_SeatoccptfrntristsType SeatoccptfrntristsType;
  static constexpr SeatoccptfrntristsType SeatOccptFrntRiStsNoOccupant =
    Driverstatus24e_SeatoccptfrntristsType_SeatOccptFrntRiStsNoOccupant;
  static constexpr SeatoccptfrntristsType SeatOccptFrntRiStsOccupant =
    Driverstatus24e_SeatoccptfrntristsType_SeatOccptFrntRiStsOccupant;
  static inline bool SeatoccptfrntristsType_IsValid(int value) {
    return Driverstatus24e_SeatoccptfrntristsType_IsValid(value);
  }
  static constexpr SeatoccptfrntristsType SeatoccptfrntristsType_MIN =
    Driverstatus24e_SeatoccptfrntristsType_SeatoccptfrntristsType_MIN;
  static constexpr SeatoccptfrntristsType SeatoccptfrntristsType_MAX =
    Driverstatus24e_SeatoccptfrntristsType_SeatoccptfrntristsType_MAX;
  static constexpr int SeatoccptfrntristsType_ARRAYSIZE =
    Driverstatus24e_SeatoccptfrntristsType_SeatoccptfrntristsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeatoccptfrntristsType_descriptor() {
    return Driverstatus24e_SeatoccptfrntristsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeatoccptfrntristsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeatoccptfrntristsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeatoccptfrntristsType_Name.");
    return Driverstatus24e_SeatoccptfrntristsType_Name(enum_t_value);
  }
  static inline bool SeatoccptfrntristsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeatoccptfrntristsType* value) {
    return Driverstatus24e_SeatoccptfrntristsType_Parse(name, value);
  }

  typedef Driverstatus24e_CrashdetdType CrashdetdType;
  static constexpr CrashdetdType CrashDetdCrashNotDetected =
    Driverstatus24e_CrashdetdType_CrashDetdCrashNotDetected;
  static constexpr CrashdetdType CrashDetdCrashDetected =
    Driverstatus24e_CrashdetdType_CrashDetdCrashDetected;
  static inline bool CrashdetdType_IsValid(int value) {
    return Driverstatus24e_CrashdetdType_IsValid(value);
  }
  static constexpr CrashdetdType CrashdetdType_MIN =
    Driverstatus24e_CrashdetdType_CrashdetdType_MIN;
  static constexpr CrashdetdType CrashdetdType_MAX =
    Driverstatus24e_CrashdetdType_CrashdetdType_MAX;
  static constexpr int CrashdetdType_ARRAYSIZE =
    Driverstatus24e_CrashdetdType_CrashdetdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CrashdetdType_descriptor() {
    return Driverstatus24e_CrashdetdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CrashdetdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CrashdetdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CrashdetdType_Name.");
    return Driverstatus24e_CrashdetdType_Name(enum_t_value);
  }
  static inline bool CrashdetdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CrashdetdType* value) {
    return Driverstatus24e_CrashdetdType_Parse(name, value);
  }

  typedef Driverstatus24e_SeatbltfrntristsType SeatbltfrntristsType;
  static constexpr SeatbltfrntristsType SeatBltFrntRiStsSeabeltFrontRightNotBuckled =
    Driverstatus24e_SeatbltfrntristsType_SeatBltFrntRiStsSeabeltFrontRightNotBuckled;
  static constexpr SeatbltfrntristsType SeatBltFrntRiStsSeatbeltFrontRightBuckled =
    Driverstatus24e_SeatbltfrntristsType_SeatBltFrntRiStsSeatbeltFrontRightBuckled;
  static inline bool SeatbltfrntristsType_IsValid(int value) {
    return Driverstatus24e_SeatbltfrntristsType_IsValid(value);
  }
  static constexpr SeatbltfrntristsType SeatbltfrntristsType_MIN =
    Driverstatus24e_SeatbltfrntristsType_SeatbltfrntristsType_MIN;
  static constexpr SeatbltfrntristsType SeatbltfrntristsType_MAX =
    Driverstatus24e_SeatbltfrntristsType_SeatbltfrntristsType_MAX;
  static constexpr int SeatbltfrntristsType_ARRAYSIZE =
    Driverstatus24e_SeatbltfrntristsType_SeatbltfrntristsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeatbltfrntristsType_descriptor() {
    return Driverstatus24e_SeatbltfrntristsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeatbltfrntristsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeatbltfrntristsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeatbltfrntristsType_Name.");
    return Driverstatus24e_SeatbltfrntristsType_Name(enum_t_value);
  }
  static inline bool SeatbltfrntristsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeatbltfrntristsType* value) {
    return Driverstatus24e_SeatbltfrntristsType_Parse(name, value);
  }

  typedef Driverstatus24e_SeatbltmidrowlestsType SeatbltmidrowlestsType;
  static constexpr SeatbltmidrowlestsType SeatBltMidRowLeStsSeabeltMiddleRowLeftNotBuckled =
    Driverstatus24e_SeatbltmidrowlestsType_SeatBltMidRowLeStsSeabeltMiddleRowLeftNotBuckled;
  static constexpr SeatbltmidrowlestsType SeatBltMidRowLeStsSeatbeltMiddleRowLeftBuckled =
    Driverstatus24e_SeatbltmidrowlestsType_SeatBltMidRowLeStsSeatbeltMiddleRowLeftBuckled;
  static inline bool SeatbltmidrowlestsType_IsValid(int value) {
    return Driverstatus24e_SeatbltmidrowlestsType_IsValid(value);
  }
  static constexpr SeatbltmidrowlestsType SeatbltmidrowlestsType_MIN =
    Driverstatus24e_SeatbltmidrowlestsType_SeatbltmidrowlestsType_MIN;
  static constexpr SeatbltmidrowlestsType SeatbltmidrowlestsType_MAX =
    Driverstatus24e_SeatbltmidrowlestsType_SeatbltmidrowlestsType_MAX;
  static constexpr int SeatbltmidrowlestsType_ARRAYSIZE =
    Driverstatus24e_SeatbltmidrowlestsType_SeatbltmidrowlestsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeatbltmidrowlestsType_descriptor() {
    return Driverstatus24e_SeatbltmidrowlestsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeatbltmidrowlestsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeatbltmidrowlestsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeatbltmidrowlestsType_Name.");
    return Driverstatus24e_SeatbltmidrowlestsType_Name(enum_t_value);
  }
  static inline bool SeatbltmidrowlestsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SeatbltmidrowlestsType* value) {
    return Driverstatus24e_SeatbltmidrowlestsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEpbstsFieldNumber = 1,
    kVcuaccrpedlovrdFieldNumber = 2,
    kIbesp2WarningFieldNumber = 3,
    kAirbwarnreqFieldNumber = 4,
    kDriverstsmsgcntrFieldNumber = 5,
    kSeatbltmidrowristsFieldNumber = 6,
    kSeatbltmidrowmidstsFieldNumber = 7,
    kSeatbltfrntlestsFieldNumber = 8,
    kPassairbginhbnlampreqFieldNumber = 9,
    kSeatoccptfrntristsFieldNumber = 10,
    kCrashdetdFieldNumber = 11,
    kSeatbltfrntristsFieldNumber = 12,
    kDriverstscrcFieldNumber = 13,
    kSeatbltmidrowlestsFieldNumber = 14,
    kBmssocFieldNumber = 15,
  };
  // optional .apollo.canbus.Driverstatus24e.EpbstsType epbsts = 1;
  bool has_epbsts() const;
  private:
  bool _internal_has_epbsts() const;
  public:
  void clear_epbsts();
  ::apollo::canbus::Driverstatus24e_EpbstsType epbsts() const;
  void set_epbsts(::apollo::canbus::Driverstatus24e_EpbstsType value);
  private:
  ::apollo::canbus::Driverstatus24e_EpbstsType _internal_epbsts() const;
  void _internal_set_epbsts(::apollo::canbus::Driverstatus24e_EpbstsType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.VcuaccrpedlovrdType vcuaccrpedlovrd = 2;
  bool has_vcuaccrpedlovrd() const;
  private:
  bool _internal_has_vcuaccrpedlovrd() const;
  public:
  void clear_vcuaccrpedlovrd();
  ::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType vcuaccrpedlovrd() const;
  void set_vcuaccrpedlovrd(::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType value);
  private:
  ::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType _internal_vcuaccrpedlovrd() const;
  void _internal_set_vcuaccrpedlovrd(::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.Ibesp2warningType ibesp2warning = 3;
  bool has_ibesp2warning() const;
  private:
  bool _internal_has_ibesp2warning() const;
  public:
  void clear_ibesp2warning();
  ::apollo::canbus::Driverstatus24e_Ibesp2warningType ibesp2warning() const;
  void set_ibesp2warning(::apollo::canbus::Driverstatus24e_Ibesp2warningType value);
  private:
  ::apollo::canbus::Driverstatus24e_Ibesp2warningType _internal_ibesp2warning() const;
  void _internal_set_ibesp2warning(::apollo::canbus::Driverstatus24e_Ibesp2warningType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.AirbwarnreqType airbwarnreq = 4;
  bool has_airbwarnreq() const;
  private:
  bool _internal_has_airbwarnreq() const;
  public:
  void clear_airbwarnreq();
  ::apollo::canbus::Driverstatus24e_AirbwarnreqType airbwarnreq() const;
  void set_airbwarnreq(::apollo::canbus::Driverstatus24e_AirbwarnreqType value);
  private:
  ::apollo::canbus::Driverstatus24e_AirbwarnreqType _internal_airbwarnreq() const;
  void _internal_set_airbwarnreq(::apollo::canbus::Driverstatus24e_AirbwarnreqType value);
  public:

  // optional int32 driverstsmsgcntr = 5;
  bool has_driverstsmsgcntr() const;
  private:
  bool _internal_has_driverstsmsgcntr() const;
  public:
  void clear_driverstsmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 driverstsmsgcntr() const;
  void set_driverstsmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driverstsmsgcntr() const;
  void _internal_set_driverstsmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Driverstatus24e.SeatbltmidrowristsType seatbltmidrowrists = 6;
  bool has_seatbltmidrowrists() const;
  private:
  bool _internal_has_seatbltmidrowrists() const;
  public:
  void clear_seatbltmidrowrists();
  ::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType seatbltmidrowrists() const;
  void set_seatbltmidrowrists(::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType value);
  private:
  ::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType _internal_seatbltmidrowrists() const;
  void _internal_set_seatbltmidrowrists(::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.SeatbltmidrowmidstsType seatbltmidrowmidsts = 7;
  bool has_seatbltmidrowmidsts() const;
  private:
  bool _internal_has_seatbltmidrowmidsts() const;
  public:
  void clear_seatbltmidrowmidsts();
  ::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType seatbltmidrowmidsts() const;
  void set_seatbltmidrowmidsts(::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType value);
  private:
  ::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType _internal_seatbltmidrowmidsts() const;
  void _internal_set_seatbltmidrowmidsts(::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.SeatbltfrntlestsType seatbltfrntlests = 8;
  bool has_seatbltfrntlests() const;
  private:
  bool _internal_has_seatbltfrntlests() const;
  public:
  void clear_seatbltfrntlests();
  ::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType seatbltfrntlests() const;
  void set_seatbltfrntlests(::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType value);
  private:
  ::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType _internal_seatbltfrntlests() const;
  void _internal_set_seatbltfrntlests(::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.PassairbginhbnlampreqType passairbginhbnlampreq = 9;
  bool has_passairbginhbnlampreq() const;
  private:
  bool _internal_has_passairbginhbnlampreq() const;
  public:
  void clear_passairbginhbnlampreq();
  ::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType passairbginhbnlampreq() const;
  void set_passairbginhbnlampreq(::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType value);
  private:
  ::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType _internal_passairbginhbnlampreq() const;
  void _internal_set_passairbginhbnlampreq(::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.SeatoccptfrntristsType seatoccptfrntrists = 10;
  bool has_seatoccptfrntrists() const;
  private:
  bool _internal_has_seatoccptfrntrists() const;
  public:
  void clear_seatoccptfrntrists();
  ::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType seatoccptfrntrists() const;
  void set_seatoccptfrntrists(::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType value);
  private:
  ::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType _internal_seatoccptfrntrists() const;
  void _internal_set_seatoccptfrntrists(::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.CrashdetdType crashdetd = 11;
  bool has_crashdetd() const;
  private:
  bool _internal_has_crashdetd() const;
  public:
  void clear_crashdetd();
  ::apollo::canbus::Driverstatus24e_CrashdetdType crashdetd() const;
  void set_crashdetd(::apollo::canbus::Driverstatus24e_CrashdetdType value);
  private:
  ::apollo::canbus::Driverstatus24e_CrashdetdType _internal_crashdetd() const;
  void _internal_set_crashdetd(::apollo::canbus::Driverstatus24e_CrashdetdType value);
  public:

  // optional .apollo.canbus.Driverstatus24e.SeatbltfrntristsType seatbltfrntrists = 12;
  bool has_seatbltfrntrists() const;
  private:
  bool _internal_has_seatbltfrntrists() const;
  public:
  void clear_seatbltfrntrists();
  ::apollo::canbus::Driverstatus24e_SeatbltfrntristsType seatbltfrntrists() const;
  void set_seatbltfrntrists(::apollo::canbus::Driverstatus24e_SeatbltfrntristsType value);
  private:
  ::apollo::canbus::Driverstatus24e_SeatbltfrntristsType _internal_seatbltfrntrists() const;
  void _internal_set_seatbltfrntrists(::apollo::canbus::Driverstatus24e_SeatbltfrntristsType value);
  public:

  // optional int32 driverstscrc = 13;
  bool has_driverstscrc() const;
  private:
  bool _internal_has_driverstscrc() const;
  public:
  void clear_driverstscrc();
  ::PROTOBUF_NAMESPACE_ID::int32 driverstscrc() const;
  void set_driverstscrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driverstscrc() const;
  void _internal_set_driverstscrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Driverstatus24e.SeatbltmidrowlestsType seatbltmidrowlests = 14;
  bool has_seatbltmidrowlests() const;
  private:
  bool _internal_has_seatbltmidrowlests() const;
  public:
  void clear_seatbltmidrowlests();
  ::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType seatbltmidrowlests() const;
  void set_seatbltmidrowlests(::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType value);
  private:
  ::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType _internal_seatbltmidrowlests() const;
  void _internal_set_seatbltmidrowlests(::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType value);
  public:

  // optional double bmssoc = 15;
  bool has_bmssoc() const;
  private:
  bool _internal_has_bmssoc() const;
  public:
  void clear_bmssoc();
  double bmssoc() const;
  void set_bmssoc(double value);
  private:
  double _internal_bmssoc() const;
  void _internal_set_bmssoc(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Driverstatus24e)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int epbsts_;
  int vcuaccrpedlovrd_;
  int ibesp2warning_;
  int airbwarnreq_;
  ::PROTOBUF_NAMESPACE_ID::int32 driverstsmsgcntr_;
  int seatbltmidrowrists_;
  int seatbltmidrowmidsts_;
  int seatbltfrntlests_;
  int passairbginhbnlampreq_;
  int seatoccptfrntrists_;
  int crashdetd_;
  int seatbltfrntrists_;
  ::PROTOBUF_NAMESPACE_ID::int32 driverstscrc_;
  int seatbltmidrowlests_;
  double bmssoc_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Vehiclelights2c7 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Vehiclelights2c7) */ {
 public:
  inline Vehiclelights2c7() : Vehiclelights2c7(nullptr) {}
  virtual ~Vehiclelights2c7();

  Vehiclelights2c7(const Vehiclelights2c7& from);
  Vehiclelights2c7(Vehiclelights2c7&& from) noexcept
    : Vehiclelights2c7() {
    *this = ::std::move(from);
  }

  inline Vehiclelights2c7& operator=(const Vehiclelights2c7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vehiclelights2c7& operator=(Vehiclelights2c7&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vehiclelights2c7& default_instance();

  static inline const Vehiclelights2c7* internal_default_instance() {
    return reinterpret_cast<const Vehiclelights2c7*>(
               &_Vehiclelights2c7_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Vehiclelights2c7& a, Vehiclelights2c7& b) {
    a.Swap(&b);
  }
  inline void Swap(Vehiclelights2c7* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vehiclelights2c7* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vehiclelights2c7* New() const final {
    return CreateMaybeMessage<Vehiclelights2c7>(nullptr);
  }

  Vehiclelights2c7* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vehiclelights2c7>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vehiclelights2c7& from);
  void MergeFrom(const Vehiclelights2c7& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vehiclelights2c7* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Vehiclelights2c7";
  }
  protected:
  explicit Vehiclelights2c7(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Vehiclelights2c7_FogfrntlightstsType FogfrntlightstsType;
  static constexpr FogfrntlightstsType FogFrntlightStsoff =
    Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStsoff;
  static constexpr FogfrntlightstsType FogFrntlightStson =
    Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStson;
  static constexpr FogfrntlightstsType FogFrntlightStsreserved =
    Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStsreserved;
  static constexpr FogfrntlightstsType FogFrntlightStsinvalid =
    Vehiclelights2c7_FogfrntlightstsType_FogFrntlightStsinvalid;
  static inline bool FogfrntlightstsType_IsValid(int value) {
    return Vehiclelights2c7_FogfrntlightstsType_IsValid(value);
  }
  static constexpr FogfrntlightstsType FogfrntlightstsType_MIN =
    Vehiclelights2c7_FogfrntlightstsType_FogfrntlightstsType_MIN;
  static constexpr FogfrntlightstsType FogfrntlightstsType_MAX =
    Vehiclelights2c7_FogfrntlightstsType_FogfrntlightstsType_MAX;
  static constexpr int FogfrntlightstsType_ARRAYSIZE =
    Vehiclelights2c7_FogfrntlightstsType_FogfrntlightstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FogfrntlightstsType_descriptor() {
    return Vehiclelights2c7_FogfrntlightstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& FogfrntlightstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FogfrntlightstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FogfrntlightstsType_Name.");
    return Vehiclelights2c7_FogfrntlightstsType_Name(enum_t_value);
  }
  static inline bool FogfrntlightstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FogfrntlightstsType* value) {
    return Vehiclelights2c7_FogfrntlightstsType_Parse(name, value);
  }

  typedef Vehiclelights2c7_LeftturnlightstsType LeftturnlightstsType;
  static constexpr LeftturnlightstsType LeftTurnlightstsoff =
    Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstsoff;
  static constexpr LeftturnlightstsType LeftTurnlightstson =
    Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstson;
  static constexpr LeftturnlightstsType LeftTurnlightstsreserved =
    Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstsreserved;
  static constexpr LeftturnlightstsType LeftTurnlightstsinvalid =
    Vehiclelights2c7_LeftturnlightstsType_LeftTurnlightstsinvalid;
  static inline bool LeftturnlightstsType_IsValid(int value) {
    return Vehiclelights2c7_LeftturnlightstsType_IsValid(value);
  }
  static constexpr LeftturnlightstsType LeftturnlightstsType_MIN =
    Vehiclelights2c7_LeftturnlightstsType_LeftturnlightstsType_MIN;
  static constexpr LeftturnlightstsType LeftturnlightstsType_MAX =
    Vehiclelights2c7_LeftturnlightstsType_LeftturnlightstsType_MAX;
  static constexpr int LeftturnlightstsType_ARRAYSIZE =
    Vehiclelights2c7_LeftturnlightstsType_LeftturnlightstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LeftturnlightstsType_descriptor() {
    return Vehiclelights2c7_LeftturnlightstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& LeftturnlightstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LeftturnlightstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LeftturnlightstsType_Name.");
    return Vehiclelights2c7_LeftturnlightstsType_Name(enum_t_value);
  }
  static inline bool LeftturnlightstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LeftturnlightstsType* value) {
    return Vehiclelights2c7_LeftturnlightstsType_Parse(name, value);
  }

  typedef Vehiclelights2c7_RightturnlightstsType RightturnlightstsType;
  static constexpr RightturnlightstsType RightTurnlightstsoff =
    Vehiclelights2c7_RightturnlightstsType_RightTurnlightstsoff;
  static constexpr RightturnlightstsType RightTurnlightstson =
    Vehiclelights2c7_RightturnlightstsType_RightTurnlightstson;
  static constexpr RightturnlightstsType RightTurnlightstsreserved =
    Vehiclelights2c7_RightturnlightstsType_RightTurnlightstsreserved;
  static constexpr RightturnlightstsType RightTurnlightstsinvalid =
    Vehiclelights2c7_RightturnlightstsType_RightTurnlightstsinvalid;
  static inline bool RightturnlightstsType_IsValid(int value) {
    return Vehiclelights2c7_RightturnlightstsType_IsValid(value);
  }
  static constexpr RightturnlightstsType RightturnlightstsType_MIN =
    Vehiclelights2c7_RightturnlightstsType_RightturnlightstsType_MIN;
  static constexpr RightturnlightstsType RightturnlightstsType_MAX =
    Vehiclelights2c7_RightturnlightstsType_RightturnlightstsType_MAX;
  static constexpr int RightturnlightstsType_ARRAYSIZE =
    Vehiclelights2c7_RightturnlightstsType_RightturnlightstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RightturnlightstsType_descriptor() {
    return Vehiclelights2c7_RightturnlightstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& RightturnlightstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RightturnlightstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RightturnlightstsType_Name.");
    return Vehiclelights2c7_RightturnlightstsType_Name(enum_t_value);
  }
  static inline bool RightturnlightstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RightturnlightstsType* value) {
    return Vehiclelights2c7_RightturnlightstsType_Parse(name, value);
  }

  typedef Vehiclelights2c7_LobeamlightstsType LobeamlightstsType;
  static constexpr LobeamlightstsType LobeamlightStsoff =
    Vehiclelights2c7_LobeamlightstsType_LobeamlightStsoff;
  static constexpr LobeamlightstsType LobeamlightStson =
    Vehiclelights2c7_LobeamlightstsType_LobeamlightStson;
  static constexpr LobeamlightstsType LobeamlightStsreserved =
    Vehiclelights2c7_LobeamlightstsType_LobeamlightStsreserved;
  static constexpr LobeamlightstsType LobeamlightStsinvalid =
    Vehiclelights2c7_LobeamlightstsType_LobeamlightStsinvalid;
  static inline bool LobeamlightstsType_IsValid(int value) {
    return Vehiclelights2c7_LobeamlightstsType_IsValid(value);
  }
  static constexpr LobeamlightstsType LobeamlightstsType_MIN =
    Vehiclelights2c7_LobeamlightstsType_LobeamlightstsType_MIN;
  static constexpr LobeamlightstsType LobeamlightstsType_MAX =
    Vehiclelights2c7_LobeamlightstsType_LobeamlightstsType_MAX;
  static constexpr int LobeamlightstsType_ARRAYSIZE =
    Vehiclelights2c7_LobeamlightstsType_LobeamlightstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LobeamlightstsType_descriptor() {
    return Vehiclelights2c7_LobeamlightstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& LobeamlightstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LobeamlightstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LobeamlightstsType_Name.");
    return Vehiclelights2c7_LobeamlightstsType_Name(enum_t_value);
  }
  static inline bool LobeamlightstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LobeamlightstsType* value) {
    return Vehiclelights2c7_LobeamlightstsType_Parse(name, value);
  }

  typedef Vehiclelights2c7_HibeamlightstsType HibeamlightstsType;
  static constexpr HibeamlightstsType HibeamlightStsoff =
    Vehiclelights2c7_HibeamlightstsType_HibeamlightStsoff;
  static constexpr HibeamlightstsType HibeamlightStson =
    Vehiclelights2c7_HibeamlightstsType_HibeamlightStson;
  static constexpr HibeamlightstsType HibeamlightStsreserved =
    Vehiclelights2c7_HibeamlightstsType_HibeamlightStsreserved;
  static constexpr HibeamlightstsType HibeamlightStsinvalid =
    Vehiclelights2c7_HibeamlightstsType_HibeamlightStsinvalid;
  static inline bool HibeamlightstsType_IsValid(int value) {
    return Vehiclelights2c7_HibeamlightstsType_IsValid(value);
  }
  static constexpr HibeamlightstsType HibeamlightstsType_MIN =
    Vehiclelights2c7_HibeamlightstsType_HibeamlightstsType_MIN;
  static constexpr HibeamlightstsType HibeamlightstsType_MAX =
    Vehiclelights2c7_HibeamlightstsType_HibeamlightstsType_MAX;
  static constexpr int HibeamlightstsType_ARRAYSIZE =
    Vehiclelights2c7_HibeamlightstsType_HibeamlightstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HibeamlightstsType_descriptor() {
    return Vehiclelights2c7_HibeamlightstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& HibeamlightstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HibeamlightstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HibeamlightstsType_Name.");
    return Vehiclelights2c7_HibeamlightstsType_Name(enum_t_value);
  }
  static inline bool HibeamlightstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HibeamlightstsType* value) {
    return Vehiclelights2c7_HibeamlightstsType_Parse(name, value);
  }

  typedef Vehiclelights2c7_EmergcylightstsType EmergcylightstsType;
  static constexpr EmergcylightstsType EmergcyLightStsoff =
    Vehiclelights2c7_EmergcylightstsType_EmergcyLightStsoff;
  static constexpr EmergcylightstsType EmergcyLightSts125Hz =
    Vehiclelights2c7_EmergcylightstsType_EmergcyLightSts125Hz;
  static constexpr EmergcylightstsType EmergcyLightSts1Hz =
    Vehiclelights2c7_EmergcylightstsType_EmergcyLightSts1Hz;
  static constexpr EmergcylightstsType EmergcyLightStsinvalid =
    Vehiclelights2c7_EmergcylightstsType_EmergcyLightStsinvalid;
  static inline bool EmergcylightstsType_IsValid(int value) {
    return Vehiclelights2c7_EmergcylightstsType_IsValid(value);
  }
  static constexpr EmergcylightstsType EmergcylightstsType_MIN =
    Vehiclelights2c7_EmergcylightstsType_EmergcylightstsType_MIN;
  static constexpr EmergcylightstsType EmergcylightstsType_MAX =
    Vehiclelights2c7_EmergcylightstsType_EmergcylightstsType_MAX;
  static constexpr int EmergcylightstsType_ARRAYSIZE =
    Vehiclelights2c7_EmergcylightstsType_EmergcylightstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EmergcylightstsType_descriptor() {
    return Vehiclelights2c7_EmergcylightstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& EmergcylightstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EmergcylightstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EmergcylightstsType_Name.");
    return Vehiclelights2c7_EmergcylightstsType_Name(enum_t_value);
  }
  static inline bool EmergcylightstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EmergcylightstsType* value) {
    return Vehiclelights2c7_EmergcylightstsType_Parse(name, value);
  }

  typedef Vehiclelights2c7_FrntwiperstsType FrntwiperstsType;
  static constexpr FrntwiperstsType FrntwiperStsoff =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperStsoff;
  static constexpr FrntwiperstsType FrntwiperStsLowSpeed =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperStsLowSpeed;
  static constexpr FrntwiperstsType FrntwiperStsHighSpeed =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperStsHighSpeed;
  static constexpr FrntwiperstsType FrntwiperStsreserved2 =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperStsreserved2;
  static constexpr FrntwiperstsType FrntwiperStsreserved3 =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperStsreserved3;
  static constexpr FrntwiperstsType FrntwiperStsreserved5 =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperStsreserved5;
  static constexpr FrntwiperstsType FrntwiperStsreserved6 =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperStsreserved6;
  static constexpr FrntwiperstsType FrntwiperStsinvalid =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperStsinvalid;
  static inline bool FrntwiperstsType_IsValid(int value) {
    return Vehiclelights2c7_FrntwiperstsType_IsValid(value);
  }
  static constexpr FrntwiperstsType FrntwiperstsType_MIN =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperstsType_MIN;
  static constexpr FrntwiperstsType FrntwiperstsType_MAX =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperstsType_MAX;
  static constexpr int FrntwiperstsType_ARRAYSIZE =
    Vehiclelights2c7_FrntwiperstsType_FrntwiperstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrntwiperstsType_descriptor() {
    return Vehiclelights2c7_FrntwiperstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrntwiperstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrntwiperstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrntwiperstsType_Name.");
    return Vehiclelights2c7_FrntwiperstsType_Name(enum_t_value);
  }
  static inline bool FrntwiperstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrntwiperstsType* value) {
    return Vehiclelights2c7_FrntwiperstsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFogfrntlightstsFieldNumber = 1,
    kLeftturnlightstsFieldNumber = 2,
    kRightturnlightstsFieldNumber = 3,
    kLobeamlightstsFieldNumber = 4,
    kHibeamlightstsFieldNumber = 5,
    kEmergcylightstsFieldNumber = 6,
    kFrntwiperstsFieldNumber = 7,
  };
  // optional .apollo.canbus.Vehiclelights2c7.FogfrntlightstsType fogfrntlightsts = 1;
  bool has_fogfrntlightsts() const;
  private:
  bool _internal_has_fogfrntlightsts() const;
  public:
  void clear_fogfrntlightsts();
  ::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType fogfrntlightsts() const;
  void set_fogfrntlightsts(::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType value);
  private:
  ::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType _internal_fogfrntlightsts() const;
  void _internal_set_fogfrntlightsts(::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType value);
  public:

  // optional .apollo.canbus.Vehiclelights2c7.LeftturnlightstsType leftturnlightsts = 2;
  bool has_leftturnlightsts() const;
  private:
  bool _internal_has_leftturnlightsts() const;
  public:
  void clear_leftturnlightsts();
  ::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType leftturnlightsts() const;
  void set_leftturnlightsts(::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType value);
  private:
  ::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType _internal_leftturnlightsts() const;
  void _internal_set_leftturnlightsts(::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType value);
  public:

  // optional .apollo.canbus.Vehiclelights2c7.RightturnlightstsType rightturnlightsts = 3;
  bool has_rightturnlightsts() const;
  private:
  bool _internal_has_rightturnlightsts() const;
  public:
  void clear_rightturnlightsts();
  ::apollo::canbus::Vehiclelights2c7_RightturnlightstsType rightturnlightsts() const;
  void set_rightturnlightsts(::apollo::canbus::Vehiclelights2c7_RightturnlightstsType value);
  private:
  ::apollo::canbus::Vehiclelights2c7_RightturnlightstsType _internal_rightturnlightsts() const;
  void _internal_set_rightturnlightsts(::apollo::canbus::Vehiclelights2c7_RightturnlightstsType value);
  public:

  // optional .apollo.canbus.Vehiclelights2c7.LobeamlightstsType lobeamlightsts = 4;
  bool has_lobeamlightsts() const;
  private:
  bool _internal_has_lobeamlightsts() const;
  public:
  void clear_lobeamlightsts();
  ::apollo::canbus::Vehiclelights2c7_LobeamlightstsType lobeamlightsts() const;
  void set_lobeamlightsts(::apollo::canbus::Vehiclelights2c7_LobeamlightstsType value);
  private:
  ::apollo::canbus::Vehiclelights2c7_LobeamlightstsType _internal_lobeamlightsts() const;
  void _internal_set_lobeamlightsts(::apollo::canbus::Vehiclelights2c7_LobeamlightstsType value);
  public:

  // optional .apollo.canbus.Vehiclelights2c7.HibeamlightstsType hibeamlightsts = 5;
  bool has_hibeamlightsts() const;
  private:
  bool _internal_has_hibeamlightsts() const;
  public:
  void clear_hibeamlightsts();
  ::apollo::canbus::Vehiclelights2c7_HibeamlightstsType hibeamlightsts() const;
  void set_hibeamlightsts(::apollo::canbus::Vehiclelights2c7_HibeamlightstsType value);
  private:
  ::apollo::canbus::Vehiclelights2c7_HibeamlightstsType _internal_hibeamlightsts() const;
  void _internal_set_hibeamlightsts(::apollo::canbus::Vehiclelights2c7_HibeamlightstsType value);
  public:

  // optional .apollo.canbus.Vehiclelights2c7.EmergcylightstsType emergcylightsts = 6;
  bool has_emergcylightsts() const;
  private:
  bool _internal_has_emergcylightsts() const;
  public:
  void clear_emergcylightsts();
  ::apollo::canbus::Vehiclelights2c7_EmergcylightstsType emergcylightsts() const;
  void set_emergcylightsts(::apollo::canbus::Vehiclelights2c7_EmergcylightstsType value);
  private:
  ::apollo::canbus::Vehiclelights2c7_EmergcylightstsType _internal_emergcylightsts() const;
  void _internal_set_emergcylightsts(::apollo::canbus::Vehiclelights2c7_EmergcylightstsType value);
  public:

  // optional .apollo.canbus.Vehiclelights2c7.FrntwiperstsType frntwipersts = 7;
  bool has_frntwipersts() const;
  private:
  bool _internal_has_frntwipersts() const;
  public:
  void clear_frntwipersts();
  ::apollo::canbus::Vehiclelights2c7_FrntwiperstsType frntwipersts() const;
  void set_frntwipersts(::apollo::canbus::Vehiclelights2c7_FrntwiperstsType value);
  private:
  ::apollo::canbus::Vehiclelights2c7_FrntwiperstsType _internal_frntwipersts() const;
  void _internal_set_frntwipersts(::apollo::canbus::Vehiclelights2c7_FrntwiperstsType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Vehiclelights2c7)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int fogfrntlightsts_;
  int leftturnlightsts_;
  int rightturnlightsts_;
  int lobeamlightsts_;
  int hibeamlightsts_;
  int emergcylightsts_;
  int frntwipersts_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Lightreq336 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Lightreq336) */ {
 public:
  inline Lightreq336() : Lightreq336(nullptr) {}
  virtual ~Lightreq336();

  Lightreq336(const Lightreq336& from);
  Lightreq336(Lightreq336&& from) noexcept
    : Lightreq336() {
    *this = ::std::move(from);
  }

  inline Lightreq336& operator=(const Lightreq336& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lightreq336& operator=(Lightreq336&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lightreq336& default_instance();

  static inline const Lightreq336* internal_default_instance() {
    return reinterpret_cast<const Lightreq336*>(
               &_Lightreq336_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Lightreq336& a, Lightreq336& b) {
    a.Swap(&b);
  }
  inline void Swap(Lightreq336* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lightreq336* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lightreq336* New() const final {
    return CreateMaybeMessage<Lightreq336>(nullptr);
  }

  Lightreq336* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lightreq336>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lightreq336& from);
  void MergeFrom(const Lightreq336& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lightreq336* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Lightreq336";
  }
  protected:
  explicit Lightreq336(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Lightreq336_BrklireqType BrklireqType;
  static constexpr BrklireqType BrkLiReqNoRequest =
    Lightreq336_BrklireqType_BrkLiReqNoRequest;
  static constexpr BrklireqType BrkLiReqrequest =
    Lightreq336_BrklireqType_BrkLiReqrequest;
  static constexpr BrklireqType BrkLiReqreserved =
    Lightreq336_BrklireqType_BrkLiReqreserved;
  static constexpr BrklireqType BrkLiReqinvalid =
    Lightreq336_BrklireqType_BrkLiReqinvalid;
  static inline bool BrklireqType_IsValid(int value) {
    return Lightreq336_BrklireqType_IsValid(value);
  }
  static constexpr BrklireqType BrklireqType_MIN =
    Lightreq336_BrklireqType_BrklireqType_MIN;
  static constexpr BrklireqType BrklireqType_MAX =
    Lightreq336_BrklireqType_BrklireqType_MAX;
  static constexpr int BrklireqType_ARRAYSIZE =
    Lightreq336_BrklireqType_BrklireqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BrklireqType_descriptor() {
    return Lightreq336_BrklireqType_descriptor();
  }
  template<typename T>
  static inline const std::string& BrklireqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BrklireqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BrklireqType_Name.");
    return Lightreq336_BrklireqType_Name(enum_t_value);
  }
  static inline bool BrklireqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BrklireqType* value) {
    return Lightreq336_BrklireqType_Parse(name, value);
  }

  typedef Lightreq336_FrntwiprstsType FrntwiprstsType;
  static constexpr FrntwiprstsType Frntwiprstsoff =
    Lightreq336_FrntwiprstsType_Frntwiprstsoff;
  static constexpr FrntwiprstsType FrntwiprstsLowSpeed =
    Lightreq336_FrntwiprstsType_FrntwiprstsLowSpeed;
  static constexpr FrntwiprstsType FrntwiprstsHighSpeed =
    Lightreq336_FrntwiprstsType_FrntwiprstsHighSpeed;
  static constexpr FrntwiprstsType Frntwiprstsreserved3 =
    Lightreq336_FrntwiprstsType_Frntwiprstsreserved3;
  static constexpr FrntwiprstsType Frntwiprstsreserved4 =
    Lightreq336_FrntwiprstsType_Frntwiprstsreserved4;
  static constexpr FrntwiprstsType Frntwiprstsreserved5 =
    Lightreq336_FrntwiprstsType_Frntwiprstsreserved5;
  static constexpr FrntwiprstsType Frntwiprstsreserved6 =
    Lightreq336_FrntwiprstsType_Frntwiprstsreserved6;
  static constexpr FrntwiprstsType Frntwiprstsinvalid =
    Lightreq336_FrntwiprstsType_Frntwiprstsinvalid;
  static inline bool FrntwiprstsType_IsValid(int value) {
    return Lightreq336_FrntwiprstsType_IsValid(value);
  }
  static constexpr FrntwiprstsType FrntwiprstsType_MIN =
    Lightreq336_FrntwiprstsType_FrntwiprstsType_MIN;
  static constexpr FrntwiprstsType FrntwiprstsType_MAX =
    Lightreq336_FrntwiprstsType_FrntwiprstsType_MAX;
  static constexpr int FrntwiprstsType_ARRAYSIZE =
    Lightreq336_FrntwiprstsType_FrntwiprstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrntwiprstsType_descriptor() {
    return Lightreq336_FrntwiprstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrntwiprstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrntwiprstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrntwiprstsType_Name.");
    return Lightreq336_FrntwiprstsType_Name(enum_t_value);
  }
  static inline bool FrntwiprstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrntwiprstsType* value) {
    return Lightreq336_FrntwiprstsType_Parse(name, value);
  }

  typedef Lightreq336_TurnlightindType TurnlightindType;
  static constexpr TurnlightindType TurnlightindNoTurn =
    Lightreq336_TurnlightindType_TurnlightindNoTurn;
  static constexpr TurnlightindType TurnlightindTurnLeft =
    Lightreq336_TurnlightindType_TurnlightindTurnLeft;
  static constexpr TurnlightindType TurnlightindTurnRight =
    Lightreq336_TurnlightindType_TurnlightindTurnRight;
  static constexpr TurnlightindType Turnlightindinvalid =
    Lightreq336_TurnlightindType_Turnlightindinvalid;
  static inline bool TurnlightindType_IsValid(int value) {
    return Lightreq336_TurnlightindType_IsValid(value);
  }
  static constexpr TurnlightindType TurnlightindType_MIN =
    Lightreq336_TurnlightindType_TurnlightindType_MIN;
  static constexpr TurnlightindType TurnlightindType_MAX =
    Lightreq336_TurnlightindType_TurnlightindType_MAX;
  static constexpr int TurnlightindType_ARRAYSIZE =
    Lightreq336_TurnlightindType_TurnlightindType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TurnlightindType_descriptor() {
    return Lightreq336_TurnlightindType_descriptor();
  }
  template<typename T>
  static inline const std::string& TurnlightindType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TurnlightindType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TurnlightindType_Name.");
    return Lightreq336_TurnlightindType_Name(enum_t_value);
  }
  static inline bool TurnlightindType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TurnlightindType* value) {
    return Lightreq336_TurnlightindType_Parse(name, value);
  }

  typedef Lightreq336_BeamactivestsType BeamactivestsType;
  static constexpr BeamactivestsType BeamactiveStsBeamStatusOff =
    Lightreq336_BeamactivestsType_BeamactiveStsBeamStatusOff;
  static constexpr BeamactivestsType BeamactiveStsBeamStatusPassive =
    Lightreq336_BeamactivestsType_BeamactiveStsBeamStatusPassive;
  static constexpr BeamactivestsType BeamactiveStsBeamStatusActive =
    Lightreq336_BeamactivestsType_BeamactiveStsBeamStatusActive;
  static constexpr BeamactivestsType BeamactiveStsreserved3 =
    Lightreq336_BeamactivestsType_BeamactiveStsreserved3;
  static constexpr BeamactivestsType BeamactiveStsreserved4 =
    Lightreq336_BeamactivestsType_BeamactiveStsreserved4;
  static constexpr BeamactivestsType BeamactiveStsreserved5 =
    Lightreq336_BeamactivestsType_BeamactiveStsreserved5;
  static constexpr BeamactivestsType BeamactiveStsreserved6 =
    Lightreq336_BeamactivestsType_BeamactiveStsreserved6;
  static constexpr BeamactivestsType BeamactiveStsinvalid =
    Lightreq336_BeamactivestsType_BeamactiveStsinvalid;
  static inline bool BeamactivestsType_IsValid(int value) {
    return Lightreq336_BeamactivestsType_IsValid(value);
  }
  static constexpr BeamactivestsType BeamactivestsType_MIN =
    Lightreq336_BeamactivestsType_BeamactivestsType_MIN;
  static constexpr BeamactivestsType BeamactivestsType_MAX =
    Lightreq336_BeamactivestsType_BeamactivestsType_MAX;
  static constexpr int BeamactivestsType_ARRAYSIZE =
    Lightreq336_BeamactivestsType_BeamactivestsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BeamactivestsType_descriptor() {
    return Lightreq336_BeamactivestsType_descriptor();
  }
  template<typename T>
  static inline const std::string& BeamactivestsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BeamactivestsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BeamactivestsType_Name.");
    return Lightreq336_BeamactivestsType_Name(enum_t_value);
  }
  static inline bool BeamactivestsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BeamactivestsType* value) {
    return Lightreq336_BeamactivestsType_Parse(name, value);
  }

  typedef Lightreq336_BeamlightreqType BeamlightreqType;
  static constexpr BeamlightreqType BeamlightreqLowBeamRequest =
    Lightreq336_BeamlightreqType_BeamlightreqLowBeamRequest;
  static constexpr BeamlightreqType BeamlightreqHighBeamRequest =
    Lightreq336_BeamlightreqType_BeamlightreqHighBeamRequest;
  static inline bool BeamlightreqType_IsValid(int value) {
    return Lightreq336_BeamlightreqType_IsValid(value);
  }
  static constexpr BeamlightreqType BeamlightreqType_MIN =
    Lightreq336_BeamlightreqType_BeamlightreqType_MIN;
  static constexpr BeamlightreqType BeamlightreqType_MAX =
    Lightreq336_BeamlightreqType_BeamlightreqType_MAX;
  static constexpr int BeamlightreqType_ARRAYSIZE =
    Lightreq336_BeamlightreqType_BeamlightreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BeamlightreqType_descriptor() {
    return Lightreq336_BeamlightreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& BeamlightreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BeamlightreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BeamlightreqType_Name.");
    return Lightreq336_BeamlightreqType_Name(enum_t_value);
  }
  static inline bool BeamlightreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      BeamlightreqType* value) {
    return Lightreq336_BeamlightreqType_Parse(name, value);
  }

  typedef Lightreq336_EmeglampreqType EmeglampreqType;
  static constexpr EmeglampreqType EmeglampReqoff =
    Lightreq336_EmeglampreqType_EmeglampReqoff;
  static constexpr EmeglampreqType EmeglampReq125Hz =
    Lightreq336_EmeglampreqType_EmeglampReq125Hz;
  static constexpr EmeglampreqType EmeglampReq1Hz =
    Lightreq336_EmeglampreqType_EmeglampReq1Hz;
  static constexpr EmeglampreqType EmeglampReqinvalid =
    Lightreq336_EmeglampreqType_EmeglampReqinvalid;
  static inline bool EmeglampreqType_IsValid(int value) {
    return Lightreq336_EmeglampreqType_IsValid(value);
  }
  static constexpr EmeglampreqType EmeglampreqType_MIN =
    Lightreq336_EmeglampreqType_EmeglampreqType_MIN;
  static constexpr EmeglampreqType EmeglampreqType_MAX =
    Lightreq336_EmeglampreqType_EmeglampreqType_MAX;
  static constexpr int EmeglampreqType_ARRAYSIZE =
    Lightreq336_EmeglampreqType_EmeglampreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EmeglampreqType_descriptor() {
    return Lightreq336_EmeglampreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& EmeglampreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EmeglampreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EmeglampreqType_Name.");
    return Lightreq336_EmeglampreqType_Name(enum_t_value);
  }
  static inline bool EmeglampreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EmeglampreqType* value) {
    return Lightreq336_EmeglampreqType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBrklireqFieldNumber = 1,
    kFrntwiprstsFieldNumber = 2,
    kTurnlightindFieldNumber = 3,
    kBeamactivestsFieldNumber = 4,
    kBeamlightreqFieldNumber = 5,
    kEmeglampreqFieldNumber = 6,
  };
  // optional .apollo.canbus.Lightreq336.BrklireqType brklireq = 1;
  bool has_brklireq() const;
  private:
  bool _internal_has_brklireq() const;
  public:
  void clear_brklireq();
  ::apollo::canbus::Lightreq336_BrklireqType brklireq() const;
  void set_brklireq(::apollo::canbus::Lightreq336_BrklireqType value);
  private:
  ::apollo::canbus::Lightreq336_BrklireqType _internal_brklireq() const;
  void _internal_set_brklireq(::apollo::canbus::Lightreq336_BrklireqType value);
  public:

  // optional .apollo.canbus.Lightreq336.FrntwiprstsType frntwiprsts = 2;
  bool has_frntwiprsts() const;
  private:
  bool _internal_has_frntwiprsts() const;
  public:
  void clear_frntwiprsts();
  ::apollo::canbus::Lightreq336_FrntwiprstsType frntwiprsts() const;
  void set_frntwiprsts(::apollo::canbus::Lightreq336_FrntwiprstsType value);
  private:
  ::apollo::canbus::Lightreq336_FrntwiprstsType _internal_frntwiprsts() const;
  void _internal_set_frntwiprsts(::apollo::canbus::Lightreq336_FrntwiprstsType value);
  public:

  // optional .apollo.canbus.Lightreq336.TurnlightindType turnlightind = 3;
  bool has_turnlightind() const;
  private:
  bool _internal_has_turnlightind() const;
  public:
  void clear_turnlightind();
  ::apollo::canbus::Lightreq336_TurnlightindType turnlightind() const;
  void set_turnlightind(::apollo::canbus::Lightreq336_TurnlightindType value);
  private:
  ::apollo::canbus::Lightreq336_TurnlightindType _internal_turnlightind() const;
  void _internal_set_turnlightind(::apollo::canbus::Lightreq336_TurnlightindType value);
  public:

  // optional .apollo.canbus.Lightreq336.BeamactivestsType beamactivests = 4;
  bool has_beamactivests() const;
  private:
  bool _internal_has_beamactivests() const;
  public:
  void clear_beamactivests();
  ::apollo::canbus::Lightreq336_BeamactivestsType beamactivests() const;
  void set_beamactivests(::apollo::canbus::Lightreq336_BeamactivestsType value);
  private:
  ::apollo::canbus::Lightreq336_BeamactivestsType _internal_beamactivests() const;
  void _internal_set_beamactivests(::apollo::canbus::Lightreq336_BeamactivestsType value);
  public:

  // optional .apollo.canbus.Lightreq336.BeamlightreqType beamlightreq = 5;
  bool has_beamlightreq() const;
  private:
  bool _internal_has_beamlightreq() const;
  public:
  void clear_beamlightreq();
  ::apollo::canbus::Lightreq336_BeamlightreqType beamlightreq() const;
  void set_beamlightreq(::apollo::canbus::Lightreq336_BeamlightreqType value);
  private:
  ::apollo::canbus::Lightreq336_BeamlightreqType _internal_beamlightreq() const;
  void _internal_set_beamlightreq(::apollo::canbus::Lightreq336_BeamlightreqType value);
  public:

  // optional .apollo.canbus.Lightreq336.EmeglampreqType emeglampreq = 6;
  bool has_emeglampreq() const;
  private:
  bool _internal_has_emeglampreq() const;
  public:
  void clear_emeglampreq();
  ::apollo::canbus::Lightreq336_EmeglampreqType emeglampreq() const;
  void set_emeglampreq(::apollo::canbus::Lightreq336_EmeglampreqType value);
  private:
  ::apollo::canbus::Lightreq336_EmeglampreqType _internal_emeglampreq() const;
  void _internal_set_emeglampreq(::apollo::canbus::Lightreq336_EmeglampreqType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Lightreq336)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int brklireq_;
  int frntwiprsts_;
  int turnlightind_;
  int beamactivests_;
  int beamlightreq_;
  int emeglampreq_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Acmbody4a PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Acmbody4a) */ {
 public:
  inline Acmbody4a() : Acmbody4a(nullptr) {}
  virtual ~Acmbody4a();

  Acmbody4a(const Acmbody4a& from);
  Acmbody4a(Acmbody4a&& from) noexcept
    : Acmbody4a() {
    *this = ::std::move(from);
  }

  inline Acmbody4a& operator=(const Acmbody4a& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acmbody4a& operator=(Acmbody4a&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acmbody4a& default_instance();

  static inline const Acmbody4a* internal_default_instance() {
    return reinterpret_cast<const Acmbody4a*>(
               &_Acmbody4a_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Acmbody4a& a, Acmbody4a& b) {
    a.Swap(&b);
  }
  inline void Swap(Acmbody4a* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acmbody4a* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acmbody4a* New() const final {
    return CreateMaybeMessage<Acmbody4a>(nullptr);
  }

  Acmbody4a* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acmbody4a>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acmbody4a& from);
  void MergeFrom(const Acmbody4a& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acmbody4a* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Acmbody4a";
  }
  protected:
  explicit Acmbody4a(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcmmsgcntrFieldNumber = 1,
    kAcmcrcFieldNumber = 2,
    kLatitudeaFieldNumber = 3,
    kYawrateFieldNumber = 4,
    kSeatoccptfrntlestsFieldNumber = 5,
  };
  // optional int32 acmmsgcntr = 1;
  bool has_acmmsgcntr() const;
  private:
  bool _internal_has_acmmsgcntr() const;
  public:
  void clear_acmmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 acmmsgcntr() const;
  void set_acmmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acmmsgcntr() const;
  void _internal_set_acmmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 acmcrc = 2;
  bool has_acmcrc() const;
  private:
  bool _internal_has_acmcrc() const;
  public:
  void clear_acmcrc();
  ::PROTOBUF_NAMESPACE_ID::int32 acmcrc() const;
  void set_acmcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acmcrc() const;
  void _internal_set_acmcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double latitudea = 3;
  bool has_latitudea() const;
  private:
  bool _internal_has_latitudea() const;
  public:
  void clear_latitudea();
  double latitudea() const;
  void set_latitudea(double value);
  private:
  double _internal_latitudea() const;
  void _internal_set_latitudea(double value);
  public:

  // optional double yawrate = 4;
  bool has_yawrate() const;
  private:
  bool _internal_has_yawrate() const;
  public:
  void clear_yawrate();
  double yawrate() const;
  void set_yawrate(double value);
  private:
  double _internal_yawrate() const;
  void _internal_set_yawrate(double value);
  public:

  // optional bool seatoccptfrntlests = 5;
  bool has_seatoccptfrntlests() const;
  private:
  bool _internal_has_seatoccptfrntlests() const;
  public:
  void clear_seatoccptfrntlests();
  bool seatoccptfrntlests() const;
  void set_seatoccptfrntlests(bool value);
  private:
  bool _internal_seatoccptfrntlests() const;
  void _internal_set_seatoccptfrntlests(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Acmbody4a)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 acmmsgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 acmcrc_;
  double latitudea_;
  double yawrate_;
  bool seatoccptfrntlests_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Whlspdfront51 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Whlspdfront51) */ {
 public:
  inline Whlspdfront51() : Whlspdfront51(nullptr) {}
  virtual ~Whlspdfront51();

  Whlspdfront51(const Whlspdfront51& from);
  Whlspdfront51(Whlspdfront51&& from) noexcept
    : Whlspdfront51() {
    *this = ::std::move(from);
  }

  inline Whlspdfront51& operator=(const Whlspdfront51& from) {
    CopyFrom(from);
    return *this;
  }
  inline Whlspdfront51& operator=(Whlspdfront51&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Whlspdfront51& default_instance();

  static inline const Whlspdfront51* internal_default_instance() {
    return reinterpret_cast<const Whlspdfront51*>(
               &_Whlspdfront51_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Whlspdfront51& a, Whlspdfront51& b) {
    a.Swap(&b);
  }
  inline void Swap(Whlspdfront51* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Whlspdfront51* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Whlspdfront51* New() const final {
    return CreateMaybeMessage<Whlspdfront51>(nullptr);
  }

  Whlspdfront51* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Whlspdfront51>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Whlspdfront51& from);
  void MergeFrom(const Whlspdfront51& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Whlspdfront51* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Whlspdfront51";
  }
  protected:
  explicit Whlspdfront51(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Whlspdfront51_WhlspdfrstsType WhlspdfrstsType;
  static constexpr WhlspdfrstsType WhlspdFRstsvalid =
    Whlspdfront51_WhlspdfrstsType_WhlspdFRstsvalid;
  static constexpr WhlspdfrstsType WhlspdFRstsinvalid =
    Whlspdfront51_WhlspdfrstsType_WhlspdFRstsinvalid;
  static constexpr WhlspdfrstsType WhlspdFRstsinitial =
    Whlspdfront51_WhlspdfrstsType_WhlspdFRstsinitial;
  static constexpr WhlspdfrstsType WhlspdFRstsreserved =
    Whlspdfront51_WhlspdfrstsType_WhlspdFRstsreserved;
  static inline bool WhlspdfrstsType_IsValid(int value) {
    return Whlspdfront51_WhlspdfrstsType_IsValid(value);
  }
  static constexpr WhlspdfrstsType WhlspdfrstsType_MIN =
    Whlspdfront51_WhlspdfrstsType_WhlspdfrstsType_MIN;
  static constexpr WhlspdfrstsType WhlspdfrstsType_MAX =
    Whlspdfront51_WhlspdfrstsType_WhlspdfrstsType_MAX;
  static constexpr int WhlspdfrstsType_ARRAYSIZE =
    Whlspdfront51_WhlspdfrstsType_WhlspdfrstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlspdfrstsType_descriptor() {
    return Whlspdfront51_WhlspdfrstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlspdfrstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlspdfrstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlspdfrstsType_Name.");
    return Whlspdfront51_WhlspdfrstsType_Name(enum_t_value);
  }
  static inline bool WhlspdfrstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlspdfrstsType* value) {
    return Whlspdfront51_WhlspdfrstsType_Parse(name, value);
  }

  typedef Whlspdfront51_WhlspdfrdirType WhlspdfrdirType;
  static constexpr WhlspdfrdirType WhlspdFRdirstandstill =
    Whlspdfront51_WhlspdfrdirType_WhlspdFRdirstandstill;
  static constexpr WhlspdfrdirType WhlspdFRdirforward =
    Whlspdfront51_WhlspdfrdirType_WhlspdFRdirforward;
  static constexpr WhlspdfrdirType WhlspdFRdirbackward =
    Whlspdfront51_WhlspdfrdirType_WhlspdFRdirbackward;
  static constexpr WhlspdfrdirType WhlspdFRdirinvalid =
    Whlspdfront51_WhlspdfrdirType_WhlspdFRdirinvalid;
  static inline bool WhlspdfrdirType_IsValid(int value) {
    return Whlspdfront51_WhlspdfrdirType_IsValid(value);
  }
  static constexpr WhlspdfrdirType WhlspdfrdirType_MIN =
    Whlspdfront51_WhlspdfrdirType_WhlspdfrdirType_MIN;
  static constexpr WhlspdfrdirType WhlspdfrdirType_MAX =
    Whlspdfront51_WhlspdfrdirType_WhlspdfrdirType_MAX;
  static constexpr int WhlspdfrdirType_ARRAYSIZE =
    Whlspdfront51_WhlspdfrdirType_WhlspdfrdirType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlspdfrdirType_descriptor() {
    return Whlspdfront51_WhlspdfrdirType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlspdfrdirType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlspdfrdirType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlspdfrdirType_Name.");
    return Whlspdfront51_WhlspdfrdirType_Name(enum_t_value);
  }
  static inline bool WhlspdfrdirType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlspdfrdirType* value) {
    return Whlspdfront51_WhlspdfrdirType_Parse(name, value);
  }

  typedef Whlspdfront51_WhlspdflstsType WhlspdflstsType;
  static constexpr WhlspdflstsType WhlspdFLstsvalid =
    Whlspdfront51_WhlspdflstsType_WhlspdFLstsvalid;
  static constexpr WhlspdflstsType WhlspdFLstsinvalid =
    Whlspdfront51_WhlspdflstsType_WhlspdFLstsinvalid;
  static constexpr WhlspdflstsType WhlspdFLstsinitial =
    Whlspdfront51_WhlspdflstsType_WhlspdFLstsinitial;
  static constexpr WhlspdflstsType WhlspdFLstsreserved =
    Whlspdfront51_WhlspdflstsType_WhlspdFLstsreserved;
  static inline bool WhlspdflstsType_IsValid(int value) {
    return Whlspdfront51_WhlspdflstsType_IsValid(value);
  }
  static constexpr WhlspdflstsType WhlspdflstsType_MIN =
    Whlspdfront51_WhlspdflstsType_WhlspdflstsType_MIN;
  static constexpr WhlspdflstsType WhlspdflstsType_MAX =
    Whlspdfront51_WhlspdflstsType_WhlspdflstsType_MAX;
  static constexpr int WhlspdflstsType_ARRAYSIZE =
    Whlspdfront51_WhlspdflstsType_WhlspdflstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlspdflstsType_descriptor() {
    return Whlspdfront51_WhlspdflstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlspdflstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlspdflstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlspdflstsType_Name.");
    return Whlspdfront51_WhlspdflstsType_Name(enum_t_value);
  }
  static inline bool WhlspdflstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlspdflstsType* value) {
    return Whlspdfront51_WhlspdflstsType_Parse(name, value);
  }

  typedef Whlspdfront51_WhlspdfldirType WhlspdfldirType;
  static constexpr WhlspdfldirType WhlspdFLdirstandstill =
    Whlspdfront51_WhlspdfldirType_WhlspdFLdirstandstill;
  static constexpr WhlspdfldirType WhlspdFLdirforward =
    Whlspdfront51_WhlspdfldirType_WhlspdFLdirforward;
  static constexpr WhlspdfldirType WhlspdFLdirbackward =
    Whlspdfront51_WhlspdfldirType_WhlspdFLdirbackward;
  static constexpr WhlspdfldirType WhlspdFLdirinvalid =
    Whlspdfront51_WhlspdfldirType_WhlspdFLdirinvalid;
  static inline bool WhlspdfldirType_IsValid(int value) {
    return Whlspdfront51_WhlspdfldirType_IsValid(value);
  }
  static constexpr WhlspdfldirType WhlspdfldirType_MIN =
    Whlspdfront51_WhlspdfldirType_WhlspdfldirType_MIN;
  static constexpr WhlspdfldirType WhlspdfldirType_MAX =
    Whlspdfront51_WhlspdfldirType_WhlspdfldirType_MAX;
  static constexpr int WhlspdfldirType_ARRAYSIZE =
    Whlspdfront51_WhlspdfldirType_WhlspdfldirType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlspdfldirType_descriptor() {
    return Whlspdfront51_WhlspdfldirType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlspdfldirType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlspdfldirType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlspdfldirType_Name.");
    return Whlspdfront51_WhlspdfldirType_Name(enum_t_value);
  }
  static inline bool WhlspdfldirType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlspdfldirType* value) {
    return Whlspdfront51_WhlspdfldirType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWfmsgcntrFieldNumber = 1,
    kWfcrcFieldNumber = 2,
    kWhlspdfrstsFieldNumber = 3,
    kWhlspdfrdirFieldNumber = 4,
    kWhlspdfrFieldNumber = 5,
    kWhlspdflstsFieldNumber = 6,
    kWhlspdfldirFieldNumber = 7,
    kWhlspdflFieldNumber = 8,
  };
  // optional int32 wfmsgcntr = 1;
  bool has_wfmsgcntr() const;
  private:
  bool _internal_has_wfmsgcntr() const;
  public:
  void clear_wfmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 wfmsgcntr() const;
  void set_wfmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wfmsgcntr() const;
  void _internal_set_wfmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 wfcrc = 2;
  bool has_wfcrc() const;
  private:
  bool _internal_has_wfcrc() const;
  public:
  void clear_wfcrc();
  ::PROTOBUF_NAMESPACE_ID::int32 wfcrc() const;
  void set_wfcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wfcrc() const;
  void _internal_set_wfcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Whlspdfront51.WhlspdfrstsType whlspdfrsts = 3;
  bool has_whlspdfrsts() const;
  private:
  bool _internal_has_whlspdfrsts() const;
  public:
  void clear_whlspdfrsts();
  ::apollo::canbus::Whlspdfront51_WhlspdfrstsType whlspdfrsts() const;
  void set_whlspdfrsts(::apollo::canbus::Whlspdfront51_WhlspdfrstsType value);
  private:
  ::apollo::canbus::Whlspdfront51_WhlspdfrstsType _internal_whlspdfrsts() const;
  void _internal_set_whlspdfrsts(::apollo::canbus::Whlspdfront51_WhlspdfrstsType value);
  public:

  // optional .apollo.canbus.Whlspdfront51.WhlspdfrdirType whlspdfrdir = 4;
  bool has_whlspdfrdir() const;
  private:
  bool _internal_has_whlspdfrdir() const;
  public:
  void clear_whlspdfrdir();
  ::apollo::canbus::Whlspdfront51_WhlspdfrdirType whlspdfrdir() const;
  void set_whlspdfrdir(::apollo::canbus::Whlspdfront51_WhlspdfrdirType value);
  private:
  ::apollo::canbus::Whlspdfront51_WhlspdfrdirType _internal_whlspdfrdir() const;
  void _internal_set_whlspdfrdir(::apollo::canbus::Whlspdfront51_WhlspdfrdirType value);
  public:

  // optional double whlspdfr = 5;
  bool has_whlspdfr() const;
  private:
  bool _internal_has_whlspdfr() const;
  public:
  void clear_whlspdfr();
  double whlspdfr() const;
  void set_whlspdfr(double value);
  private:
  double _internal_whlspdfr() const;
  void _internal_set_whlspdfr(double value);
  public:

  // optional .apollo.canbus.Whlspdfront51.WhlspdflstsType whlspdflsts = 6;
  bool has_whlspdflsts() const;
  private:
  bool _internal_has_whlspdflsts() const;
  public:
  void clear_whlspdflsts();
  ::apollo::canbus::Whlspdfront51_WhlspdflstsType whlspdflsts() const;
  void set_whlspdflsts(::apollo::canbus::Whlspdfront51_WhlspdflstsType value);
  private:
  ::apollo::canbus::Whlspdfront51_WhlspdflstsType _internal_whlspdflsts() const;
  void _internal_set_whlspdflsts(::apollo::canbus::Whlspdfront51_WhlspdflstsType value);
  public:

  // optional .apollo.canbus.Whlspdfront51.WhlspdfldirType whlspdfldir = 7;
  bool has_whlspdfldir() const;
  private:
  bool _internal_has_whlspdfldir() const;
  public:
  void clear_whlspdfldir();
  ::apollo::canbus::Whlspdfront51_WhlspdfldirType whlspdfldir() const;
  void set_whlspdfldir(::apollo::canbus::Whlspdfront51_WhlspdfldirType value);
  private:
  ::apollo::canbus::Whlspdfront51_WhlspdfldirType _internal_whlspdfldir() const;
  void _internal_set_whlspdfldir(::apollo::canbus::Whlspdfront51_WhlspdfldirType value);
  public:

  // optional double whlspdfl = 8;
  bool has_whlspdfl() const;
  private:
  bool _internal_has_whlspdfl() const;
  public:
  void clear_whlspdfl();
  double whlspdfl() const;
  void set_whlspdfl(double value);
  private:
  double _internal_whlspdfl() const;
  void _internal_set_whlspdfl(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Whlspdfront51)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 wfmsgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 wfcrc_;
  int whlspdfrsts_;
  int whlspdfrdir_;
  double whlspdfr_;
  int whlspdflsts_;
  int whlspdfldir_;
  double whlspdfl_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Whlspdrear52 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Whlspdrear52) */ {
 public:
  inline Whlspdrear52() : Whlspdrear52(nullptr) {}
  virtual ~Whlspdrear52();

  Whlspdrear52(const Whlspdrear52& from);
  Whlspdrear52(Whlspdrear52&& from) noexcept
    : Whlspdrear52() {
    *this = ::std::move(from);
  }

  inline Whlspdrear52& operator=(const Whlspdrear52& from) {
    CopyFrom(from);
    return *this;
  }
  inline Whlspdrear52& operator=(Whlspdrear52&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Whlspdrear52& default_instance();

  static inline const Whlspdrear52* internal_default_instance() {
    return reinterpret_cast<const Whlspdrear52*>(
               &_Whlspdrear52_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Whlspdrear52& a, Whlspdrear52& b) {
    a.Swap(&b);
  }
  inline void Swap(Whlspdrear52* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Whlspdrear52* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Whlspdrear52* New() const final {
    return CreateMaybeMessage<Whlspdrear52>(nullptr);
  }

  Whlspdrear52* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Whlspdrear52>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Whlspdrear52& from);
  void MergeFrom(const Whlspdrear52& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Whlspdrear52* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Whlspdrear52";
  }
  protected:
  explicit Whlspdrear52(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Whlspdrear52_WhlspdrrstsType WhlspdrrstsType;
  static constexpr WhlspdrrstsType WhlspdRRstsvalid =
    Whlspdrear52_WhlspdrrstsType_WhlspdRRstsvalid;
  static constexpr WhlspdrrstsType WhlspdRRstsinvalid =
    Whlspdrear52_WhlspdrrstsType_WhlspdRRstsinvalid;
  static constexpr WhlspdrrstsType WhlspdRRstsinitial =
    Whlspdrear52_WhlspdrrstsType_WhlspdRRstsinitial;
  static constexpr WhlspdrrstsType WhlspdRRstsreserved =
    Whlspdrear52_WhlspdrrstsType_WhlspdRRstsreserved;
  static inline bool WhlspdrrstsType_IsValid(int value) {
    return Whlspdrear52_WhlspdrrstsType_IsValid(value);
  }
  static constexpr WhlspdrrstsType WhlspdrrstsType_MIN =
    Whlspdrear52_WhlspdrrstsType_WhlspdrrstsType_MIN;
  static constexpr WhlspdrrstsType WhlspdrrstsType_MAX =
    Whlspdrear52_WhlspdrrstsType_WhlspdrrstsType_MAX;
  static constexpr int WhlspdrrstsType_ARRAYSIZE =
    Whlspdrear52_WhlspdrrstsType_WhlspdrrstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlspdrrstsType_descriptor() {
    return Whlspdrear52_WhlspdrrstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlspdrrstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlspdrrstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlspdrrstsType_Name.");
    return Whlspdrear52_WhlspdrrstsType_Name(enum_t_value);
  }
  static inline bool WhlspdrrstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlspdrrstsType* value) {
    return Whlspdrear52_WhlspdrrstsType_Parse(name, value);
  }

  typedef Whlspdrear52_WhlspdrrdirType WhlspdrrdirType;
  static constexpr WhlspdrrdirType WhlspdRRdirstandstill =
    Whlspdrear52_WhlspdrrdirType_WhlspdRRdirstandstill;
  static constexpr WhlspdrrdirType WhlspdRRdirforward =
    Whlspdrear52_WhlspdrrdirType_WhlspdRRdirforward;
  static constexpr WhlspdrrdirType WhlspdRRdirbackward =
    Whlspdrear52_WhlspdrrdirType_WhlspdRRdirbackward;
  static constexpr WhlspdrrdirType WhlspdRRdirinvalid =
    Whlspdrear52_WhlspdrrdirType_WhlspdRRdirinvalid;
  static inline bool WhlspdrrdirType_IsValid(int value) {
    return Whlspdrear52_WhlspdrrdirType_IsValid(value);
  }
  static constexpr WhlspdrrdirType WhlspdrrdirType_MIN =
    Whlspdrear52_WhlspdrrdirType_WhlspdrrdirType_MIN;
  static constexpr WhlspdrrdirType WhlspdrrdirType_MAX =
    Whlspdrear52_WhlspdrrdirType_WhlspdrrdirType_MAX;
  static constexpr int WhlspdrrdirType_ARRAYSIZE =
    Whlspdrear52_WhlspdrrdirType_WhlspdrrdirType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlspdrrdirType_descriptor() {
    return Whlspdrear52_WhlspdrrdirType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlspdrrdirType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlspdrrdirType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlspdrrdirType_Name.");
    return Whlspdrear52_WhlspdrrdirType_Name(enum_t_value);
  }
  static inline bool WhlspdrrdirType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlspdrrdirType* value) {
    return Whlspdrear52_WhlspdrrdirType_Parse(name, value);
  }

  typedef Whlspdrear52_WhlspdrlstsType WhlspdrlstsType;
  static constexpr WhlspdrlstsType WhlspdRLstsvalid =
    Whlspdrear52_WhlspdrlstsType_WhlspdRLstsvalid;
  static constexpr WhlspdrlstsType WhlspdRLstsinvalid =
    Whlspdrear52_WhlspdrlstsType_WhlspdRLstsinvalid;
  static constexpr WhlspdrlstsType WhlspdRLstsinitial =
    Whlspdrear52_WhlspdrlstsType_WhlspdRLstsinitial;
  static constexpr WhlspdrlstsType WhlspdRLstsreserved =
    Whlspdrear52_WhlspdrlstsType_WhlspdRLstsreserved;
  static inline bool WhlspdrlstsType_IsValid(int value) {
    return Whlspdrear52_WhlspdrlstsType_IsValid(value);
  }
  static constexpr WhlspdrlstsType WhlspdrlstsType_MIN =
    Whlspdrear52_WhlspdrlstsType_WhlspdrlstsType_MIN;
  static constexpr WhlspdrlstsType WhlspdrlstsType_MAX =
    Whlspdrear52_WhlspdrlstsType_WhlspdrlstsType_MAX;
  static constexpr int WhlspdrlstsType_ARRAYSIZE =
    Whlspdrear52_WhlspdrlstsType_WhlspdrlstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlspdrlstsType_descriptor() {
    return Whlspdrear52_WhlspdrlstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlspdrlstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlspdrlstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlspdrlstsType_Name.");
    return Whlspdrear52_WhlspdrlstsType_Name(enum_t_value);
  }
  static inline bool WhlspdrlstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlspdrlstsType* value) {
    return Whlspdrear52_WhlspdrlstsType_Parse(name, value);
  }

  typedef Whlspdrear52_WhlspdrldirType WhlspdrldirType;
  static constexpr WhlspdrldirType WhlspdRLdirstandstill =
    Whlspdrear52_WhlspdrldirType_WhlspdRLdirstandstill;
  static constexpr WhlspdrldirType WhlspdRLdirforward =
    Whlspdrear52_WhlspdrldirType_WhlspdRLdirforward;
  static constexpr WhlspdrldirType WhlspdRLdirbackward =
    Whlspdrear52_WhlspdrldirType_WhlspdRLdirbackward;
  static constexpr WhlspdrldirType WhlspdRLdirinvalid =
    Whlspdrear52_WhlspdrldirType_WhlspdRLdirinvalid;
  static inline bool WhlspdrldirType_IsValid(int value) {
    return Whlspdrear52_WhlspdrldirType_IsValid(value);
  }
  static constexpr WhlspdrldirType WhlspdrldirType_MIN =
    Whlspdrear52_WhlspdrldirType_WhlspdrldirType_MIN;
  static constexpr WhlspdrldirType WhlspdrldirType_MAX =
    Whlspdrear52_WhlspdrldirType_WhlspdrldirType_MAX;
  static constexpr int WhlspdrldirType_ARRAYSIZE =
    Whlspdrear52_WhlspdrldirType_WhlspdrldirType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlspdrldirType_descriptor() {
    return Whlspdrear52_WhlspdrldirType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlspdrldirType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlspdrldirType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlspdrldirType_Name.");
    return Whlspdrear52_WhlspdrldirType_Name(enum_t_value);
  }
  static inline bool WhlspdrldirType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlspdrldirType* value) {
    return Whlspdrear52_WhlspdrldirType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWrcrcFieldNumber = 1,
    kWrmsgcntrFieldNumber = 2,
    kWhlspdrrstsFieldNumber = 3,
    kWhlspdrrdirFieldNumber = 4,
    kWhlspdrrFieldNumber = 5,
    kWhlspdrlstsFieldNumber = 6,
    kWhlspdrldirFieldNumber = 7,
    kWhlspdrlFieldNumber = 8,
  };
  // optional int32 wrcrc = 1;
  bool has_wrcrc() const;
  private:
  bool _internal_has_wrcrc() const;
  public:
  void clear_wrcrc();
  ::PROTOBUF_NAMESPACE_ID::int32 wrcrc() const;
  void set_wrcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrcrc() const;
  void _internal_set_wrcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 wrmsgcntr = 2;
  bool has_wrmsgcntr() const;
  private:
  bool _internal_has_wrmsgcntr() const;
  public:
  void clear_wrmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 wrmsgcntr() const;
  void set_wrmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wrmsgcntr() const;
  void _internal_set_wrmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Whlspdrear52.WhlspdrrstsType whlspdrrsts = 3;
  bool has_whlspdrrsts() const;
  private:
  bool _internal_has_whlspdrrsts() const;
  public:
  void clear_whlspdrrsts();
  ::apollo::canbus::Whlspdrear52_WhlspdrrstsType whlspdrrsts() const;
  void set_whlspdrrsts(::apollo::canbus::Whlspdrear52_WhlspdrrstsType value);
  private:
  ::apollo::canbus::Whlspdrear52_WhlspdrrstsType _internal_whlspdrrsts() const;
  void _internal_set_whlspdrrsts(::apollo::canbus::Whlspdrear52_WhlspdrrstsType value);
  public:

  // optional .apollo.canbus.Whlspdrear52.WhlspdrrdirType whlspdrrdir = 4;
  bool has_whlspdrrdir() const;
  private:
  bool _internal_has_whlspdrrdir() const;
  public:
  void clear_whlspdrrdir();
  ::apollo::canbus::Whlspdrear52_WhlspdrrdirType whlspdrrdir() const;
  void set_whlspdrrdir(::apollo::canbus::Whlspdrear52_WhlspdrrdirType value);
  private:
  ::apollo::canbus::Whlspdrear52_WhlspdrrdirType _internal_whlspdrrdir() const;
  void _internal_set_whlspdrrdir(::apollo::canbus::Whlspdrear52_WhlspdrrdirType value);
  public:

  // optional double whlspdrr = 5;
  bool has_whlspdrr() const;
  private:
  bool _internal_has_whlspdrr() const;
  public:
  void clear_whlspdrr();
  double whlspdrr() const;
  void set_whlspdrr(double value);
  private:
  double _internal_whlspdrr() const;
  void _internal_set_whlspdrr(double value);
  public:

  // optional .apollo.canbus.Whlspdrear52.WhlspdrlstsType whlspdrlsts = 6;
  bool has_whlspdrlsts() const;
  private:
  bool _internal_has_whlspdrlsts() const;
  public:
  void clear_whlspdrlsts();
  ::apollo::canbus::Whlspdrear52_WhlspdrlstsType whlspdrlsts() const;
  void set_whlspdrlsts(::apollo::canbus::Whlspdrear52_WhlspdrlstsType value);
  private:
  ::apollo::canbus::Whlspdrear52_WhlspdrlstsType _internal_whlspdrlsts() const;
  void _internal_set_whlspdrlsts(::apollo::canbus::Whlspdrear52_WhlspdrlstsType value);
  public:

  // optional .apollo.canbus.Whlspdrear52.WhlspdrldirType whlspdrldir = 7;
  bool has_whlspdrldir() const;
  private:
  bool _internal_has_whlspdrldir() const;
  public:
  void clear_whlspdrldir();
  ::apollo::canbus::Whlspdrear52_WhlspdrldirType whlspdrldir() const;
  void set_whlspdrldir(::apollo::canbus::Whlspdrear52_WhlspdrldirType value);
  private:
  ::apollo::canbus::Whlspdrear52_WhlspdrldirType _internal_whlspdrldir() const;
  void _internal_set_whlspdrldir(::apollo::canbus::Whlspdrear52_WhlspdrldirType value);
  public:

  // optional double whlspdrl = 8;
  bool has_whlspdrl() const;
  private:
  bool _internal_has_whlspdrl() const;
  public:
  void clear_whlspdrl();
  double whlspdrl() const;
  void set_whlspdrl(double value);
  private:
  double _internal_whlspdrl() const;
  void _internal_set_whlspdrl(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Whlspdrear52)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrcrc_;
  ::PROTOBUF_NAMESPACE_ID::int32 wrmsgcntr_;
  int whlspdrrsts_;
  int whlspdrrdir_;
  double whlspdrr_;
  int whlspdrlsts_;
  int whlspdrldir_;
  double whlspdrl_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Bcusts5e PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Bcusts5e) */ {
 public:
  inline Bcusts5e() : Bcusts5e(nullptr) {}
  virtual ~Bcusts5e();

  Bcusts5e(const Bcusts5e& from);
  Bcusts5e(Bcusts5e&& from) noexcept
    : Bcusts5e() {
    *this = ::std::move(from);
  }

  inline Bcusts5e& operator=(const Bcusts5e& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bcusts5e& operator=(Bcusts5e&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bcusts5e& default_instance();

  static inline const Bcusts5e* internal_default_instance() {
    return reinterpret_cast<const Bcusts5e*>(
               &_Bcusts5e_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Bcusts5e& a, Bcusts5e& b) {
    a.Swap(&b);
  }
  inline void Swap(Bcusts5e* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bcusts5e* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bcusts5e* New() const final {
    return CreateMaybeMessage<Bcusts5e>(nullptr);
  }

  Bcusts5e* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bcusts5e>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bcusts5e& from);
  void MergeFrom(const Bcusts5e& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bcusts5e* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Bcusts5e";
  }
  protected:
  explicit Bcusts5e(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Bcusts5e_TcsactvType TcsactvType;
  static constexpr TcsactvType TCSActvNotActive =
    Bcusts5e_TcsactvType_TCSActvNotActive;
  static constexpr TcsactvType TCSActvActive =
    Bcusts5e_TcsactvType_TCSActvActive;
  static inline bool TcsactvType_IsValid(int value) {
    return Bcusts5e_TcsactvType_IsValid(value);
  }
  static constexpr TcsactvType TcsactvType_MIN =
    Bcusts5e_TcsactvType_TcsactvType_MIN;
  static constexpr TcsactvType TcsactvType_MAX =
    Bcusts5e_TcsactvType_TcsactvType_MAX;
  static constexpr int TcsactvType_ARRAYSIZE =
    Bcusts5e_TcsactvType_TcsactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TcsactvType_descriptor() {
    return Bcusts5e_TcsactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& TcsactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TcsactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TcsactvType_Name.");
    return Bcusts5e_TcsactvType_Name(enum_t_value);
  }
  static inline bool TcsactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TcsactvType* value) {
    return Bcusts5e_TcsactvType_Parse(name, value);
  }

  typedef Bcusts5e_ScmavlType ScmavlType;
  static constexpr ScmavlType SCMAvlNotAvailable =
    Bcusts5e_ScmavlType_SCMAvlNotAvailable;
  static constexpr ScmavlType SCMAvlavailable =
    Bcusts5e_ScmavlType_SCMAvlavailable;
  static inline bool ScmavlType_IsValid(int value) {
    return Bcusts5e_ScmavlType_IsValid(value);
  }
  static constexpr ScmavlType ScmavlType_MIN =
    Bcusts5e_ScmavlType_ScmavlType_MIN;
  static constexpr ScmavlType ScmavlType_MAX =
    Bcusts5e_ScmavlType_ScmavlType_MAX;
  static constexpr int ScmavlType_ARRAYSIZE =
    Bcusts5e_ScmavlType_ScmavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScmavlType_descriptor() {
    return Bcusts5e_ScmavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& ScmavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScmavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScmavlType_Name.");
    return Bcusts5e_ScmavlType_Name(enum_t_value);
  }
  static inline bool ScmavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScmavlType* value) {
    return Bcusts5e_ScmavlType_Parse(name, value);
  }

  typedef Bcusts5e_HfcactvType HfcactvType;
  static constexpr HfcactvType HFCActvNotActive =
    Bcusts5e_HfcactvType_HFCActvNotActive;
  static constexpr HfcactvType HFCActvActive =
    Bcusts5e_HfcactvType_HFCActvActive;
  static inline bool HfcactvType_IsValid(int value) {
    return Bcusts5e_HfcactvType_IsValid(value);
  }
  static constexpr HfcactvType HfcactvType_MIN =
    Bcusts5e_HfcactvType_HfcactvType_MIN;
  static constexpr HfcactvType HfcactvType_MAX =
    Bcusts5e_HfcactvType_HfcactvType_MAX;
  static constexpr int HfcactvType_ARRAYSIZE =
    Bcusts5e_HfcactvType_HfcactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HfcactvType_descriptor() {
    return Bcusts5e_HfcactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& HfcactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HfcactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HfcactvType_Name.");
    return Bcusts5e_HfcactvType_Name(enum_t_value);
  }
  static inline bool HfcactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HfcactvType* value) {
    return Bcusts5e_HfcactvType_Parse(name, value);
  }

  typedef Bcusts5e_VdcactvType VdcactvType;
  static constexpr VdcactvType VDCActvNotActive =
    Bcusts5e_VdcactvType_VDCActvNotActive;
  static constexpr VdcactvType VDCActvActive =
    Bcusts5e_VdcactvType_VDCActvActive;
  static inline bool VdcactvType_IsValid(int value) {
    return Bcusts5e_VdcactvType_IsValid(value);
  }
  static constexpr VdcactvType VdcactvType_MIN =
    Bcusts5e_VdcactvType_VdcactvType_MIN;
  static constexpr VdcactvType VdcactvType_MAX =
    Bcusts5e_VdcactvType_VdcactvType_MAX;
  static constexpr int VdcactvType_ARRAYSIZE =
    Bcusts5e_VdcactvType_VdcactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VdcactvType_descriptor() {
    return Bcusts5e_VdcactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& VdcactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VdcactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VdcactvType_Name.");
    return Bcusts5e_VdcactvType_Name(enum_t_value);
  }
  static inline bool VdcactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VdcactvType* value) {
    return Bcusts5e_VdcactvType_Parse(name, value);
  }

  typedef Bcusts5e_AvhstsType AvhstsType;
  static constexpr AvhstsType AVHStsFailureAVHLampOnWithYellowColor =
    Bcusts5e_AvhstsType_AVHStsFailureAVHLampOnWithYellowColor;
  static constexpr AvhstsType AVHStsStandbyAVHLampOff =
    Bcusts5e_AvhstsType_AVHStsStandbyAVHLampOff;
  static constexpr AvhstsType AVHStsActiveAVHLampOnWithGreenColor =
    Bcusts5e_AvhstsType_AVHStsActiveAVHLampOnWithGreenColor;
  static constexpr AvhstsType AVHStsReserved =
    Bcusts5e_AvhstsType_AVHStsReserved;
  static inline bool AvhstsType_IsValid(int value) {
    return Bcusts5e_AvhstsType_IsValid(value);
  }
  static constexpr AvhstsType AvhstsType_MIN =
    Bcusts5e_AvhstsType_AvhstsType_MIN;
  static constexpr AvhstsType AvhstsType_MAX =
    Bcusts5e_AvhstsType_AvhstsType_MAX;
  static constexpr int AvhstsType_ARRAYSIZE =
    Bcusts5e_AvhstsType_AvhstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AvhstsType_descriptor() {
    return Bcusts5e_AvhstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AvhstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AvhstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AvhstsType_Name.");
    return Bcusts5e_AvhstsType_Name(enum_t_value);
  }
  static inline bool AvhstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AvhstsType* value) {
    return Bcusts5e_AvhstsType_Parse(name, value);
  }

  typedef Bcusts5e_AutobrkgactvType AutobrkgactvType;
  static constexpr AutobrkgactvType AutoBrkgActvNotActive =
    Bcusts5e_AutobrkgactvType_AutoBrkgActvNotActive;
  static constexpr AutobrkgactvType AutoBrkgActvActive =
    Bcusts5e_AutobrkgactvType_AutoBrkgActvActive;
  static inline bool AutobrkgactvType_IsValid(int value) {
    return Bcusts5e_AutobrkgactvType_IsValid(value);
  }
  static constexpr AutobrkgactvType AutobrkgactvType_MIN =
    Bcusts5e_AutobrkgactvType_AutobrkgactvType_MIN;
  static constexpr AutobrkgactvType AutobrkgactvType_MAX =
    Bcusts5e_AutobrkgactvType_AutobrkgactvType_MAX;
  static constexpr int AutobrkgactvType_ARRAYSIZE =
    Bcusts5e_AutobrkgactvType_AutobrkgactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AutobrkgactvType_descriptor() {
    return Bcusts5e_AutobrkgactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& AutobrkgactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutobrkgactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutobrkgactvType_Name.");
    return Bcusts5e_AutobrkgactvType_Name(enum_t_value);
  }
  static inline bool AutobrkgactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AutobrkgactvType* value) {
    return Bcusts5e_AutobrkgactvType_Parse(name, value);
  }

  typedef Bcusts5e_VdcdeactvType VdcdeactvType;
  static constexpr VdcdeactvType VDCDeactvNotDeactivated =
    Bcusts5e_VdcdeactvType_VDCDeactvNotDeactivated;
  static constexpr VdcdeactvType VDCDeactvDeactivated =
    Bcusts5e_VdcdeactvType_VDCDeactvDeactivated;
  static inline bool VdcdeactvType_IsValid(int value) {
    return Bcusts5e_VdcdeactvType_IsValid(value);
  }
  static constexpr VdcdeactvType VdcdeactvType_MIN =
    Bcusts5e_VdcdeactvType_VdcdeactvType_MIN;
  static constexpr VdcdeactvType VdcdeactvType_MAX =
    Bcusts5e_VdcdeactvType_VdcdeactvType_MAX;
  static constexpr int VdcdeactvType_ARRAYSIZE =
    Bcusts5e_VdcdeactvType_VdcdeactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VdcdeactvType_descriptor() {
    return Bcusts5e_VdcdeactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& VdcdeactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VdcdeactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VdcdeactvType_Name.");
    return Bcusts5e_VdcdeactvType_Name(enum_t_value);
  }
  static inline bool VdcdeactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VdcdeactvType* value) {
    return Bcusts5e_VdcdeactvType_Parse(name, value);
  }

  typedef Bcusts5e_AbaactvType AbaactvType;
  static constexpr AbaactvType ABAActvNotActive =
    Bcusts5e_AbaactvType_ABAActvNotActive;
  static constexpr AbaactvType ABAActvActive =
    Bcusts5e_AbaactvType_ABAActvActive;
  static inline bool AbaactvType_IsValid(int value) {
    return Bcusts5e_AbaactvType_IsValid(value);
  }
  static constexpr AbaactvType AbaactvType_MIN =
    Bcusts5e_AbaactvType_AbaactvType_MIN;
  static constexpr AbaactvType AbaactvType_MAX =
    Bcusts5e_AbaactvType_AbaactvType_MAX;
  static constexpr int AbaactvType_ARRAYSIZE =
    Bcusts5e_AbaactvType_AbaactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbaactvType_descriptor() {
    return Bcusts5e_AbaactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbaactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbaactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbaactvType_Name.");
    return Bcusts5e_AbaactvType_Name(enum_t_value);
  }
  static inline bool AbaactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbaactvType* value) {
    return Bcusts5e_AbaactvType_Parse(name, value);
  }

  typedef Bcusts5e_AutobrkgavlType AutobrkgavlType;
  static constexpr AutobrkgavlType AutoBrkgAvlNotAvailable =
    Bcusts5e_AutobrkgavlType_AutoBrkgAvlNotAvailable;
  static constexpr AutobrkgavlType AutoBrkgAvlAvailable =
    Bcusts5e_AutobrkgavlType_AutoBrkgAvlAvailable;
  static inline bool AutobrkgavlType_IsValid(int value) {
    return Bcusts5e_AutobrkgavlType_IsValid(value);
  }
  static constexpr AutobrkgavlType AutobrkgavlType_MIN =
    Bcusts5e_AutobrkgavlType_AutobrkgavlType_MIN;
  static constexpr AutobrkgavlType AutobrkgavlType_MAX =
    Bcusts5e_AutobrkgavlType_AutobrkgavlType_MAX;
  static constexpr int AutobrkgavlType_ARRAYSIZE =
    Bcusts5e_AutobrkgavlType_AutobrkgavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AutobrkgavlType_descriptor() {
    return Bcusts5e_AutobrkgavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& AutobrkgavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutobrkgavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutobrkgavlType_Name.");
    return Bcusts5e_AutobrkgavlType_Name(enum_t_value);
  }
  static inline bool AutobrkgavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AutobrkgavlType* value) {
    return Bcusts5e_AutobrkgavlType_Parse(name, value);
  }

  typedef Bcusts5e_HbaactvType HbaactvType;
  static constexpr HbaactvType HBAActvNotActive =
    Bcusts5e_HbaactvType_HBAActvNotActive;
  static constexpr HbaactvType HBAActvActive =
    Bcusts5e_HbaactvType_HBAActvActive;
  static inline bool HbaactvType_IsValid(int value) {
    return Bcusts5e_HbaactvType_IsValid(value);
  }
  static constexpr HbaactvType HbaactvType_MIN =
    Bcusts5e_HbaactvType_HbaactvType_MIN;
  static constexpr HbaactvType HbaactvType_MAX =
    Bcusts5e_HbaactvType_HbaactvType_MAX;
  static constexpr int HbaactvType_ARRAYSIZE =
    Bcusts5e_HbaactvType_HbaactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HbaactvType_descriptor() {
    return Bcusts5e_HbaactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& HbaactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HbaactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HbaactvType_Name.");
    return Bcusts5e_HbaactvType_Name(enum_t_value);
  }
  static inline bool HbaactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HbaactvType* value) {
    return Bcusts5e_HbaactvType_Parse(name, value);
  }

  typedef Bcusts5e_AebavlType AebavlType;
  static constexpr AebavlType AEBAvlNotAvailable =
    Bcusts5e_AebavlType_AEBAvlNotAvailable;
  static constexpr AebavlType AEBAvlavailable =
    Bcusts5e_AebavlType_AEBAvlavailable;
  static inline bool AebavlType_IsValid(int value) {
    return Bcusts5e_AebavlType_IsValid(value);
  }
  static constexpr AebavlType AebavlType_MIN =
    Bcusts5e_AebavlType_AebavlType_MIN;
  static constexpr AebavlType AebavlType_MAX =
    Bcusts5e_AebavlType_AebavlType_MAX;
  static constexpr int AebavlType_ARRAYSIZE =
    Bcusts5e_AebavlType_AebavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AebavlType_descriptor() {
    return Bcusts5e_AebavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& AebavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AebavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AebavlType_Name.");
    return Bcusts5e_AebavlType_Name(enum_t_value);
  }
  static inline bool AebavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AebavlType* value) {
    return Bcusts5e_AebavlType_Parse(name, value);
  }

  typedef Bcusts5e_AebactvType AebactvType;
  static constexpr AebactvType AEBActvNotActive =
    Bcusts5e_AebactvType_AEBActvNotActive;
  static constexpr AebactvType AEBActvActive =
    Bcusts5e_AebactvType_AEBActvActive;
  static inline bool AebactvType_IsValid(int value) {
    return Bcusts5e_AebactvType_IsValid(value);
  }
  static constexpr AebactvType AebactvType_MIN =
    Bcusts5e_AebactvType_AebactvType_MIN;
  static constexpr AebactvType AebactvType_MAX =
    Bcusts5e_AebactvType_AebactvType_MAX;
  static constexpr int AebactvType_ARRAYSIZE =
    Bcusts5e_AebactvType_AebactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AebactvType_descriptor() {
    return Bcusts5e_AebactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& AebactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AebactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AebactvType_Name.");
    return Bcusts5e_AebactvType_Name(enum_t_value);
  }
  static inline bool AebactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AebactvType* value) {
    return Bcusts5e_AebactvType_Parse(name, value);
  }

  typedef Bcusts5e_CdpavailType CdpavailType;
  static constexpr CdpavailType CDPAvailNotAvailable =
    Bcusts5e_CdpavailType_CDPAvailNotAvailable;
  static constexpr CdpavailType CDPAvailavailable =
    Bcusts5e_CdpavailType_CDPAvailavailable;
  static inline bool CdpavailType_IsValid(int value) {
    return Bcusts5e_CdpavailType_IsValid(value);
  }
  static constexpr CdpavailType CdpavailType_MIN =
    Bcusts5e_CdpavailType_CdpavailType_MIN;
  static constexpr CdpavailType CdpavailType_MAX =
    Bcusts5e_CdpavailType_CdpavailType_MAX;
  static constexpr int CdpavailType_ARRAYSIZE =
    Bcusts5e_CdpavailType_CdpavailType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CdpavailType_descriptor() {
    return Bcusts5e_CdpavailType_descriptor();
  }
  template<typename T>
  static inline const std::string& CdpavailType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CdpavailType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CdpavailType_Name.");
    return Bcusts5e_CdpavailType_Name(enum_t_value);
  }
  static inline bool CdpavailType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CdpavailType* value) {
    return Bcusts5e_CdpavailType_Parse(name, value);
  }

  typedef Bcusts5e_AbaavlType AbaavlType;
  static constexpr AbaavlType ABAAvlNotAvailable =
    Bcusts5e_AbaavlType_ABAAvlNotAvailable;
  static constexpr AbaavlType ABAAvlavailable =
    Bcusts5e_AbaavlType_ABAAvlavailable;
  static inline bool AbaavlType_IsValid(int value) {
    return Bcusts5e_AbaavlType_IsValid(value);
  }
  static constexpr AbaavlType AbaavlType_MIN =
    Bcusts5e_AbaavlType_AbaavlType_MIN;
  static constexpr AbaavlType AbaavlType_MAX =
    Bcusts5e_AbaavlType_AbaavlType_MAX;
  static constexpr int AbaavlType_ARRAYSIZE =
    Bcusts5e_AbaavlType_AbaavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbaavlType_descriptor() {
    return Bcusts5e_AbaavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbaavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbaavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbaavlType_Name.");
    return Bcusts5e_AbaavlType_Name(enum_t_value);
  }
  static inline bool AbaavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbaavlType* value) {
    return Bcusts5e_AbaavlType_Parse(name, value);
  }

  typedef Bcusts5e_HdcstsType HdcstsType;
  static constexpr HdcstsType HDCStsOff =
    Bcusts5e_HdcstsType_HDCStsOff;
  static constexpr HdcstsType HDCStsFailure =
    Bcusts5e_HdcstsType_HDCStsFailure;
  static constexpr HdcstsType HDCStsStandby =
    Bcusts5e_HdcstsType_HDCStsStandby;
  static constexpr HdcstsType HDCStsActive =
    Bcusts5e_HdcstsType_HDCStsActive;
  static inline bool HdcstsType_IsValid(int value) {
    return Bcusts5e_HdcstsType_IsValid(value);
  }
  static constexpr HdcstsType HdcstsType_MIN =
    Bcusts5e_HdcstsType_HdcstsType_MIN;
  static constexpr HdcstsType HdcstsType_MAX =
    Bcusts5e_HdcstsType_HdcstsType_MAX;
  static constexpr int HdcstsType_ARRAYSIZE =
    Bcusts5e_HdcstsType_HdcstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HdcstsType_descriptor() {
    return Bcusts5e_HdcstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& HdcstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HdcstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HdcstsType_Name.");
    return Bcusts5e_HdcstsType_Name(enum_t_value);
  }
  static inline bool HdcstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HdcstsType* value) {
    return Bcusts5e_HdcstsType_Parse(name, value);
  }

  typedef Bcusts5e_TcsdeactvType TcsdeactvType;
  static constexpr TcsdeactvType TCSDeactvNotDeactivated =
    Bcusts5e_TcsdeactvType_TCSDeactvNotDeactivated;
  static constexpr TcsdeactvType TCSDeactvDeactivated =
    Bcusts5e_TcsdeactvType_TCSDeactvDeactivated;
  static inline bool TcsdeactvType_IsValid(int value) {
    return Bcusts5e_TcsdeactvType_IsValid(value);
  }
  static constexpr TcsdeactvType TcsdeactvType_MIN =
    Bcusts5e_TcsdeactvType_TcsdeactvType_MIN;
  static constexpr TcsdeactvType TcsdeactvType_MAX =
    Bcusts5e_TcsdeactvType_TcsdeactvType_MAX;
  static constexpr int TcsdeactvType_ARRAYSIZE =
    Bcusts5e_TcsdeactvType_TcsdeactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TcsdeactvType_descriptor() {
    return Bcusts5e_TcsdeactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& TcsdeactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TcsdeactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TcsdeactvType_Name.");
    return Bcusts5e_TcsdeactvType_Name(enum_t_value);
  }
  static inline bool TcsdeactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TcsdeactvType* value) {
    return Bcusts5e_TcsdeactvType_Parse(name, value);
  }

  typedef Bcusts5e_AwbavlType AwbavlType;
  static constexpr AwbavlType AWBAvlNotAvailable =
    Bcusts5e_AwbavlType_AWBAvlNotAvailable;
  static constexpr AwbavlType AWBAvlavailable =
    Bcusts5e_AwbavlType_AWBAvlavailable;
  static inline bool AwbavlType_IsValid(int value) {
    return Bcusts5e_AwbavlType_IsValid(value);
  }
  static constexpr AwbavlType AwbavlType_MIN =
    Bcusts5e_AwbavlType_AwbavlType_MIN;
  static constexpr AwbavlType AwbavlType_MAX =
    Bcusts5e_AwbavlType_AwbavlType_MAX;
  static constexpr int AwbavlType_ARRAYSIZE =
    Bcusts5e_AwbavlType_AwbavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AwbavlType_descriptor() {
    return Bcusts5e_AwbavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& AwbavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AwbavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AwbavlType_Name.");
    return Bcusts5e_AwbavlType_Name(enum_t_value);
  }
  static inline bool AwbavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AwbavlType* value) {
    return Bcusts5e_AwbavlType_Parse(name, value);
  }

  typedef Bcusts5e_AbpavlType AbpavlType;
  static constexpr AbpavlType ABPAvlNotAvailable =
    Bcusts5e_AbpavlType_ABPAvlNotAvailable;
  static constexpr AbpavlType ABPAvlavailable =
    Bcusts5e_AbpavlType_ABPAvlavailable;
  static inline bool AbpavlType_IsValid(int value) {
    return Bcusts5e_AbpavlType_IsValid(value);
  }
  static constexpr AbpavlType AbpavlType_MIN =
    Bcusts5e_AbpavlType_AbpavlType_MIN;
  static constexpr AbpavlType AbpavlType_MAX =
    Bcusts5e_AbpavlType_AbpavlType_MAX;
  static constexpr int AbpavlType_ARRAYSIZE =
    Bcusts5e_AbpavlType_AbpavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbpavlType_descriptor() {
    return Bcusts5e_AbpavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbpavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbpavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbpavlType_Name.");
    return Bcusts5e_AbpavlType_Name(enum_t_value);
  }
  static inline bool AbpavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbpavlType* value) {
    return Bcusts5e_AbpavlType_Parse(name, value);
  }

  typedef Bcusts5e_AwbactvType AwbactvType;
  static constexpr AwbactvType AWBActvNotActive =
    Bcusts5e_AwbactvType_AWBActvNotActive;
  static constexpr AwbactvType AWBActvActive =
    Bcusts5e_AwbactvType_AWBActvActive;
  static inline bool AwbactvType_IsValid(int value) {
    return Bcusts5e_AwbactvType_IsValid(value);
  }
  static constexpr AwbactvType AwbactvType_MIN =
    Bcusts5e_AwbactvType_AwbactvType_MIN;
  static constexpr AwbactvType AwbactvType_MAX =
    Bcusts5e_AwbactvType_AwbactvType_MAX;
  static constexpr int AwbactvType_ARRAYSIZE =
    Bcusts5e_AwbactvType_AwbactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AwbactvType_descriptor() {
    return Bcusts5e_AwbactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& AwbactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AwbactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AwbactvType_Name.");
    return Bcusts5e_AwbactvType_Name(enum_t_value);
  }
  static inline bool AwbactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AwbactvType* value) {
    return Bcusts5e_AwbactvType_Parse(name, value);
  }

  typedef Bcusts5e_EbaavlType EbaavlType;
  static constexpr EbaavlType EBAAvlNotAvailable =
    Bcusts5e_EbaavlType_EBAAvlNotAvailable;
  static constexpr EbaavlType EBAAvlavailable =
    Bcusts5e_EbaavlType_EBAAvlavailable;
  static inline bool EbaavlType_IsValid(int value) {
    return Bcusts5e_EbaavlType_IsValid(value);
  }
  static constexpr EbaavlType EbaavlType_MIN =
    Bcusts5e_EbaavlType_EbaavlType_MIN;
  static constexpr EbaavlType EbaavlType_MAX =
    Bcusts5e_EbaavlType_EbaavlType_MAX;
  static constexpr int EbaavlType_ARRAYSIZE =
    Bcusts5e_EbaavlType_EbaavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EbaavlType_descriptor() {
    return Bcusts5e_EbaavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& EbaavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EbaavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EbaavlType_Name.");
    return Bcusts5e_EbaavlType_Name(enum_t_value);
  }
  static inline bool EbaavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EbaavlType* value) {
    return Bcusts5e_EbaavlType_Parse(name, value);
  }

  typedef Bcusts5e_QdcaccfailType QdcaccfailType;
  static constexpr QdcaccfailType QDCACCFailNoError =
    Bcusts5e_QdcaccfailType_QDCACCFailNoError;
  static constexpr QdcaccfailType QDCACCFailError =
    Bcusts5e_QdcaccfailType_QDCACCFailError;
  static constexpr QdcaccfailType QDCACCFailReserved2 =
    Bcusts5e_QdcaccfailType_QDCACCFailReserved2;
  static constexpr QdcaccfailType QDCACCFailReserved3 =
    Bcusts5e_QdcaccfailType_QDCACCFailReserved3;
  static inline bool QdcaccfailType_IsValid(int value) {
    return Bcusts5e_QdcaccfailType_IsValid(value);
  }
  static constexpr QdcaccfailType QdcaccfailType_MIN =
    Bcusts5e_QdcaccfailType_QdcaccfailType_MIN;
  static constexpr QdcaccfailType QdcaccfailType_MAX =
    Bcusts5e_QdcaccfailType_QdcaccfailType_MAX;
  static constexpr int QdcaccfailType_ARRAYSIZE =
    Bcusts5e_QdcaccfailType_QdcaccfailType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  QdcaccfailType_descriptor() {
    return Bcusts5e_QdcaccfailType_descriptor();
  }
  template<typename T>
  static inline const std::string& QdcaccfailType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, QdcaccfailType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function QdcaccfailType_Name.");
    return Bcusts5e_QdcaccfailType_Name(enum_t_value);
  }
  static inline bool QdcaccfailType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      QdcaccfailType* value) {
    return Bcusts5e_QdcaccfailType_Parse(name, value);
  }

  typedef Bcusts5e_AbpactvType AbpactvType;
  static constexpr AbpactvType ABPActvNotActive =
    Bcusts5e_AbpactvType_ABPActvNotActive;
  static constexpr AbpactvType ABPActvActive =
    Bcusts5e_AbpactvType_ABPActvActive;
  static inline bool AbpactvType_IsValid(int value) {
    return Bcusts5e_AbpactvType_IsValid(value);
  }
  static constexpr AbpactvType AbpactvType_MIN =
    Bcusts5e_AbpactvType_AbpactvType_MIN;
  static constexpr AbpactvType AbpactvType_MAX =
    Bcusts5e_AbpactvType_AbpactvType_MAX;
  static constexpr int AbpactvType_ARRAYSIZE =
    Bcusts5e_AbpactvType_AbpactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbpactvType_descriptor() {
    return Bcusts5e_AbpactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbpactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbpactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbpactvType_Name.");
    return Bcusts5e_AbpactvType_Name(enum_t_value);
  }
  static inline bool AbpactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbpactvType* value) {
    return Bcusts5e_AbpactvType_Parse(name, value);
  }

  typedef Bcusts5e_PedpavlType PedpavlType;
  static constexpr PedpavlType PEDPAvlNotAvailable =
    Bcusts5e_PedpavlType_PEDPAvlNotAvailable;
  static constexpr PedpavlType PEDPAvlavailable =
    Bcusts5e_PedpavlType_PEDPAvlavailable;
  static inline bool PedpavlType_IsValid(int value) {
    return Bcusts5e_PedpavlType_IsValid(value);
  }
  static constexpr PedpavlType PedpavlType_MIN =
    Bcusts5e_PedpavlType_PedpavlType_MIN;
  static constexpr PedpavlType PedpavlType_MAX =
    Bcusts5e_PedpavlType_PedpavlType_MAX;
  static constexpr int PedpavlType_ARRAYSIZE =
    Bcusts5e_PedpavlType_PedpavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PedpavlType_descriptor() {
    return Bcusts5e_PedpavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& PedpavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PedpavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PedpavlType_Name.");
    return Bcusts5e_PedpavlType_Name(enum_t_value);
  }
  static inline bool PedpavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PedpavlType* value) {
    return Bcusts5e_PedpavlType_Parse(name, value);
  }

  typedef Bcusts5e_CddsavlType CddsavlType;
  static constexpr CddsavlType CDDSAvlNotAvailable =
    Bcusts5e_CddsavlType_CDDSAvlNotAvailable;
  static constexpr CddsavlType CDDSAvlavailable =
    Bcusts5e_CddsavlType_CDDSAvlavailable;
  static inline bool CddsavlType_IsValid(int value) {
    return Bcusts5e_CddsavlType_IsValid(value);
  }
  static constexpr CddsavlType CddsavlType_MIN =
    Bcusts5e_CddsavlType_CddsavlType_MIN;
  static constexpr CddsavlType CddsavlType_MAX =
    Bcusts5e_CddsavlType_CddsavlType_MAX;
  static constexpr int CddsavlType_ARRAYSIZE =
    Bcusts5e_CddsavlType_CddsavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CddsavlType_descriptor() {
    return Bcusts5e_CddsavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& CddsavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CddsavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CddsavlType_Name.");
    return Bcusts5e_CddsavlType_Name(enum_t_value);
  }
  static inline bool CddsavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CddsavlType* value) {
    return Bcusts5e_CddsavlType_Parse(name, value);
  }

  typedef Bcusts5e_StandstillstsType StandstillstsType;
  static constexpr StandstillstsType StandstillStsNonHold =
    Bcusts5e_StandstillstsType_StandstillStsNonHold;
  static constexpr StandstillstsType StandstillStsSoftStop =
    Bcusts5e_StandstillstsType_StandstillStsSoftStop;
  static constexpr StandstillstsType StandstillStsTemporaryHoldByServiceBrakes =
    Bcusts5e_StandstillstsType_StandstillStsTemporaryHoldByServiceBrakes;
  static constexpr StandstillstsType StandstillStsHoldByServiceBrakes =
    Bcusts5e_StandstillstsType_StandstillStsHoldByServiceBrakes;
  static constexpr StandstillstsType StandstillStsTransitionToANonHold =
    Bcusts5e_StandstillstsType_StandstillStsTransitionToANonHold;
  static constexpr StandstillstsType StandstillStsParkedVehicleAutonomousParkBrake =
    Bcusts5e_StandstillstsType_StandstillStsParkedVehicleAutonomousParkBrake;
  static constexpr StandstillstsType StandstillStsReserved6 =
    Bcusts5e_StandstillstsType_StandstillStsReserved6;
  static constexpr StandstillstsType StandstillStsReserved7 =
    Bcusts5e_StandstillstsType_StandstillStsReserved7;
  static inline bool StandstillstsType_IsValid(int value) {
    return Bcusts5e_StandstillstsType_IsValid(value);
  }
  static constexpr StandstillstsType StandstillstsType_MIN =
    Bcusts5e_StandstillstsType_StandstillstsType_MIN;
  static constexpr StandstillstsType StandstillstsType_MAX =
    Bcusts5e_StandstillstsType_StandstillstsType_MAX;
  static constexpr int StandstillstsType_ARRAYSIZE =
    Bcusts5e_StandstillstsType_StandstillstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StandstillstsType_descriptor() {
    return Bcusts5e_StandstillstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& StandstillstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StandstillstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StandstillstsType_Name.");
    return Bcusts5e_StandstillstsType_Name(enum_t_value);
  }
  static inline bool StandstillstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StandstillstsType* value) {
    return Bcusts5e_StandstillstsType_Parse(name, value);
  }

  typedef Bcusts5e_HhcavailType HhcavailType;
  static constexpr HhcavailType HHCAvailNotAvailable =
    Bcusts5e_HhcavailType_HHCAvailNotAvailable;
  static constexpr HhcavailType HHCAvailavailable =
    Bcusts5e_HhcavailType_HHCAvailavailable;
  static inline bool HhcavailType_IsValid(int value) {
    return Bcusts5e_HhcavailType_IsValid(value);
  }
  static constexpr HhcavailType HhcavailType_MIN =
    Bcusts5e_HhcavailType_HhcavailType_MIN;
  static constexpr HhcavailType HhcavailType_MAX =
    Bcusts5e_HhcavailType_HhcavailType_MAX;
  static constexpr int HhcavailType_ARRAYSIZE =
    Bcusts5e_HhcavailType_HhcavailType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HhcavailType_descriptor() {
    return Bcusts5e_HhcavailType_descriptor();
  }
  template<typename T>
  static inline const std::string& HhcavailType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HhcavailType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HhcavailType_Name.");
    return Bcusts5e_HhcavailType_Name(enum_t_value);
  }
  static inline bool HhcavailType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HhcavailType* value) {
    return Bcusts5e_HhcavailType_Parse(name, value);
  }

  typedef Bcusts5e_AbsactvType AbsactvType;
  static constexpr AbsactvType ABSActvNotActive =
    Bcusts5e_AbsactvType_ABSActvNotActive;
  static constexpr AbsactvType ABSActvActive =
    Bcusts5e_AbsactvType_ABSActvActive;
  static inline bool AbsactvType_IsValid(int value) {
    return Bcusts5e_AbsactvType_IsValid(value);
  }
  static constexpr AbsactvType AbsactvType_MIN =
    Bcusts5e_AbsactvType_AbsactvType_MIN;
  static constexpr AbsactvType AbsactvType_MAX =
    Bcusts5e_AbsactvType_AbsactvType_MAX;
  static constexpr int AbsactvType_ARRAYSIZE =
    Bcusts5e_AbsactvType_AbsactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbsactvType_descriptor() {
    return Bcusts5e_AbsactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbsactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbsactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbsactvType_Name.");
    return Bcusts5e_AbsactvType_Name(enum_t_value);
  }
  static inline bool AbsactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbsactvType* value) {
    return Bcusts5e_AbsactvType_Parse(name, value);
  }

  typedef Bcusts5e_PedpactvType PedpactvType;
  static constexpr PedpactvType PEDPActvNotActive =
    Bcusts5e_PedpactvType_PEDPActvNotActive;
  static constexpr PedpactvType PEDPActvActive =
    Bcusts5e_PedpactvType_PEDPActvActive;
  static inline bool PedpactvType_IsValid(int value) {
    return Bcusts5e_PedpactvType_IsValid(value);
  }
  static constexpr PedpactvType PedpactvType_MIN =
    Bcusts5e_PedpactvType_PedpactvType_MIN;
  static constexpr PedpactvType PedpactvType_MAX =
    Bcusts5e_PedpactvType_PedpactvType_MAX;
  static constexpr int PedpactvType_ARRAYSIZE =
    Bcusts5e_PedpactvType_PedpactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PedpactvType_descriptor() {
    return Bcusts5e_PedpactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& PedpactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PedpactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PedpactvType_Name.");
    return Bcusts5e_PedpactvType_Name(enum_t_value);
  }
  static inline bool PedpactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PedpactvType* value) {
    return Bcusts5e_PedpactvType_Parse(name, value);
  }

  typedef Bcusts5e_EbaactvType EbaactvType;
  static constexpr EbaactvType EBAActvNotActive =
    Bcusts5e_EbaactvType_EBAActvNotActive;
  static constexpr EbaactvType EBAActvActive =
    Bcusts5e_EbaactvType_EBAActvActive;
  static inline bool EbaactvType_IsValid(int value) {
    return Bcusts5e_EbaactvType_IsValid(value);
  }
  static constexpr EbaactvType EbaactvType_MIN =
    Bcusts5e_EbaactvType_EbaactvType_MIN;
  static constexpr EbaactvType EbaactvType_MAX =
    Bcusts5e_EbaactvType_EbaactvType_MAX;
  static constexpr int EbaactvType_ARRAYSIZE =
    Bcusts5e_EbaactvType_EbaactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EbaactvType_descriptor() {
    return Bcusts5e_EbaactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& EbaactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EbaactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EbaactvType_Name.");
    return Bcusts5e_EbaactvType_Name(enum_t_value);
  }
  static inline bool EbaactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EbaactvType* value) {
    return Bcusts5e_EbaactvType_Parse(name, value);
  }

  typedef Bcusts5e_CdpactvType CdpactvType;
  static constexpr CdpactvType CDPActvNotActive =
    Bcusts5e_CdpactvType_CDPActvNotActive;
  static constexpr CdpactvType CDPActvActive =
    Bcusts5e_CdpactvType_CDPActvActive;
  static inline bool CdpactvType_IsValid(int value) {
    return Bcusts5e_CdpactvType_IsValid(value);
  }
  static constexpr CdpactvType CdpactvType_MIN =
    Bcusts5e_CdpactvType_CdpactvType_MIN;
  static constexpr CdpactvType CdpactvType_MAX =
    Bcusts5e_CdpactvType_CdpactvType_MAX;
  static constexpr int CdpactvType_ARRAYSIZE =
    Bcusts5e_CdpactvType_CdpactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CdpactvType_descriptor() {
    return Bcusts5e_CdpactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& CdpactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CdpactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CdpactvType_Name.");
    return Bcusts5e_CdpactvType_Name(enum_t_value);
  }
  static inline bool CdpactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CdpactvType* value) {
    return Bcusts5e_CdpactvType_Parse(name, value);
  }

  typedef Bcusts5e_EbdactvType EbdactvType;
  static constexpr EbdactvType EBDActvNotActive =
    Bcusts5e_EbdactvType_EBDActvNotActive;
  static constexpr EbdactvType EBDActvActive =
    Bcusts5e_EbdactvType_EBDActvActive;
  static inline bool EbdactvType_IsValid(int value) {
    return Bcusts5e_EbdactvType_IsValid(value);
  }
  static constexpr EbdactvType EbdactvType_MIN =
    Bcusts5e_EbdactvType_EbdactvType_MIN;
  static constexpr EbdactvType EbdactvType_MAX =
    Bcusts5e_EbdactvType_EbdactvType_MAX;
  static constexpr int EbdactvType_ARRAYSIZE =
    Bcusts5e_EbdactvType_EbdactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EbdactvType_descriptor() {
    return Bcusts5e_EbdactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& EbdactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EbdactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EbdactvType_Name.");
    return Bcusts5e_EbdactvType_Name(enum_t_value);
  }
  static inline bool EbdactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EbdactvType* value) {
    return Bcusts5e_EbdactvType_Parse(name, value);
  }

  typedef Bcusts5e_ScmactvType ScmactvType;
  static constexpr ScmactvType SCMActvNotActive =
    Bcusts5e_ScmactvType_SCMActvNotActive;
  static constexpr ScmactvType SCMActvActive =
    Bcusts5e_ScmactvType_SCMActvActive;
  static inline bool ScmactvType_IsValid(int value) {
    return Bcusts5e_ScmactvType_IsValid(value);
  }
  static constexpr ScmactvType ScmactvType_MIN =
    Bcusts5e_ScmactvType_ScmactvType_MIN;
  static constexpr ScmactvType ScmactvType_MAX =
    Bcusts5e_ScmactvType_ScmactvType_MAX;
  static constexpr int ScmactvType_ARRAYSIZE =
    Bcusts5e_ScmactvType_ScmactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScmactvType_descriptor() {
    return Bcusts5e_ScmactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& ScmactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScmactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScmactvType_Name.");
    return Bcusts5e_ScmactvType_Name(enum_t_value);
  }
  static inline bool ScmactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScmactvType* value) {
    return Bcusts5e_ScmactvType_Parse(name, value);
  }

  typedef Bcusts5e_DtcactvType DtcactvType;
  static constexpr DtcactvType DTCActvNotActive =
    Bcusts5e_DtcactvType_DTCActvNotActive;
  static constexpr DtcactvType DTCActvActive =
    Bcusts5e_DtcactvType_DTCActvActive;
  static inline bool DtcactvType_IsValid(int value) {
    return Bcusts5e_DtcactvType_IsValid(value);
  }
  static constexpr DtcactvType DtcactvType_MIN =
    Bcusts5e_DtcactvType_DtcactvType_MIN;
  static constexpr DtcactvType DtcactvType_MAX =
    Bcusts5e_DtcactvType_DtcactvType_MAX;
  static constexpr int DtcactvType_ARRAYSIZE =
    Bcusts5e_DtcactvType_DtcactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DtcactvType_descriptor() {
    return Bcusts5e_DtcactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& DtcactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DtcactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DtcactvType_Name.");
    return Bcusts5e_DtcactvType_Name(enum_t_value);
  }
  static inline bool DtcactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DtcactvType* value) {
    return Bcusts5e_DtcactvType_Parse(name, value);
  }

  typedef Bcusts5e_HrbactvType HrbactvType;
  static constexpr HrbactvType HRBActvNotActive =
    Bcusts5e_HrbactvType_HRBActvNotActive;
  static constexpr HrbactvType HRBActvActive =
    Bcusts5e_HrbactvType_HRBActvActive;
  static inline bool HrbactvType_IsValid(int value) {
    return Bcusts5e_HrbactvType_IsValid(value);
  }
  static constexpr HrbactvType HrbactvType_MIN =
    Bcusts5e_HrbactvType_HrbactvType_MIN;
  static constexpr HrbactvType HrbactvType_MAX =
    Bcusts5e_HrbactvType_HrbactvType_MAX;
  static constexpr int HrbactvType_ARRAYSIZE =
    Bcusts5e_HrbactvType_HrbactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HrbactvType_descriptor() {
    return Bcusts5e_HrbactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& HrbactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HrbactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HrbactvType_Name.");
    return Bcusts5e_HrbactvType_Name(enum_t_value);
  }
  static inline bool HrbactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HrbactvType* value) {
    return Bcusts5e_HrbactvType_Parse(name, value);
  }

  typedef Bcusts5e_EcdttempoffsType EcdttempoffsType;
  static constexpr EcdttempoffsType ECDTTempOffsTemperatureNotHigh =
    Bcusts5e_EcdttempoffsType_ECDTTempOffsTemperatureNotHigh;
  static constexpr EcdttempoffsType ECDTTempOffsTemepratureTooHigh =
    Bcusts5e_EcdttempoffsType_ECDTTempOffsTemepratureTooHigh;
  static inline bool EcdttempoffsType_IsValid(int value) {
    return Bcusts5e_EcdttempoffsType_IsValid(value);
  }
  static constexpr EcdttempoffsType EcdttempoffsType_MIN =
    Bcusts5e_EcdttempoffsType_EcdttempoffsType_MIN;
  static constexpr EcdttempoffsType EcdttempoffsType_MAX =
    Bcusts5e_EcdttempoffsType_EcdttempoffsType_MAX;
  static constexpr int EcdttempoffsType_ARRAYSIZE =
    Bcusts5e_EcdttempoffsType_EcdttempoffsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EcdttempoffsType_descriptor() {
    return Bcusts5e_EcdttempoffsType_descriptor();
  }
  template<typename T>
  static inline const std::string& EcdttempoffsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EcdttempoffsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EcdttempoffsType_Name.");
    return Bcusts5e_EcdttempoffsType_Name(enum_t_value);
  }
  static inline bool EcdttempoffsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EcdttempoffsType* value) {
    return Bcusts5e_EcdttempoffsType_Parse(name, value);
  }

  typedef Bcusts5e_CddsactvType CddsactvType;
  static constexpr CddsactvType CDDSActvNotActive =
    Bcusts5e_CddsactvType_CDDSActvNotActive;
  static constexpr CddsactvType CDDSActvActive =
    Bcusts5e_CddsactvType_CDDSActvActive;
  static inline bool CddsactvType_IsValid(int value) {
    return Bcusts5e_CddsactvType_IsValid(value);
  }
  static constexpr CddsactvType CddsactvType_MIN =
    Bcusts5e_CddsactvType_CddsactvType_MIN;
  static constexpr CddsactvType CddsactvType_MAX =
    Bcusts5e_CddsactvType_CddsactvType_MAX;
  static constexpr int CddsactvType_ARRAYSIZE =
    Bcusts5e_CddsactvType_CddsactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CddsactvType_descriptor() {
    return Bcusts5e_CddsactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& CddsactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CddsactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CddsactvType_Name.");
    return Bcusts5e_CddsactvType_Name(enum_t_value);
  }
  static inline bool CddsactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CddsactvType* value) {
    return Bcusts5e_CddsactvType_Parse(name, value);
  }

  typedef Bcusts5e_HhcactvType HhcactvType;
  static constexpr HhcactvType HHCActvNotActive =
    Bcusts5e_HhcactvType_HHCActvNotActive;
  static constexpr HhcactvType HHCActvActive =
    Bcusts5e_HhcactvType_HHCActvActive;
  static inline bool HhcactvType_IsValid(int value) {
    return Bcusts5e_HhcactvType_IsValid(value);
  }
  static constexpr HhcactvType HhcactvType_MIN =
    Bcusts5e_HhcactvType_HhcactvType_MIN;
  static constexpr HhcactvType HhcactvType_MAX =
    Bcusts5e_HhcactvType_HhcactvType_MAX;
  static constexpr int HhcactvType_ARRAYSIZE =
    Bcusts5e_HhcactvType_HhcactvType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HhcactvType_descriptor() {
    return Bcusts5e_HhcactvType_descriptor();
  }
  template<typename T>
  static inline const std::string& HhcactvType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HhcactvType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HhcactvType_Name.");
    return Bcusts5e_HhcactvType_Name(enum_t_value);
  }
  static inline bool HhcactvType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HhcactvType* value) {
    return Bcusts5e_HhcactvType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTcsactvFieldNumber = 1,
    kScmavlFieldNumber = 2,
    kHfcactvFieldNumber = 3,
    kVdcactvFieldNumber = 4,
    kAvhstsFieldNumber = 5,
    kAutobrkgactvFieldNumber = 6,
    kVdcdeactvFieldNumber = 7,
    kAbaactvFieldNumber = 8,
    kAutobrkgavlFieldNumber = 9,
    kHbaactvFieldNumber = 10,
    kAebavlFieldNumber = 11,
    kAebactvFieldNumber = 12,
    kCdpavailFieldNumber = 13,
    kAbaavlFieldNumber = 14,
    kHdcstsFieldNumber = 15,
    kTcsdeactvFieldNumber = 16,
    kAwbavlFieldNumber = 17,
    kAbpavlFieldNumber = 18,
    kAwbactvFieldNumber = 19,
    kEbaavlFieldNumber = 20,
    kQdcaccfailFieldNumber = 21,
    kAbpactvFieldNumber = 22,
    kPedpavlFieldNumber = 23,
    kCddsavlFieldNumber = 24,
    kStandstillstsFieldNumber = 25,
    kHhcavailFieldNumber = 26,
    kAbsactvFieldNumber = 27,
    kPedpactvFieldNumber = 28,
    kEbaactvFieldNumber = 29,
    kCdpactvFieldNumber = 30,
    kEbdactvFieldNumber = 31,
    kScmactvFieldNumber = 32,
    kDtcactvFieldNumber = 33,
    kHrbactvFieldNumber = 34,
    kEcdttempoffsFieldNumber = 35,
    kCddsactvFieldNumber = 36,
    kHhcactvFieldNumber = 37,
  };
  // optional .apollo.canbus.Bcusts5e.TcsactvType tcsactv = 1;
  bool has_tcsactv() const;
  private:
  bool _internal_has_tcsactv() const;
  public:
  void clear_tcsactv();
  ::apollo::canbus::Bcusts5e_TcsactvType tcsactv() const;
  void set_tcsactv(::apollo::canbus::Bcusts5e_TcsactvType value);
  private:
  ::apollo::canbus::Bcusts5e_TcsactvType _internal_tcsactv() const;
  void _internal_set_tcsactv(::apollo::canbus::Bcusts5e_TcsactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.ScmavlType scmavl = 2;
  bool has_scmavl() const;
  private:
  bool _internal_has_scmavl() const;
  public:
  void clear_scmavl();
  ::apollo::canbus::Bcusts5e_ScmavlType scmavl() const;
  void set_scmavl(::apollo::canbus::Bcusts5e_ScmavlType value);
  private:
  ::apollo::canbus::Bcusts5e_ScmavlType _internal_scmavl() const;
  void _internal_set_scmavl(::apollo::canbus::Bcusts5e_ScmavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.HfcactvType hfcactv = 3;
  bool has_hfcactv() const;
  private:
  bool _internal_has_hfcactv() const;
  public:
  void clear_hfcactv();
  ::apollo::canbus::Bcusts5e_HfcactvType hfcactv() const;
  void set_hfcactv(::apollo::canbus::Bcusts5e_HfcactvType value);
  private:
  ::apollo::canbus::Bcusts5e_HfcactvType _internal_hfcactv() const;
  void _internal_set_hfcactv(::apollo::canbus::Bcusts5e_HfcactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.VdcactvType vdcactv = 4;
  bool has_vdcactv() const;
  private:
  bool _internal_has_vdcactv() const;
  public:
  void clear_vdcactv();
  ::apollo::canbus::Bcusts5e_VdcactvType vdcactv() const;
  void set_vdcactv(::apollo::canbus::Bcusts5e_VdcactvType value);
  private:
  ::apollo::canbus::Bcusts5e_VdcactvType _internal_vdcactv() const;
  void _internal_set_vdcactv(::apollo::canbus::Bcusts5e_VdcactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AvhstsType avhsts = 5;
  bool has_avhsts() const;
  private:
  bool _internal_has_avhsts() const;
  public:
  void clear_avhsts();
  ::apollo::canbus::Bcusts5e_AvhstsType avhsts() const;
  void set_avhsts(::apollo::canbus::Bcusts5e_AvhstsType value);
  private:
  ::apollo::canbus::Bcusts5e_AvhstsType _internal_avhsts() const;
  void _internal_set_avhsts(::apollo::canbus::Bcusts5e_AvhstsType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AutobrkgactvType autobrkgactv = 6;
  bool has_autobrkgactv() const;
  private:
  bool _internal_has_autobrkgactv() const;
  public:
  void clear_autobrkgactv();
  ::apollo::canbus::Bcusts5e_AutobrkgactvType autobrkgactv() const;
  void set_autobrkgactv(::apollo::canbus::Bcusts5e_AutobrkgactvType value);
  private:
  ::apollo::canbus::Bcusts5e_AutobrkgactvType _internal_autobrkgactv() const;
  void _internal_set_autobrkgactv(::apollo::canbus::Bcusts5e_AutobrkgactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.VdcdeactvType vdcdeactv = 7;
  bool has_vdcdeactv() const;
  private:
  bool _internal_has_vdcdeactv() const;
  public:
  void clear_vdcdeactv();
  ::apollo::canbus::Bcusts5e_VdcdeactvType vdcdeactv() const;
  void set_vdcdeactv(::apollo::canbus::Bcusts5e_VdcdeactvType value);
  private:
  ::apollo::canbus::Bcusts5e_VdcdeactvType _internal_vdcdeactv() const;
  void _internal_set_vdcdeactv(::apollo::canbus::Bcusts5e_VdcdeactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AbaactvType abaactv = 8;
  bool has_abaactv() const;
  private:
  bool _internal_has_abaactv() const;
  public:
  void clear_abaactv();
  ::apollo::canbus::Bcusts5e_AbaactvType abaactv() const;
  void set_abaactv(::apollo::canbus::Bcusts5e_AbaactvType value);
  private:
  ::apollo::canbus::Bcusts5e_AbaactvType _internal_abaactv() const;
  void _internal_set_abaactv(::apollo::canbus::Bcusts5e_AbaactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AutobrkgavlType autobrkgavl = 9;
  bool has_autobrkgavl() const;
  private:
  bool _internal_has_autobrkgavl() const;
  public:
  void clear_autobrkgavl();
  ::apollo::canbus::Bcusts5e_AutobrkgavlType autobrkgavl() const;
  void set_autobrkgavl(::apollo::canbus::Bcusts5e_AutobrkgavlType value);
  private:
  ::apollo::canbus::Bcusts5e_AutobrkgavlType _internal_autobrkgavl() const;
  void _internal_set_autobrkgavl(::apollo::canbus::Bcusts5e_AutobrkgavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.HbaactvType hbaactv = 10;
  bool has_hbaactv() const;
  private:
  bool _internal_has_hbaactv() const;
  public:
  void clear_hbaactv();
  ::apollo::canbus::Bcusts5e_HbaactvType hbaactv() const;
  void set_hbaactv(::apollo::canbus::Bcusts5e_HbaactvType value);
  private:
  ::apollo::canbus::Bcusts5e_HbaactvType _internal_hbaactv() const;
  void _internal_set_hbaactv(::apollo::canbus::Bcusts5e_HbaactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AebavlType aebavl = 11;
  bool has_aebavl() const;
  private:
  bool _internal_has_aebavl() const;
  public:
  void clear_aebavl();
  ::apollo::canbus::Bcusts5e_AebavlType aebavl() const;
  void set_aebavl(::apollo::canbus::Bcusts5e_AebavlType value);
  private:
  ::apollo::canbus::Bcusts5e_AebavlType _internal_aebavl() const;
  void _internal_set_aebavl(::apollo::canbus::Bcusts5e_AebavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AebactvType aebactv = 12;
  bool has_aebactv() const;
  private:
  bool _internal_has_aebactv() const;
  public:
  void clear_aebactv();
  ::apollo::canbus::Bcusts5e_AebactvType aebactv() const;
  void set_aebactv(::apollo::canbus::Bcusts5e_AebactvType value);
  private:
  ::apollo::canbus::Bcusts5e_AebactvType _internal_aebactv() const;
  void _internal_set_aebactv(::apollo::canbus::Bcusts5e_AebactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.CdpavailType cdpavail = 13;
  bool has_cdpavail() const;
  private:
  bool _internal_has_cdpavail() const;
  public:
  void clear_cdpavail();
  ::apollo::canbus::Bcusts5e_CdpavailType cdpavail() const;
  void set_cdpavail(::apollo::canbus::Bcusts5e_CdpavailType value);
  private:
  ::apollo::canbus::Bcusts5e_CdpavailType _internal_cdpavail() const;
  void _internal_set_cdpavail(::apollo::canbus::Bcusts5e_CdpavailType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AbaavlType abaavl = 14;
  bool has_abaavl() const;
  private:
  bool _internal_has_abaavl() const;
  public:
  void clear_abaavl();
  ::apollo::canbus::Bcusts5e_AbaavlType abaavl() const;
  void set_abaavl(::apollo::canbus::Bcusts5e_AbaavlType value);
  private:
  ::apollo::canbus::Bcusts5e_AbaavlType _internal_abaavl() const;
  void _internal_set_abaavl(::apollo::canbus::Bcusts5e_AbaavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.HdcstsType hdcsts = 15;
  bool has_hdcsts() const;
  private:
  bool _internal_has_hdcsts() const;
  public:
  void clear_hdcsts();
  ::apollo::canbus::Bcusts5e_HdcstsType hdcsts() const;
  void set_hdcsts(::apollo::canbus::Bcusts5e_HdcstsType value);
  private:
  ::apollo::canbus::Bcusts5e_HdcstsType _internal_hdcsts() const;
  void _internal_set_hdcsts(::apollo::canbus::Bcusts5e_HdcstsType value);
  public:

  // optional .apollo.canbus.Bcusts5e.TcsdeactvType tcsdeactv = 16;
  bool has_tcsdeactv() const;
  private:
  bool _internal_has_tcsdeactv() const;
  public:
  void clear_tcsdeactv();
  ::apollo::canbus::Bcusts5e_TcsdeactvType tcsdeactv() const;
  void set_tcsdeactv(::apollo::canbus::Bcusts5e_TcsdeactvType value);
  private:
  ::apollo::canbus::Bcusts5e_TcsdeactvType _internal_tcsdeactv() const;
  void _internal_set_tcsdeactv(::apollo::canbus::Bcusts5e_TcsdeactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AwbavlType awbavl = 17;
  bool has_awbavl() const;
  private:
  bool _internal_has_awbavl() const;
  public:
  void clear_awbavl();
  ::apollo::canbus::Bcusts5e_AwbavlType awbavl() const;
  void set_awbavl(::apollo::canbus::Bcusts5e_AwbavlType value);
  private:
  ::apollo::canbus::Bcusts5e_AwbavlType _internal_awbavl() const;
  void _internal_set_awbavl(::apollo::canbus::Bcusts5e_AwbavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AbpavlType abpavl = 18;
  bool has_abpavl() const;
  private:
  bool _internal_has_abpavl() const;
  public:
  void clear_abpavl();
  ::apollo::canbus::Bcusts5e_AbpavlType abpavl() const;
  void set_abpavl(::apollo::canbus::Bcusts5e_AbpavlType value);
  private:
  ::apollo::canbus::Bcusts5e_AbpavlType _internal_abpavl() const;
  void _internal_set_abpavl(::apollo::canbus::Bcusts5e_AbpavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AwbactvType awbactv = 19;
  bool has_awbactv() const;
  private:
  bool _internal_has_awbactv() const;
  public:
  void clear_awbactv();
  ::apollo::canbus::Bcusts5e_AwbactvType awbactv() const;
  void set_awbactv(::apollo::canbus::Bcusts5e_AwbactvType value);
  private:
  ::apollo::canbus::Bcusts5e_AwbactvType _internal_awbactv() const;
  void _internal_set_awbactv(::apollo::canbus::Bcusts5e_AwbactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.EbaavlType ebaavl = 20;
  bool has_ebaavl() const;
  private:
  bool _internal_has_ebaavl() const;
  public:
  void clear_ebaavl();
  ::apollo::canbus::Bcusts5e_EbaavlType ebaavl() const;
  void set_ebaavl(::apollo::canbus::Bcusts5e_EbaavlType value);
  private:
  ::apollo::canbus::Bcusts5e_EbaavlType _internal_ebaavl() const;
  void _internal_set_ebaavl(::apollo::canbus::Bcusts5e_EbaavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.QdcaccfailType qdcaccfail = 21;
  bool has_qdcaccfail() const;
  private:
  bool _internal_has_qdcaccfail() const;
  public:
  void clear_qdcaccfail();
  ::apollo::canbus::Bcusts5e_QdcaccfailType qdcaccfail() const;
  void set_qdcaccfail(::apollo::canbus::Bcusts5e_QdcaccfailType value);
  private:
  ::apollo::canbus::Bcusts5e_QdcaccfailType _internal_qdcaccfail() const;
  void _internal_set_qdcaccfail(::apollo::canbus::Bcusts5e_QdcaccfailType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AbpactvType abpactv = 22;
  bool has_abpactv() const;
  private:
  bool _internal_has_abpactv() const;
  public:
  void clear_abpactv();
  ::apollo::canbus::Bcusts5e_AbpactvType abpactv() const;
  void set_abpactv(::apollo::canbus::Bcusts5e_AbpactvType value);
  private:
  ::apollo::canbus::Bcusts5e_AbpactvType _internal_abpactv() const;
  void _internal_set_abpactv(::apollo::canbus::Bcusts5e_AbpactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.PedpavlType pedpavl = 23;
  bool has_pedpavl() const;
  private:
  bool _internal_has_pedpavl() const;
  public:
  void clear_pedpavl();
  ::apollo::canbus::Bcusts5e_PedpavlType pedpavl() const;
  void set_pedpavl(::apollo::canbus::Bcusts5e_PedpavlType value);
  private:
  ::apollo::canbus::Bcusts5e_PedpavlType _internal_pedpavl() const;
  void _internal_set_pedpavl(::apollo::canbus::Bcusts5e_PedpavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.CddsavlType cddsavl = 24;
  bool has_cddsavl() const;
  private:
  bool _internal_has_cddsavl() const;
  public:
  void clear_cddsavl();
  ::apollo::canbus::Bcusts5e_CddsavlType cddsavl() const;
  void set_cddsavl(::apollo::canbus::Bcusts5e_CddsavlType value);
  private:
  ::apollo::canbus::Bcusts5e_CddsavlType _internal_cddsavl() const;
  void _internal_set_cddsavl(::apollo::canbus::Bcusts5e_CddsavlType value);
  public:

  // optional .apollo.canbus.Bcusts5e.StandstillstsType standstillsts = 25;
  bool has_standstillsts() const;
  private:
  bool _internal_has_standstillsts() const;
  public:
  void clear_standstillsts();
  ::apollo::canbus::Bcusts5e_StandstillstsType standstillsts() const;
  void set_standstillsts(::apollo::canbus::Bcusts5e_StandstillstsType value);
  private:
  ::apollo::canbus::Bcusts5e_StandstillstsType _internal_standstillsts() const;
  void _internal_set_standstillsts(::apollo::canbus::Bcusts5e_StandstillstsType value);
  public:

  // optional .apollo.canbus.Bcusts5e.HhcavailType hhcavail = 26;
  bool has_hhcavail() const;
  private:
  bool _internal_has_hhcavail() const;
  public:
  void clear_hhcavail();
  ::apollo::canbus::Bcusts5e_HhcavailType hhcavail() const;
  void set_hhcavail(::apollo::canbus::Bcusts5e_HhcavailType value);
  private:
  ::apollo::canbus::Bcusts5e_HhcavailType _internal_hhcavail() const;
  void _internal_set_hhcavail(::apollo::canbus::Bcusts5e_HhcavailType value);
  public:

  // optional .apollo.canbus.Bcusts5e.AbsactvType absactv = 27;
  bool has_absactv() const;
  private:
  bool _internal_has_absactv() const;
  public:
  void clear_absactv();
  ::apollo::canbus::Bcusts5e_AbsactvType absactv() const;
  void set_absactv(::apollo::canbus::Bcusts5e_AbsactvType value);
  private:
  ::apollo::canbus::Bcusts5e_AbsactvType _internal_absactv() const;
  void _internal_set_absactv(::apollo::canbus::Bcusts5e_AbsactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.PedpactvType pedpactv = 28;
  bool has_pedpactv() const;
  private:
  bool _internal_has_pedpactv() const;
  public:
  void clear_pedpactv();
  ::apollo::canbus::Bcusts5e_PedpactvType pedpactv() const;
  void set_pedpactv(::apollo::canbus::Bcusts5e_PedpactvType value);
  private:
  ::apollo::canbus::Bcusts5e_PedpactvType _internal_pedpactv() const;
  void _internal_set_pedpactv(::apollo::canbus::Bcusts5e_PedpactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.EbaactvType ebaactv = 29;
  bool has_ebaactv() const;
  private:
  bool _internal_has_ebaactv() const;
  public:
  void clear_ebaactv();
  ::apollo::canbus::Bcusts5e_EbaactvType ebaactv() const;
  void set_ebaactv(::apollo::canbus::Bcusts5e_EbaactvType value);
  private:
  ::apollo::canbus::Bcusts5e_EbaactvType _internal_ebaactv() const;
  void _internal_set_ebaactv(::apollo::canbus::Bcusts5e_EbaactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.CdpactvType cdpactv = 30;
  bool has_cdpactv() const;
  private:
  bool _internal_has_cdpactv() const;
  public:
  void clear_cdpactv();
  ::apollo::canbus::Bcusts5e_CdpactvType cdpactv() const;
  void set_cdpactv(::apollo::canbus::Bcusts5e_CdpactvType value);
  private:
  ::apollo::canbus::Bcusts5e_CdpactvType _internal_cdpactv() const;
  void _internal_set_cdpactv(::apollo::canbus::Bcusts5e_CdpactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.EbdactvType ebdactv = 31;
  bool has_ebdactv() const;
  private:
  bool _internal_has_ebdactv() const;
  public:
  void clear_ebdactv();
  ::apollo::canbus::Bcusts5e_EbdactvType ebdactv() const;
  void set_ebdactv(::apollo::canbus::Bcusts5e_EbdactvType value);
  private:
  ::apollo::canbus::Bcusts5e_EbdactvType _internal_ebdactv() const;
  void _internal_set_ebdactv(::apollo::canbus::Bcusts5e_EbdactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.ScmactvType scmactv = 32;
  bool has_scmactv() const;
  private:
  bool _internal_has_scmactv() const;
  public:
  void clear_scmactv();
  ::apollo::canbus::Bcusts5e_ScmactvType scmactv() const;
  void set_scmactv(::apollo::canbus::Bcusts5e_ScmactvType value);
  private:
  ::apollo::canbus::Bcusts5e_ScmactvType _internal_scmactv() const;
  void _internal_set_scmactv(::apollo::canbus::Bcusts5e_ScmactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.DtcactvType dtcactv = 33;
  bool has_dtcactv() const;
  private:
  bool _internal_has_dtcactv() const;
  public:
  void clear_dtcactv();
  ::apollo::canbus::Bcusts5e_DtcactvType dtcactv() const;
  void set_dtcactv(::apollo::canbus::Bcusts5e_DtcactvType value);
  private:
  ::apollo::canbus::Bcusts5e_DtcactvType _internal_dtcactv() const;
  void _internal_set_dtcactv(::apollo::canbus::Bcusts5e_DtcactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.HrbactvType hrbactv = 34;
  bool has_hrbactv() const;
  private:
  bool _internal_has_hrbactv() const;
  public:
  void clear_hrbactv();
  ::apollo::canbus::Bcusts5e_HrbactvType hrbactv() const;
  void set_hrbactv(::apollo::canbus::Bcusts5e_HrbactvType value);
  private:
  ::apollo::canbus::Bcusts5e_HrbactvType _internal_hrbactv() const;
  void _internal_set_hrbactv(::apollo::canbus::Bcusts5e_HrbactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.EcdttempoffsType ecdttempoffs = 35;
  bool has_ecdttempoffs() const;
  private:
  bool _internal_has_ecdttempoffs() const;
  public:
  void clear_ecdttempoffs();
  ::apollo::canbus::Bcusts5e_EcdttempoffsType ecdttempoffs() const;
  void set_ecdttempoffs(::apollo::canbus::Bcusts5e_EcdttempoffsType value);
  private:
  ::apollo::canbus::Bcusts5e_EcdttempoffsType _internal_ecdttempoffs() const;
  void _internal_set_ecdttempoffs(::apollo::canbus::Bcusts5e_EcdttempoffsType value);
  public:

  // optional .apollo.canbus.Bcusts5e.CddsactvType cddsactv = 36;
  bool has_cddsactv() const;
  private:
  bool _internal_has_cddsactv() const;
  public:
  void clear_cddsactv();
  ::apollo::canbus::Bcusts5e_CddsactvType cddsactv() const;
  void set_cddsactv(::apollo::canbus::Bcusts5e_CddsactvType value);
  private:
  ::apollo::canbus::Bcusts5e_CddsactvType _internal_cddsactv() const;
  void _internal_set_cddsactv(::apollo::canbus::Bcusts5e_CddsactvType value);
  public:

  // optional .apollo.canbus.Bcusts5e.HhcactvType hhcactv = 37;
  bool has_hhcactv() const;
  private:
  bool _internal_has_hhcactv() const;
  public:
  void clear_hhcactv();
  ::apollo::canbus::Bcusts5e_HhcactvType hhcactv() const;
  void set_hhcactv(::apollo::canbus::Bcusts5e_HhcactvType value);
  private:
  ::apollo::canbus::Bcusts5e_HhcactvType _internal_hhcactv() const;
  void _internal_set_hhcactv(::apollo::canbus::Bcusts5e_HhcactvType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Bcusts5e)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int tcsactv_;
  int scmavl_;
  int hfcactv_;
  int vdcactv_;
  int avhsts_;
  int autobrkgactv_;
  int vdcdeactv_;
  int abaactv_;
  int autobrkgavl_;
  int hbaactv_;
  int aebavl_;
  int aebactv_;
  int cdpavail_;
  int abaavl_;
  int hdcsts_;
  int tcsdeactv_;
  int awbavl_;
  int abpavl_;
  int awbactv_;
  int ebaavl_;
  int qdcaccfail_;
  int abpactv_;
  int pedpavl_;
  int cddsavl_;
  int standstillsts_;
  int hhcavail_;
  int absactv_;
  int pedpactv_;
  int ebaactv_;
  int cdpactv_;
  int ebdactv_;
  int scmactv_;
  int dtcactv_;
  int hrbactv_;
  int ecdttempoffs_;
  int cddsactv_;
  int hhcactv_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Pulsecnt65 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Pulsecnt65) */ {
 public:
  inline Pulsecnt65() : Pulsecnt65(nullptr) {}
  virtual ~Pulsecnt65();

  Pulsecnt65(const Pulsecnt65& from);
  Pulsecnt65(Pulsecnt65&& from) noexcept
    : Pulsecnt65() {
    *this = ::std::move(from);
  }

  inline Pulsecnt65& operator=(const Pulsecnt65& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pulsecnt65& operator=(Pulsecnt65&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pulsecnt65& default_instance();

  static inline const Pulsecnt65* internal_default_instance() {
    return reinterpret_cast<const Pulsecnt65*>(
               &_Pulsecnt65_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Pulsecnt65& a, Pulsecnt65& b) {
    a.Swap(&b);
  }
  inline void Swap(Pulsecnt65* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pulsecnt65* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pulsecnt65* New() const final {
    return CreateMaybeMessage<Pulsecnt65>(nullptr);
  }

  Pulsecnt65* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pulsecnt65>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pulsecnt65& from);
  void MergeFrom(const Pulsecnt65& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pulsecnt65* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Pulsecnt65";
  }
  protected:
  explicit Pulsecnt65(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Pulsecnt65_WhlplscntrrvldType WhlplscntrrvldType;
  static constexpr WhlplscntrrvldType WhlplscntRRvldvalid =
    Pulsecnt65_WhlplscntrrvldType_WhlplscntRRvldvalid;
  static constexpr WhlplscntrrvldType WhlplscntRRvldinvalid =
    Pulsecnt65_WhlplscntrrvldType_WhlplscntRRvldinvalid;
  static inline bool WhlplscntrrvldType_IsValid(int value) {
    return Pulsecnt65_WhlplscntrrvldType_IsValid(value);
  }
  static constexpr WhlplscntrrvldType WhlplscntrrvldType_MIN =
    Pulsecnt65_WhlplscntrrvldType_WhlplscntrrvldType_MIN;
  static constexpr WhlplscntrrvldType WhlplscntrrvldType_MAX =
    Pulsecnt65_WhlplscntrrvldType_WhlplscntrrvldType_MAX;
  static constexpr int WhlplscntrrvldType_ARRAYSIZE =
    Pulsecnt65_WhlplscntrrvldType_WhlplscntrrvldType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlplscntrrvldType_descriptor() {
    return Pulsecnt65_WhlplscntrrvldType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlplscntrrvldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlplscntrrvldType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlplscntrrvldType_Name.");
    return Pulsecnt65_WhlplscntrrvldType_Name(enum_t_value);
  }
  static inline bool WhlplscntrrvldType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlplscntrrvldType* value) {
    return Pulsecnt65_WhlplscntrrvldType_Parse(name, value);
  }

  typedef Pulsecnt65_WhlplscntrlvldType WhlplscntrlvldType;
  static constexpr WhlplscntrlvldType WhlplscntRLvldvalid =
    Pulsecnt65_WhlplscntrlvldType_WhlplscntRLvldvalid;
  static constexpr WhlplscntrlvldType WhlplscntRLvldinvalid =
    Pulsecnt65_WhlplscntrlvldType_WhlplscntRLvldinvalid;
  static inline bool WhlplscntrlvldType_IsValid(int value) {
    return Pulsecnt65_WhlplscntrlvldType_IsValid(value);
  }
  static constexpr WhlplscntrlvldType WhlplscntrlvldType_MIN =
    Pulsecnt65_WhlplscntrlvldType_WhlplscntrlvldType_MIN;
  static constexpr WhlplscntrlvldType WhlplscntrlvldType_MAX =
    Pulsecnt65_WhlplscntrlvldType_WhlplscntrlvldType_MAX;
  static constexpr int WhlplscntrlvldType_ARRAYSIZE =
    Pulsecnt65_WhlplscntrlvldType_WhlplscntrlvldType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlplscntrlvldType_descriptor() {
    return Pulsecnt65_WhlplscntrlvldType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlplscntrlvldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlplscntrlvldType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlplscntrlvldType_Name.");
    return Pulsecnt65_WhlplscntrlvldType_Name(enum_t_value);
  }
  static inline bool WhlplscntrlvldType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlplscntrlvldType* value) {
    return Pulsecnt65_WhlplscntrlvldType_Parse(name, value);
  }

  typedef Pulsecnt65_WhlplscntfrvldType WhlplscntfrvldType;
  static constexpr WhlplscntfrvldType WhlplscntFRvldvalid =
    Pulsecnt65_WhlplscntfrvldType_WhlplscntFRvldvalid;
  static constexpr WhlplscntfrvldType WhlplscntFRvldinvalid =
    Pulsecnt65_WhlplscntfrvldType_WhlplscntFRvldinvalid;
  static inline bool WhlplscntfrvldType_IsValid(int value) {
    return Pulsecnt65_WhlplscntfrvldType_IsValid(value);
  }
  static constexpr WhlplscntfrvldType WhlplscntfrvldType_MIN =
    Pulsecnt65_WhlplscntfrvldType_WhlplscntfrvldType_MIN;
  static constexpr WhlplscntfrvldType WhlplscntfrvldType_MAX =
    Pulsecnt65_WhlplscntfrvldType_WhlplscntfrvldType_MAX;
  static constexpr int WhlplscntfrvldType_ARRAYSIZE =
    Pulsecnt65_WhlplscntfrvldType_WhlplscntfrvldType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlplscntfrvldType_descriptor() {
    return Pulsecnt65_WhlplscntfrvldType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlplscntfrvldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlplscntfrvldType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlplscntfrvldType_Name.");
    return Pulsecnt65_WhlplscntfrvldType_Name(enum_t_value);
  }
  static inline bool WhlplscntfrvldType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlplscntfrvldType* value) {
    return Pulsecnt65_WhlplscntfrvldType_Parse(name, value);
  }

  typedef Pulsecnt65_WhlplscntflvldType WhlplscntflvldType;
  static constexpr WhlplscntflvldType WhlplscntFLvldvalid =
    Pulsecnt65_WhlplscntflvldType_WhlplscntFLvldvalid;
  static constexpr WhlplscntflvldType WhlplscntFLvldinvalid =
    Pulsecnt65_WhlplscntflvldType_WhlplscntFLvldinvalid;
  static inline bool WhlplscntflvldType_IsValid(int value) {
    return Pulsecnt65_WhlplscntflvldType_IsValid(value);
  }
  static constexpr WhlplscntflvldType WhlplscntflvldType_MIN =
    Pulsecnt65_WhlplscntflvldType_WhlplscntflvldType_MIN;
  static constexpr WhlplscntflvldType WhlplscntflvldType_MAX =
    Pulsecnt65_WhlplscntflvldType_WhlplscntflvldType_MAX;
  static constexpr int WhlplscntflvldType_ARRAYSIZE =
    Pulsecnt65_WhlplscntflvldType_WhlplscntflvldType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WhlplscntflvldType_descriptor() {
    return Pulsecnt65_WhlplscntflvldType_descriptor();
  }
  template<typename T>
  static inline const std::string& WhlplscntflvldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WhlplscntflvldType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WhlplscntflvldType_Name.");
    return Pulsecnt65_WhlplscntflvldType_Name(enum_t_value);
  }
  static inline bool WhlplscntflvldType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WhlplscntflvldType* value) {
    return Pulsecnt65_WhlplscntflvldType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWhlplscntrrvldFieldNumber = 1,
    kWhlplscntrrFieldNumber = 2,
    kWhlplscntrlvldFieldNumber = 3,
    kWhlplscntrlFieldNumber = 4,
    kWhlplscntfrvldFieldNumber = 5,
    kWhlplscntfrFieldNumber = 6,
    kWhlplscntflvldFieldNumber = 7,
    kWhlplscntflFieldNumber = 8,
  };
  // optional .apollo.canbus.Pulsecnt65.WhlplscntrrvldType whlplscntrrvld = 1;
  bool has_whlplscntrrvld() const;
  private:
  bool _internal_has_whlplscntrrvld() const;
  public:
  void clear_whlplscntrrvld();
  ::apollo::canbus::Pulsecnt65_WhlplscntrrvldType whlplscntrrvld() const;
  void set_whlplscntrrvld(::apollo::canbus::Pulsecnt65_WhlplscntrrvldType value);
  private:
  ::apollo::canbus::Pulsecnt65_WhlplscntrrvldType _internal_whlplscntrrvld() const;
  void _internal_set_whlplscntrrvld(::apollo::canbus::Pulsecnt65_WhlplscntrrvldType value);
  public:

  // optional int32 whlplscntrr = 2;
  bool has_whlplscntrr() const;
  private:
  bool _internal_has_whlplscntrr() const;
  public:
  void clear_whlplscntrr();
  ::PROTOBUF_NAMESPACE_ID::int32 whlplscntrr() const;
  void set_whlplscntrr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_whlplscntrr() const;
  void _internal_set_whlplscntrr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Pulsecnt65.WhlplscntrlvldType whlplscntrlvld = 3;
  bool has_whlplscntrlvld() const;
  private:
  bool _internal_has_whlplscntrlvld() const;
  public:
  void clear_whlplscntrlvld();
  ::apollo::canbus::Pulsecnt65_WhlplscntrlvldType whlplscntrlvld() const;
  void set_whlplscntrlvld(::apollo::canbus::Pulsecnt65_WhlplscntrlvldType value);
  private:
  ::apollo::canbus::Pulsecnt65_WhlplscntrlvldType _internal_whlplscntrlvld() const;
  void _internal_set_whlplscntrlvld(::apollo::canbus::Pulsecnt65_WhlplscntrlvldType value);
  public:

  // optional int32 whlplscntrl = 4;
  bool has_whlplscntrl() const;
  private:
  bool _internal_has_whlplscntrl() const;
  public:
  void clear_whlplscntrl();
  ::PROTOBUF_NAMESPACE_ID::int32 whlplscntrl() const;
  void set_whlplscntrl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_whlplscntrl() const;
  void _internal_set_whlplscntrl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Pulsecnt65.WhlplscntfrvldType whlplscntfrvld = 5;
  bool has_whlplscntfrvld() const;
  private:
  bool _internal_has_whlplscntfrvld() const;
  public:
  void clear_whlplscntfrvld();
  ::apollo::canbus::Pulsecnt65_WhlplscntfrvldType whlplscntfrvld() const;
  void set_whlplscntfrvld(::apollo::canbus::Pulsecnt65_WhlplscntfrvldType value);
  private:
  ::apollo::canbus::Pulsecnt65_WhlplscntfrvldType _internal_whlplscntfrvld() const;
  void _internal_set_whlplscntfrvld(::apollo::canbus::Pulsecnt65_WhlplscntfrvldType value);
  public:

  // optional int32 whlplscntfr = 6;
  bool has_whlplscntfr() const;
  private:
  bool _internal_has_whlplscntfr() const;
  public:
  void clear_whlplscntfr();
  ::PROTOBUF_NAMESPACE_ID::int32 whlplscntfr() const;
  void set_whlplscntfr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_whlplscntfr() const;
  void _internal_set_whlplscntfr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Pulsecnt65.WhlplscntflvldType whlplscntflvld = 7;
  bool has_whlplscntflvld() const;
  private:
  bool _internal_has_whlplscntflvld() const;
  public:
  void clear_whlplscntflvld();
  ::apollo::canbus::Pulsecnt65_WhlplscntflvldType whlplscntflvld() const;
  void set_whlplscntflvld(::apollo::canbus::Pulsecnt65_WhlplscntflvldType value);
  private:
  ::apollo::canbus::Pulsecnt65_WhlplscntflvldType _internal_whlplscntflvld() const;
  void _internal_set_whlplscntflvld(::apollo::canbus::Pulsecnt65_WhlplscntflvldType value);
  public:

  // optional int32 whlplscntfl = 8;
  bool has_whlplscntfl() const;
  private:
  bool _internal_has_whlplscntfl() const;
  public:
  void clear_whlplscntfl();
  ::PROTOBUF_NAMESPACE_ID::int32 whlplscntfl() const;
  void set_whlplscntfl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_whlplscntfl() const;
  void _internal_set_whlplscntfl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Pulsecnt65)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int whlplscntrrvld_;
  ::PROTOBUF_NAMESPACE_ID::int32 whlplscntrr_;
  int whlplscntrlvld_;
  ::PROTOBUF_NAMESPACE_ID::int32 whlplscntrl_;
  int whlplscntfrvld_;
  ::PROTOBUF_NAMESPACE_ID::int32 whlplscntfr_;
  int whlplscntflvld_;
  ::PROTOBUF_NAMESPACE_ID::int32 whlplscntfl_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Aebreq79 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Aebreq79) */ {
 public:
  inline Aebreq79() : Aebreq79(nullptr) {}
  virtual ~Aebreq79();

  Aebreq79(const Aebreq79& from);
  Aebreq79(Aebreq79&& from) noexcept
    : Aebreq79() {
    *this = ::std::move(from);
  }

  inline Aebreq79& operator=(const Aebreq79& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aebreq79& operator=(Aebreq79&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Aebreq79& default_instance();

  static inline const Aebreq79* internal_default_instance() {
    return reinterpret_cast<const Aebreq79*>(
               &_Aebreq79_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Aebreq79& a, Aebreq79& b) {
    a.Swap(&b);
  }
  inline void Swap(Aebreq79* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aebreq79* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Aebreq79* New() const final {
    return CreateMaybeMessage<Aebreq79>(nullptr);
  }

  Aebreq79* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Aebreq79>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Aebreq79& from);
  void MergeFrom(const Aebreq79& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aebreq79* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Aebreq79";
  }
  protected:
  explicit Aebreq79(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Aebreq79_AbareqType AbareqType;
  static constexpr AbareqType ABAReqNoRequest =
    Aebreq79_AbareqType_ABAReqNoRequest;
  static constexpr AbareqType ABAReqRequest =
    Aebreq79_AbareqType_ABAReqRequest;
  static inline bool AbareqType_IsValid(int value) {
    return Aebreq79_AbareqType_IsValid(value);
  }
  static constexpr AbareqType AbareqType_MIN =
    Aebreq79_AbareqType_AbareqType_MIN;
  static constexpr AbareqType AbareqType_MAX =
    Aebreq79_AbareqType_AbareqType_MAX;
  static constexpr int AbareqType_ARRAYSIZE =
    Aebreq79_AbareqType_AbareqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbareqType_descriptor() {
    return Aebreq79_AbareqType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbareqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbareqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbareqType_Name.");
    return Aebreq79_AbareqType_Name(enum_t_value);
  }
  static inline bool AbareqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbareqType* value) {
    return Aebreq79_AbareqType_Parse(name, value);
  }

  typedef Aebreq79_AbasnvtylvlType AbasnvtylvlType;
  static constexpr AbasnvtylvlType ABASnvtyLvlLevel0 =
    Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel0;
  static constexpr AbasnvtylvlType ABASnvtyLvlLevel1 =
    Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel1;
  static constexpr AbasnvtylvlType ABASnvtyLvlLevel2 =
    Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel2;
  static constexpr AbasnvtylvlType ABASnvtyLvlLevel3 =
    Aebreq79_AbasnvtylvlType_ABASnvtyLvlLevel3;
  static inline bool AbasnvtylvlType_IsValid(int value) {
    return Aebreq79_AbasnvtylvlType_IsValid(value);
  }
  static constexpr AbasnvtylvlType AbasnvtylvlType_MIN =
    Aebreq79_AbasnvtylvlType_AbasnvtylvlType_MIN;
  static constexpr AbasnvtylvlType AbasnvtylvlType_MAX =
    Aebreq79_AbasnvtylvlType_AbasnvtylvlType_MAX;
  static constexpr int AbasnvtylvlType_ARRAYSIZE =
    Aebreq79_AbasnvtylvlType_AbasnvtylvlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbasnvtylvlType_descriptor() {
    return Aebreq79_AbasnvtylvlType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbasnvtylvlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbasnvtylvlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbasnvtylvlType_Name.");
    return Aebreq79_AbasnvtylvlType_Name(enum_t_value);
  }
  static inline bool AbasnvtylvlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbasnvtylvlType* value) {
    return Aebreq79_AbasnvtylvlType_Parse(name, value);
  }

  typedef Aebreq79_AwbsnvtylvlType AwbsnvtylvlType;
  static constexpr AwbsnvtylvlType AWBSnvtyLvlLevel0 =
    Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel0;
  static constexpr AwbsnvtylvlType AWBSnvtyLvlLevel1 =
    Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel1;
  static constexpr AwbsnvtylvlType AWBSnvtyLvlLevel2 =
    Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel2;
  static constexpr AwbsnvtylvlType AWBSnvtyLvlLevel3 =
    Aebreq79_AwbsnvtylvlType_AWBSnvtyLvlLevel3;
  static inline bool AwbsnvtylvlType_IsValid(int value) {
    return Aebreq79_AwbsnvtylvlType_IsValid(value);
  }
  static constexpr AwbsnvtylvlType AwbsnvtylvlType_MIN =
    Aebreq79_AwbsnvtylvlType_AwbsnvtylvlType_MIN;
  static constexpr AwbsnvtylvlType AwbsnvtylvlType_MAX =
    Aebreq79_AwbsnvtylvlType_AwbsnvtylvlType_MAX;
  static constexpr int AwbsnvtylvlType_ARRAYSIZE =
    Aebreq79_AwbsnvtylvlType_AwbsnvtylvlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AwbsnvtylvlType_descriptor() {
    return Aebreq79_AwbsnvtylvlType_descriptor();
  }
  template<typename T>
  static inline const std::string& AwbsnvtylvlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AwbsnvtylvlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AwbsnvtylvlType_Name.");
    return Aebreq79_AwbsnvtylvlType_Name(enum_t_value);
  }
  static inline bool AwbsnvtylvlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AwbsnvtylvlType* value) {
    return Aebreq79_AwbsnvtylvlType_Parse(name, value);
  }

  typedef Aebreq79_AwbreqType AwbreqType;
  static constexpr AwbreqType AWBReqNoRequest =
    Aebreq79_AwbreqType_AWBReqNoRequest;
  static constexpr AwbreqType AWBReqRequest =
    Aebreq79_AwbreqType_AWBReqRequest;
  static inline bool AwbreqType_IsValid(int value) {
    return Aebreq79_AwbreqType_IsValid(value);
  }
  static constexpr AwbreqType AwbreqType_MIN =
    Aebreq79_AwbreqType_AwbreqType_MIN;
  static constexpr AwbreqType AwbreqType_MAX =
    Aebreq79_AwbreqType_AwbreqType_MAX;
  static constexpr int AwbreqType_ARRAYSIZE =
    Aebreq79_AwbreqType_AwbreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AwbreqType_descriptor() {
    return Aebreq79_AwbreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& AwbreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AwbreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AwbreqType_Name.");
    return Aebreq79_AwbreqType_Name(enum_t_value);
  }
  static inline bool AwbreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AwbreqType* value) {
    return Aebreq79_AwbreqType_Parse(name, value);
  }

  typedef Aebreq79_ScmdecelreqType ScmdecelreqType;
  static constexpr ScmdecelreqType SCMDecelReqNoRequest =
    Aebreq79_ScmdecelreqType_SCMDecelReqNoRequest;
  static constexpr ScmdecelreqType SCMDecelReqRequest =
    Aebreq79_ScmdecelreqType_SCMDecelReqRequest;
  static inline bool ScmdecelreqType_IsValid(int value) {
    return Aebreq79_ScmdecelreqType_IsValid(value);
  }
  static constexpr ScmdecelreqType ScmdecelreqType_MIN =
    Aebreq79_ScmdecelreqType_ScmdecelreqType_MIN;
  static constexpr ScmdecelreqType ScmdecelreqType_MAX =
    Aebreq79_ScmdecelreqType_ScmdecelreqType_MAX;
  static constexpr int ScmdecelreqType_ARRAYSIZE =
    Aebreq79_ScmdecelreqType_ScmdecelreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScmdecelreqType_descriptor() {
    return Aebreq79_ScmdecelreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& ScmdecelreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScmdecelreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScmdecelreqType_Name.");
    return Aebreq79_ScmdecelreqType_Name(enum_t_value);
  }
  static inline bool ScmdecelreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScmdecelreqType* value) {
    return Aebreq79_ScmdecelreqType_Parse(name, value);
  }

  typedef Aebreq79_AebdecelreqType AebdecelreqType;
  static constexpr AebdecelreqType AEBDecelReqNoRequest =
    Aebreq79_AebdecelreqType_AEBDecelReqNoRequest;
  static constexpr AebdecelreqType AEBDecelReqRequest =
    Aebreq79_AebdecelreqType_AEBDecelReqRequest;
  static inline bool AebdecelreqType_IsValid(int value) {
    return Aebreq79_AebdecelreqType_IsValid(value);
  }
  static constexpr AebdecelreqType AebdecelreqType_MIN =
    Aebreq79_AebdecelreqType_AebdecelreqType_MIN;
  static constexpr AebdecelreqType AebdecelreqType_MAX =
    Aebreq79_AebdecelreqType_AebdecelreqType_MAX;
  static constexpr int AebdecelreqType_ARRAYSIZE =
    Aebreq79_AebdecelreqType_AebdecelreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AebdecelreqType_descriptor() {
    return Aebreq79_AebdecelreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& AebdecelreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AebdecelreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AebdecelreqType_Name.");
    return Aebreq79_AebdecelreqType_Name(enum_t_value);
  }
  static inline bool AebdecelreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AebdecelreqType* value) {
    return Aebreq79_AebdecelreqType_Parse(name, value);
  }

  typedef Aebreq79_EbadecelreqType EbadecelreqType;
  static constexpr EbadecelreqType EBADecelReqNoRequest =
    Aebreq79_EbadecelreqType_EBADecelReqNoRequest;
  static constexpr EbadecelreqType EBADecelReqRequest =
    Aebreq79_EbadecelreqType_EBADecelReqRequest;
  static inline bool EbadecelreqType_IsValid(int value) {
    return Aebreq79_EbadecelreqType_IsValid(value);
  }
  static constexpr EbadecelreqType EbadecelreqType_MIN =
    Aebreq79_EbadecelreqType_EbadecelreqType_MIN;
  static constexpr EbadecelreqType EbadecelreqType_MAX =
    Aebreq79_EbadecelreqType_EbadecelreqType_MAX;
  static constexpr int EbadecelreqType_ARRAYSIZE =
    Aebreq79_EbadecelreqType_EbadecelreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EbadecelreqType_descriptor() {
    return Aebreq79_EbadecelreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& EbadecelreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EbadecelreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EbadecelreqType_Name.");
    return Aebreq79_EbadecelreqType_Name(enum_t_value);
  }
  static inline bool EbadecelreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EbadecelreqType* value) {
    return Aebreq79_EbadecelreqType_Parse(name, value);
  }

  typedef Aebreq79_AbpreqType AbpreqType;
  static constexpr AbpreqType ABPReqNoRequest =
    Aebreq79_AbpreqType_ABPReqNoRequest;
  static constexpr AbpreqType ABPReqRequest =
    Aebreq79_AbpreqType_ABPReqRequest;
  static inline bool AbpreqType_IsValid(int value) {
    return Aebreq79_AbpreqType_IsValid(value);
  }
  static constexpr AbpreqType AbpreqType_MIN =
    Aebreq79_AbpreqType_AbpreqType_MIN;
  static constexpr AbpreqType AbpreqType_MAX =
    Aebreq79_AbpreqType_AbpreqType_MAX;
  static constexpr int AbpreqType_ARRAYSIZE =
    Aebreq79_AbpreqType_AbpreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbpreqType_descriptor() {
    return Aebreq79_AbpreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbpreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbpreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbpreqType_Name.");
    return Aebreq79_AbpreqType_Name(enum_t_value);
  }
  static inline bool AbpreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbpreqType* value) {
    return Aebreq79_AbpreqType_Parse(name, value);
  }

  typedef Aebreq79_PedpdecreqType PedpdecreqType;
  static constexpr PedpdecreqType PEDPDecReqNoRequest =
    Aebreq79_PedpdecreqType_PEDPDecReqNoRequest;
  static constexpr PedpdecreqType PEDPDecReqRequest =
    Aebreq79_PedpdecreqType_PEDPDecReqRequest;
  static inline bool PedpdecreqType_IsValid(int value) {
    return Aebreq79_PedpdecreqType_IsValid(value);
  }
  static constexpr PedpdecreqType PedpdecreqType_MIN =
    Aebreq79_PedpdecreqType_PedpdecreqType_MIN;
  static constexpr PedpdecreqType PedpdecreqType_MAX =
    Aebreq79_PedpdecreqType_PedpdecreqType_MAX;
  static constexpr int PedpdecreqType_ARRAYSIZE =
    Aebreq79_PedpdecreqType_PedpdecreqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PedpdecreqType_descriptor() {
    return Aebreq79_PedpdecreqType_descriptor();
  }
  template<typename T>
  static inline const std::string& PedpdecreqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PedpdecreqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PedpdecreqType_Name.");
    return Aebreq79_PedpdecreqType_Name(enum_t_value);
  }
  static inline bool PedpdecreqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PedpdecreqType* value) {
    return Aebreq79_PedpdecreqType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAebtardecelFieldNumber = 1,
    kAbareqFieldNumber = 2,
    kAbasnvtylvlFieldNumber = 3,
    kAwbsnvtylvlFieldNumber = 4,
    kAwbreqFieldNumber = 5,
    kScmdecelreqFieldNumber = 6,
    kAebmsgcntrFieldNumber = 7,
    kAebdecelreqFieldNumber = 8,
    kEbadecelreqFieldNumber = 9,
    kAbpreqFieldNumber = 10,
    kPedpdecreqFieldNumber = 11,
    kAebcrcFieldNumber = 12,
  };
  // optional double aebtardecel = 1;
  bool has_aebtardecel() const;
  private:
  bool _internal_has_aebtardecel() const;
  public:
  void clear_aebtardecel();
  double aebtardecel() const;
  void set_aebtardecel(double value);
  private:
  double _internal_aebtardecel() const;
  void _internal_set_aebtardecel(double value);
  public:

  // optional .apollo.canbus.Aebreq79.AbareqType abareq = 2;
  bool has_abareq() const;
  private:
  bool _internal_has_abareq() const;
  public:
  void clear_abareq();
  ::apollo::canbus::Aebreq79_AbareqType abareq() const;
  void set_abareq(::apollo::canbus::Aebreq79_AbareqType value);
  private:
  ::apollo::canbus::Aebreq79_AbareqType _internal_abareq() const;
  void _internal_set_abareq(::apollo::canbus::Aebreq79_AbareqType value);
  public:

  // optional .apollo.canbus.Aebreq79.AbasnvtylvlType abasnvtylvl = 3;
  bool has_abasnvtylvl() const;
  private:
  bool _internal_has_abasnvtylvl() const;
  public:
  void clear_abasnvtylvl();
  ::apollo::canbus::Aebreq79_AbasnvtylvlType abasnvtylvl() const;
  void set_abasnvtylvl(::apollo::canbus::Aebreq79_AbasnvtylvlType value);
  private:
  ::apollo::canbus::Aebreq79_AbasnvtylvlType _internal_abasnvtylvl() const;
  void _internal_set_abasnvtylvl(::apollo::canbus::Aebreq79_AbasnvtylvlType value);
  public:

  // optional .apollo.canbus.Aebreq79.AwbsnvtylvlType awbsnvtylvl = 4;
  bool has_awbsnvtylvl() const;
  private:
  bool _internal_has_awbsnvtylvl() const;
  public:
  void clear_awbsnvtylvl();
  ::apollo::canbus::Aebreq79_AwbsnvtylvlType awbsnvtylvl() const;
  void set_awbsnvtylvl(::apollo::canbus::Aebreq79_AwbsnvtylvlType value);
  private:
  ::apollo::canbus::Aebreq79_AwbsnvtylvlType _internal_awbsnvtylvl() const;
  void _internal_set_awbsnvtylvl(::apollo::canbus::Aebreq79_AwbsnvtylvlType value);
  public:

  // optional .apollo.canbus.Aebreq79.AwbreqType awbreq = 5;
  bool has_awbreq() const;
  private:
  bool _internal_has_awbreq() const;
  public:
  void clear_awbreq();
  ::apollo::canbus::Aebreq79_AwbreqType awbreq() const;
  void set_awbreq(::apollo::canbus::Aebreq79_AwbreqType value);
  private:
  ::apollo::canbus::Aebreq79_AwbreqType _internal_awbreq() const;
  void _internal_set_awbreq(::apollo::canbus::Aebreq79_AwbreqType value);
  public:

  // optional .apollo.canbus.Aebreq79.ScmdecelreqType scmdecelreq = 6;
  bool has_scmdecelreq() const;
  private:
  bool _internal_has_scmdecelreq() const;
  public:
  void clear_scmdecelreq();
  ::apollo::canbus::Aebreq79_ScmdecelreqType scmdecelreq() const;
  void set_scmdecelreq(::apollo::canbus::Aebreq79_ScmdecelreqType value);
  private:
  ::apollo::canbus::Aebreq79_ScmdecelreqType _internal_scmdecelreq() const;
  void _internal_set_scmdecelreq(::apollo::canbus::Aebreq79_ScmdecelreqType value);
  public:

  // optional int32 aebmsgcntr = 7;
  bool has_aebmsgcntr() const;
  private:
  bool _internal_has_aebmsgcntr() const;
  public:
  void clear_aebmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 aebmsgcntr() const;
  void set_aebmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aebmsgcntr() const;
  void _internal_set_aebmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Aebreq79.AebdecelreqType aebdecelreq = 8;
  bool has_aebdecelreq() const;
  private:
  bool _internal_has_aebdecelreq() const;
  public:
  void clear_aebdecelreq();
  ::apollo::canbus::Aebreq79_AebdecelreqType aebdecelreq() const;
  void set_aebdecelreq(::apollo::canbus::Aebreq79_AebdecelreqType value);
  private:
  ::apollo::canbus::Aebreq79_AebdecelreqType _internal_aebdecelreq() const;
  void _internal_set_aebdecelreq(::apollo::canbus::Aebreq79_AebdecelreqType value);
  public:

  // optional .apollo.canbus.Aebreq79.EbadecelreqType ebadecelreq = 9;
  bool has_ebadecelreq() const;
  private:
  bool _internal_has_ebadecelreq() const;
  public:
  void clear_ebadecelreq();
  ::apollo::canbus::Aebreq79_EbadecelreqType ebadecelreq() const;
  void set_ebadecelreq(::apollo::canbus::Aebreq79_EbadecelreqType value);
  private:
  ::apollo::canbus::Aebreq79_EbadecelreqType _internal_ebadecelreq() const;
  void _internal_set_ebadecelreq(::apollo::canbus::Aebreq79_EbadecelreqType value);
  public:

  // optional .apollo.canbus.Aebreq79.AbpreqType abpreq = 10;
  bool has_abpreq() const;
  private:
  bool _internal_has_abpreq() const;
  public:
  void clear_abpreq();
  ::apollo::canbus::Aebreq79_AbpreqType abpreq() const;
  void set_abpreq(::apollo::canbus::Aebreq79_AbpreqType value);
  private:
  ::apollo::canbus::Aebreq79_AbpreqType _internal_abpreq() const;
  void _internal_set_abpreq(::apollo::canbus::Aebreq79_AbpreqType value);
  public:

  // optional .apollo.canbus.Aebreq79.PedpdecreqType pedpdecreq = 11;
  bool has_pedpdecreq() const;
  private:
  bool _internal_has_pedpdecreq() const;
  public:
  void clear_pedpdecreq();
  ::apollo::canbus::Aebreq79_PedpdecreqType pedpdecreq() const;
  void set_pedpdecreq(::apollo::canbus::Aebreq79_PedpdecreqType value);
  private:
  ::apollo::canbus::Aebreq79_PedpdecreqType _internal_pedpdecreq() const;
  void _internal_set_pedpdecreq(::apollo::canbus::Aebreq79_PedpdecreqType value);
  public:

  // optional int32 aebcrc = 12;
  bool has_aebcrc() const;
  private:
  bool _internal_has_aebcrc() const;
  public:
  void clear_aebcrc();
  ::PROTOBUF_NAMESPACE_ID::int32 aebcrc() const;
  void set_aebcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aebcrc() const;
  void _internal_set_aebcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Aebreq79)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double aebtardecel_;
  int abareq_;
  int abasnvtylvl_;
  int awbsnvtylvl_;
  int awbreq_;
  int scmdecelreq_;
  ::PROTOBUF_NAMESPACE_ID::int32 aebmsgcntr_;
  int aebdecelreq_;
  int ebadecelreq_;
  int abpreq_;
  int pedpdecreq_;
  ::PROTOBUF_NAMESPACE_ID::int32 aebcrc_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Scmsts7b PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scmsts7b) */ {
 public:
  inline Scmsts7b() : Scmsts7b(nullptr) {}
  virtual ~Scmsts7b();

  Scmsts7b(const Scmsts7b& from);
  Scmsts7b(Scmsts7b&& from) noexcept
    : Scmsts7b() {
    *this = ::std::move(from);
  }

  inline Scmsts7b& operator=(const Scmsts7b& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scmsts7b& operator=(Scmsts7b&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scmsts7b& default_instance();

  static inline const Scmsts7b* internal_default_instance() {
    return reinterpret_cast<const Scmsts7b*>(
               &_Scmsts7b_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Scmsts7b& a, Scmsts7b& b) {
    a.Swap(&b);
  }
  inline void Swap(Scmsts7b* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scmsts7b* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scmsts7b* New() const final {
    return CreateMaybeMessage<Scmsts7b>(nullptr);
  }

  Scmsts7b* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scmsts7b>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scmsts7b& from);
  void MergeFrom(const Scmsts7b& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scmsts7b* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Scmsts7b";
  }
  protected:
  explicit Scmsts7b(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Scmsts7b_ScmfailstsType ScmfailstsType;
  static constexpr ScmfailstsType SCMFailStsNormal =
    Scmsts7b_ScmfailstsType_SCMFailStsNormal;
  static constexpr ScmfailstsType SCMFailStsFail =
    Scmsts7b_ScmfailstsType_SCMFailStsFail;
  static constexpr ScmfailstsType SCMFailStsReserved =
    Scmsts7b_ScmfailstsType_SCMFailStsReserved;
  static constexpr ScmfailstsType SCMFailStsInvalid =
    Scmsts7b_ScmfailstsType_SCMFailStsInvalid;
  static inline bool ScmfailstsType_IsValid(int value) {
    return Scmsts7b_ScmfailstsType_IsValid(value);
  }
  static constexpr ScmfailstsType ScmfailstsType_MIN =
    Scmsts7b_ScmfailstsType_ScmfailstsType_MIN;
  static constexpr ScmfailstsType ScmfailstsType_MAX =
    Scmsts7b_ScmfailstsType_ScmfailstsType_MAX;
  static constexpr int ScmfailstsType_ARRAYSIZE =
    Scmsts7b_ScmfailstsType_ScmfailstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScmfailstsType_descriptor() {
    return Scmsts7b_ScmfailstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& ScmfailstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScmfailstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScmfailstsType_Name.");
    return Scmsts7b_ScmfailstsType_Name(enum_t_value);
  }
  static inline bool ScmfailstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScmfailstsType* value) {
    return Scmsts7b_ScmfailstsType_Parse(name, value);
  }

  typedef Scmsts7b_HilowbeampushswtstsType HilowbeampushswtstsType;
  static constexpr HilowbeampushswtstsType HiLowBeamPushSwtStsNoCommandDefaultPosition =
    Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsNoCommandDefaultPosition;
  static constexpr HilowbeampushswtstsType HiLowBeamPushSwtStsFlashCommand =
    Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsFlashCommand;
  static constexpr HilowbeampushswtstsType HiLowBeamPushSwtStsLowBeamOrHighBeamCommand =
    Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsLowBeamOrHighBeamCommand;
  static constexpr HilowbeampushswtstsType HiLowBeamPushSwtStsInvalid =
    Scmsts7b_HilowbeampushswtstsType_HiLowBeamPushSwtStsInvalid;
  static inline bool HilowbeampushswtstsType_IsValid(int value) {
    return Scmsts7b_HilowbeampushswtstsType_IsValid(value);
  }
  static constexpr HilowbeampushswtstsType HilowbeampushswtstsType_MIN =
    Scmsts7b_HilowbeampushswtstsType_HilowbeampushswtstsType_MIN;
  static constexpr HilowbeampushswtstsType HilowbeampushswtstsType_MAX =
    Scmsts7b_HilowbeampushswtstsType_HilowbeampushswtstsType_MAX;
  static constexpr int HilowbeampushswtstsType_ARRAYSIZE =
    Scmsts7b_HilowbeampushswtstsType_HilowbeampushswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HilowbeampushswtstsType_descriptor() {
    return Scmsts7b_HilowbeampushswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& HilowbeampushswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HilowbeampushswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HilowbeampushswtstsType_Name.");
    return Scmsts7b_HilowbeampushswtstsType_Name(enum_t_value);
  }
  static inline bool HilowbeampushswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HilowbeampushswtstsType* value) {
    return Scmsts7b_HilowbeampushswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_FrntwiprswtstsType FrntwiprswtstsType;
  static constexpr FrntwiprswtstsType FrntWiprSwtStsFrontWiperOff =
    Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperOff;
  static constexpr FrntwiprswtstsType FrntWiprSwtStsFrontWiperLowSpeed =
    Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperLowSpeed;
  static constexpr FrntwiprswtstsType FrntWiprSwtStsFrontWiperHighSpeed =
    Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperHighSpeed;
  static constexpr FrntwiprswtstsType FrntWiprSwtStsFrontWiperIntermediateSpeed =
    Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperIntermediateSpeed;
  static constexpr FrntwiprswtstsType FrntWiprSwtStsFrontWiperWipeOneTime =
    Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsFrontWiperWipeOneTime;
  static constexpr FrntwiprswtstsType FrntWiprSwtStsReserved5 =
    Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsReserved5;
  static constexpr FrntwiprswtstsType FrntWiprSwtStsReserved6 =
    Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsReserved6;
  static constexpr FrntwiprswtstsType FrntWiprSwtStsInvalid =
    Scmsts7b_FrntwiprswtstsType_FrntWiprSwtStsInvalid;
  static inline bool FrntwiprswtstsType_IsValid(int value) {
    return Scmsts7b_FrntwiprswtstsType_IsValid(value);
  }
  static constexpr FrntwiprswtstsType FrntwiprswtstsType_MIN =
    Scmsts7b_FrntwiprswtstsType_FrntwiprswtstsType_MIN;
  static constexpr FrntwiprswtstsType FrntwiprswtstsType_MAX =
    Scmsts7b_FrntwiprswtstsType_FrntwiprswtstsType_MAX;
  static constexpr int FrntwiprswtstsType_ARRAYSIZE =
    Scmsts7b_FrntwiprswtstsType_FrntwiprswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrntwiprswtstsType_descriptor() {
    return Scmsts7b_FrntwiprswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrntwiprswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrntwiprswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrntwiprswtstsType_Name.");
    return Scmsts7b_FrntwiprswtstsType_Name(enum_t_value);
  }
  static inline bool FrntwiprswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrntwiprswtstsType* value) {
    return Scmsts7b_FrntwiprswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_TurnindcrswtstsType TurnindcrswtstsType;
  static constexpr TurnindcrswtstsType TurnIndcrSwtStsNoTurnIndicator =
    Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsNoTurnIndicator;
  static constexpr TurnindcrswtstsType TurnIndcrSwtStsTurnIndicatorLeft =
    Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsTurnIndicatorLeft;
  static constexpr TurnindcrswtstsType TurnIndcrSwtStsTurnIndicatorRight =
    Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsTurnIndicatorRight;
  static constexpr TurnindcrswtstsType TurnIndcrSwtStsInvalid =
    Scmsts7b_TurnindcrswtstsType_TurnIndcrSwtStsInvalid;
  static inline bool TurnindcrswtstsType_IsValid(int value) {
    return Scmsts7b_TurnindcrswtstsType_IsValid(value);
  }
  static constexpr TurnindcrswtstsType TurnindcrswtstsType_MIN =
    Scmsts7b_TurnindcrswtstsType_TurnindcrswtstsType_MIN;
  static constexpr TurnindcrswtstsType TurnindcrswtstsType_MAX =
    Scmsts7b_TurnindcrswtstsType_TurnindcrswtstsType_MAX;
  static constexpr int TurnindcrswtstsType_ARRAYSIZE =
    Scmsts7b_TurnindcrswtstsType_TurnindcrswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TurnindcrswtstsType_descriptor() {
    return Scmsts7b_TurnindcrswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& TurnindcrswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TurnindcrswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TurnindcrswtstsType_Name.");
    return Scmsts7b_TurnindcrswtstsType_Name(enum_t_value);
  }
  static inline bool TurnindcrswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TurnindcrswtstsType* value) {
    return Scmsts7b_TurnindcrswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_FoglipushswtstsType FoglipushswtstsType;
  static constexpr FoglipushswtstsType FogLiPushSwtStsPushSwitchNotPressed =
    Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsPushSwitchNotPressed;
  static constexpr FoglipushswtstsType FogLiPushSwtStsPushSwitchPressed =
    Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsPushSwitchPressed;
  static constexpr FoglipushswtstsType FogLiPushSwtStsReserved =
    Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsReserved;
  static constexpr FoglipushswtstsType FogLiPushSwtStsInvalid =
    Scmsts7b_FoglipushswtstsType_FogLiPushSwtStsInvalid;
  static inline bool FoglipushswtstsType_IsValid(int value) {
    return Scmsts7b_FoglipushswtstsType_IsValid(value);
  }
  static constexpr FoglipushswtstsType FoglipushswtstsType_MIN =
    Scmsts7b_FoglipushswtstsType_FoglipushswtstsType_MIN;
  static constexpr FoglipushswtstsType FoglipushswtstsType_MAX =
    Scmsts7b_FoglipushswtstsType_FoglipushswtstsType_MAX;
  static constexpr int FoglipushswtstsType_ARRAYSIZE =
    Scmsts7b_FoglipushswtstsType_FoglipushswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FoglipushswtstsType_descriptor() {
    return Scmsts7b_FoglipushswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& FoglipushswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FoglipushswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FoglipushswtstsType_Name.");
    return Scmsts7b_FoglipushswtstsType_Name(enum_t_value);
  }
  static inline bool FoglipushswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FoglipushswtstsType* value) {
    return Scmsts7b_FoglipushswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_FrntwiprinterspdType FrntwiprinterspdType;
  static constexpr FrntwiprinterspdType FrntWiprInterSpdReserved =
    Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdReserved;
  static constexpr FrntwiprinterspdType FrntWiprInterSpdIntermediateSpeed1 =
    Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdIntermediateSpeed1;
  static constexpr FrntwiprinterspdType FrntWiprInterSpdIntermediateSpeed2 =
    Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdIntermediateSpeed2;
  static constexpr FrntwiprinterspdType FrntWiprInterSpdIntermediateSpeed3 =
    Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdIntermediateSpeed3;
  static constexpr FrntwiprinterspdType FrntWiprInterSpdIntermediateSpeed4 =
    Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdIntermediateSpeed4;
  static constexpr FrntwiprinterspdType FrntWiprInterSpdReserved5 =
    Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdReserved5;
  static constexpr FrntwiprinterspdType FrntWiprInterSpdReserved6 =
    Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdReserved6;
  static constexpr FrntwiprinterspdType FrntWiprInterSpdInvalid =
    Scmsts7b_FrntwiprinterspdType_FrntWiprInterSpdInvalid;
  static inline bool FrntwiprinterspdType_IsValid(int value) {
    return Scmsts7b_FrntwiprinterspdType_IsValid(value);
  }
  static constexpr FrntwiprinterspdType FrntwiprinterspdType_MIN =
    Scmsts7b_FrntwiprinterspdType_FrntwiprinterspdType_MIN;
  static constexpr FrntwiprinterspdType FrntwiprinterspdType_MAX =
    Scmsts7b_FrntwiprinterspdType_FrntwiprinterspdType_MAX;
  static constexpr int FrntwiprinterspdType_ARRAYSIZE =
    Scmsts7b_FrntwiprinterspdType_FrntwiprinterspdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrntwiprinterspdType_descriptor() {
    return Scmsts7b_FrntwiprinterspdType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrntwiprinterspdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrntwiprinterspdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrntwiprinterspdType_Name.");
    return Scmsts7b_FrntwiprinterspdType_Name(enum_t_value);
  }
  static inline bool FrntwiprinterspdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrntwiprinterspdType* value) {
    return Scmsts7b_FrntwiprinterspdType_Parse(name, value);
  }

  typedef Scmsts7b_MenuorvoldwnpushswtstsType MenuorvoldwnpushswtstsType;
  static constexpr MenuorvoldwnpushswtstsType MenuOrVolDwnPushSwtStsNotPressed =
    Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsNotPressed;
  static constexpr MenuorvoldwnpushswtstsType MenuOrVolDwnPushSwtStsPressed =
    Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsPressed;
  static constexpr MenuorvoldwnpushswtstsType MenuOrVolDwnPushSwtStsReserved =
    Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsReserved;
  static constexpr MenuorvoldwnpushswtstsType MenuOrVolDwnPushSwtStsInvalid =
    Scmsts7b_MenuorvoldwnpushswtstsType_MenuOrVolDwnPushSwtStsInvalid;
  static inline bool MenuorvoldwnpushswtstsType_IsValid(int value) {
    return Scmsts7b_MenuorvoldwnpushswtstsType_IsValid(value);
  }
  static constexpr MenuorvoldwnpushswtstsType MenuorvoldwnpushswtstsType_MIN =
    Scmsts7b_MenuorvoldwnpushswtstsType_MenuorvoldwnpushswtstsType_MIN;
  static constexpr MenuorvoldwnpushswtstsType MenuorvoldwnpushswtstsType_MAX =
    Scmsts7b_MenuorvoldwnpushswtstsType_MenuorvoldwnpushswtstsType_MAX;
  static constexpr int MenuorvoldwnpushswtstsType_ARRAYSIZE =
    Scmsts7b_MenuorvoldwnpushswtstsType_MenuorvoldwnpushswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MenuorvoldwnpushswtstsType_descriptor() {
    return Scmsts7b_MenuorvoldwnpushswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& MenuorvoldwnpushswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MenuorvoldwnpushswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MenuorvoldwnpushswtstsType_Name.");
    return Scmsts7b_MenuorvoldwnpushswtstsType_Name(enum_t_value);
  }
  static inline bool MenuorvoldwnpushswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MenuorvoldwnpushswtstsType* value) {
    return Scmsts7b_MenuorvoldwnpushswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_AccspdincorresuswtstsType AccspdincorresuswtstsType;
  static constexpr AccspdincorresuswtstsType AccSpdIncOrResuSwtStsNotPressed =
    Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsNotPressed;
  static constexpr AccspdincorresuswtstsType AccSpdIncOrResuSwtStsPressed =
    Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsPressed;
  static constexpr AccspdincorresuswtstsType AccSpdIncOrResuSwtStsReserved =
    Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsReserved;
  static constexpr AccspdincorresuswtstsType AccSpdIncOrResuSwtStsInvalid =
    Scmsts7b_AccspdincorresuswtstsType_AccSpdIncOrResuSwtStsInvalid;
  static inline bool AccspdincorresuswtstsType_IsValid(int value) {
    return Scmsts7b_AccspdincorresuswtstsType_IsValid(value);
  }
  static constexpr AccspdincorresuswtstsType AccspdincorresuswtstsType_MIN =
    Scmsts7b_AccspdincorresuswtstsType_AccspdincorresuswtstsType_MIN;
  static constexpr AccspdincorresuswtstsType AccspdincorresuswtstsType_MAX =
    Scmsts7b_AccspdincorresuswtstsType_AccspdincorresuswtstsType_MAX;
  static constexpr int AccspdincorresuswtstsType_ARRAYSIZE =
    Scmsts7b_AccspdincorresuswtstsType_AccspdincorresuswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccspdincorresuswtstsType_descriptor() {
    return Scmsts7b_AccspdincorresuswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccspdincorresuswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccspdincorresuswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccspdincorresuswtstsType_Name.");
    return Scmsts7b_AccspdincorresuswtstsType_Name(enum_t_value);
  }
  static inline bool AccspdincorresuswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccspdincorresuswtstsType* value) {
    return Scmsts7b_AccspdincorresuswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_AcctimegapincswtstsType AcctimegapincswtstsType;
  static constexpr AcctimegapincswtstsType AccTimeGapIncSwtStsNotPressed =
    Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsNotPressed;
  static constexpr AcctimegapincswtstsType AccTimeGapIncSwtStsPressed =
    Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsPressed;
  static constexpr AcctimegapincswtstsType AccTimeGapIncSwtStsReserved =
    Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsReserved;
  static constexpr AcctimegapincswtstsType AccTimeGapIncSwtStsInvalid =
    Scmsts7b_AcctimegapincswtstsType_AccTimeGapIncSwtStsInvalid;
  static inline bool AcctimegapincswtstsType_IsValid(int value) {
    return Scmsts7b_AcctimegapincswtstsType_IsValid(value);
  }
  static constexpr AcctimegapincswtstsType AcctimegapincswtstsType_MIN =
    Scmsts7b_AcctimegapincswtstsType_AcctimegapincswtstsType_MIN;
  static constexpr AcctimegapincswtstsType AcctimegapincswtstsType_MAX =
    Scmsts7b_AcctimegapincswtstsType_AcctimegapincswtstsType_MAX;
  static constexpr int AcctimegapincswtstsType_ARRAYSIZE =
    Scmsts7b_AcctimegapincswtstsType_AcctimegapincswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AcctimegapincswtstsType_descriptor() {
    return Scmsts7b_AcctimegapincswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AcctimegapincswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AcctimegapincswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AcctimegapincswtstsType_Name.");
    return Scmsts7b_AcctimegapincswtstsType_Name(enum_t_value);
  }
  static inline bool AcctimegapincswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AcctimegapincswtstsType* value) {
    return Scmsts7b_AcctimegapincswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_SelnpushswtstsType SelnpushswtstsType;
  static constexpr SelnpushswtstsType SelnPushSwtStsNotPressed =
    Scmsts7b_SelnpushswtstsType_SelnPushSwtStsNotPressed;
  static constexpr SelnpushswtstsType SelnPushSwtStsPressed =
    Scmsts7b_SelnpushswtstsType_SelnPushSwtStsPressed;
  static constexpr SelnpushswtstsType SelnPushSwtStsReserved =
    Scmsts7b_SelnpushswtstsType_SelnPushSwtStsReserved;
  static constexpr SelnpushswtstsType SelnPushSwtStsInvalid =
    Scmsts7b_SelnpushswtstsType_SelnPushSwtStsInvalid;
  static inline bool SelnpushswtstsType_IsValid(int value) {
    return Scmsts7b_SelnpushswtstsType_IsValid(value);
  }
  static constexpr SelnpushswtstsType SelnpushswtstsType_MIN =
    Scmsts7b_SelnpushswtstsType_SelnpushswtstsType_MIN;
  static constexpr SelnpushswtstsType SelnpushswtstsType_MAX =
    Scmsts7b_SelnpushswtstsType_SelnpushswtstsType_MAX;
  static constexpr int SelnpushswtstsType_ARRAYSIZE =
    Scmsts7b_SelnpushswtstsType_SelnpushswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SelnpushswtstsType_descriptor() {
    return Scmsts7b_SelnpushswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SelnpushswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SelnpushswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SelnpushswtstsType_Name.");
    return Scmsts7b_SelnpushswtstsType_Name(enum_t_value);
  }
  static inline bool SelnpushswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SelnpushswtstsType* value) {
    return Scmsts7b_SelnpushswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_ModetogdecswtstsType ModetogdecswtstsType;
  static constexpr ModetogdecswtstsType ModeTogDecSwtStsNotPressed =
    Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsNotPressed;
  static constexpr ModetogdecswtstsType ModeTogDecSwtStsPressed =
    Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsPressed;
  static constexpr ModetogdecswtstsType ModeTogDecSwtStsReserved =
    Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsReserved;
  static constexpr ModetogdecswtstsType ModeTogDecSwtStsInvalid =
    Scmsts7b_ModetogdecswtstsType_ModeTogDecSwtStsInvalid;
  static inline bool ModetogdecswtstsType_IsValid(int value) {
    return Scmsts7b_ModetogdecswtstsType_IsValid(value);
  }
  static constexpr ModetogdecswtstsType ModetogdecswtstsType_MIN =
    Scmsts7b_ModetogdecswtstsType_ModetogdecswtstsType_MIN;
  static constexpr ModetogdecswtstsType ModetogdecswtstsType_MAX =
    Scmsts7b_ModetogdecswtstsType_ModetogdecswtstsType_MAX;
  static constexpr int ModetogdecswtstsType_ARRAYSIZE =
    Scmsts7b_ModetogdecswtstsType_ModetogdecswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModetogdecswtstsType_descriptor() {
    return Scmsts7b_ModetogdecswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& ModetogdecswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModetogdecswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModetogdecswtstsType_Name.");
    return Scmsts7b_ModetogdecswtstsType_Name(enum_t_value);
  }
  static inline bool ModetogdecswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModetogdecswtstsType* value) {
    return Scmsts7b_ModetogdecswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_ModetogincswtstsType ModetogincswtstsType;
  static constexpr ModetogincswtstsType ModeTogIncSwtStsNotPressed =
    Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsNotPressed;
  static constexpr ModetogincswtstsType ModeTogIncSwtStsPressed =
    Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsPressed;
  static constexpr ModetogincswtstsType ModeTogIncSwtStsReserved =
    Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsReserved;
  static constexpr ModetogincswtstsType ModeTogIncSwtStsInvalid =
    Scmsts7b_ModetogincswtstsType_ModeTogIncSwtStsInvalid;
  static inline bool ModetogincswtstsType_IsValid(int value) {
    return Scmsts7b_ModetogincswtstsType_IsValid(value);
  }
  static constexpr ModetogincswtstsType ModetogincswtstsType_MIN =
    Scmsts7b_ModetogincswtstsType_ModetogincswtstsType_MIN;
  static constexpr ModetogincswtstsType ModetogincswtstsType_MAX =
    Scmsts7b_ModetogincswtstsType_ModetogincswtstsType_MAX;
  static constexpr int ModetogincswtstsType_ARRAYSIZE =
    Scmsts7b_ModetogincswtstsType_ModetogincswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModetogincswtstsType_descriptor() {
    return Scmsts7b_ModetogincswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& ModetogincswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModetogincswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModetogincswtstsType_Name.");
    return Scmsts7b_ModetogincswtstsType_Name(enum_t_value);
  }
  static inline bool ModetogincswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModetogincswtstsType* value) {
    return Scmsts7b_ModetogincswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_MenupushswtstsType MenupushswtstsType;
  static constexpr MenupushswtstsType MenuPushSwtStsNotPressed =
    Scmsts7b_MenupushswtstsType_MenuPushSwtStsNotPressed;
  static constexpr MenupushswtstsType MenuPushSwtStsPressed =
    Scmsts7b_MenupushswtstsType_MenuPushSwtStsPressed;
  static constexpr MenupushswtstsType MenuPushSwtStsReserved =
    Scmsts7b_MenupushswtstsType_MenuPushSwtStsReserved;
  static constexpr MenupushswtstsType MenuPushSwtStsInvalid =
    Scmsts7b_MenupushswtstsType_MenuPushSwtStsInvalid;
  static inline bool MenupushswtstsType_IsValid(int value) {
    return Scmsts7b_MenupushswtstsType_IsValid(value);
  }
  static constexpr MenupushswtstsType MenupushswtstsType_MIN =
    Scmsts7b_MenupushswtstsType_MenupushswtstsType_MIN;
  static constexpr MenupushswtstsType MenupushswtstsType_MAX =
    Scmsts7b_MenupushswtstsType_MenupushswtstsType_MAX;
  static constexpr int MenupushswtstsType_ARRAYSIZE =
    Scmsts7b_MenupushswtstsType_MenupushswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MenupushswtstsType_descriptor() {
    return Scmsts7b_MenupushswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& MenupushswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MenupushswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MenupushswtstsType_Name.");
    return Scmsts7b_MenupushswtstsType_Name(enum_t_value);
  }
  static inline bool MenupushswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MenupushswtstsType* value) {
    return Scmsts7b_MenupushswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_SwcfailstsType SwcfailstsType;
  static constexpr SwcfailstsType SWCFailStsNormal =
    Scmsts7b_SwcfailstsType_SWCFailStsNormal;
  static constexpr SwcfailstsType SWCFailStsFail =
    Scmsts7b_SwcfailstsType_SWCFailStsFail;
  static constexpr SwcfailstsType SWCFailStsReserved =
    Scmsts7b_SwcfailstsType_SWCFailStsReserved;
  static constexpr SwcfailstsType SWCFailStsInvalid =
    Scmsts7b_SwcfailstsType_SWCFailStsInvalid;
  static inline bool SwcfailstsType_IsValid(int value) {
    return Scmsts7b_SwcfailstsType_IsValid(value);
  }
  static constexpr SwcfailstsType SwcfailstsType_MIN =
    Scmsts7b_SwcfailstsType_SwcfailstsType_MIN;
  static constexpr SwcfailstsType SwcfailstsType_MAX =
    Scmsts7b_SwcfailstsType_SwcfailstsType_MAX;
  static constexpr int SwcfailstsType_ARRAYSIZE =
    Scmsts7b_SwcfailstsType_SwcfailstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SwcfailstsType_descriptor() {
    return Scmsts7b_SwcfailstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& SwcfailstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SwcfailstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SwcfailstsType_Name.");
    return Scmsts7b_SwcfailstsType_Name(enum_t_value);
  }
  static inline bool SwcfailstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SwcfailstsType* value) {
    return Scmsts7b_SwcfailstsType_Parse(name, value);
  }

  typedef Scmsts7b_AccspddecswtstsType AccspddecswtstsType;
  static constexpr AccspddecswtstsType AccSpdDecSwtStsNotPressed =
    Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsNotPressed;
  static constexpr AccspddecswtstsType AccSpdDecSwtStsPressed =
    Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsPressed;
  static constexpr AccspddecswtstsType AccSpdDecSwtStsReserved =
    Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsReserved;
  static constexpr AccspddecswtstsType AccSpdDecSwtStsInvalid =
    Scmsts7b_AccspddecswtstsType_AccSpdDecSwtStsInvalid;
  static inline bool AccspddecswtstsType_IsValid(int value) {
    return Scmsts7b_AccspddecswtstsType_IsValid(value);
  }
  static constexpr AccspddecswtstsType AccspddecswtstsType_MIN =
    Scmsts7b_AccspddecswtstsType_AccspddecswtstsType_MIN;
  static constexpr AccspddecswtstsType AccspddecswtstsType_MAX =
    Scmsts7b_AccspddecswtstsType_AccspddecswtstsType_MAX;
  static constexpr int AccspddecswtstsType_ARRAYSIZE =
    Scmsts7b_AccspddecswtstsType_AccspddecswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccspddecswtstsType_descriptor() {
    return Scmsts7b_AccspddecswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccspddecswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccspddecswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccspddecswtstsType_Name.");
    return Scmsts7b_AccspddecswtstsType_Name(enum_t_value);
  }
  static inline bool AccspddecswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccspddecswtstsType* value) {
    return Scmsts7b_AccspddecswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_MenulepushswtstsType MenulepushswtstsType;
  static constexpr MenulepushswtstsType MenuLePushSwtStsNotPressed =
    Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsNotPressed;
  static constexpr MenulepushswtstsType MenuLePushSwtStsPressed =
    Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsPressed;
  static constexpr MenulepushswtstsType MenuLePushSwtStsReserved =
    Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsReserved;
  static constexpr MenulepushswtstsType MenuLePushSwtStsInvalid =
    Scmsts7b_MenulepushswtstsType_MenuLePushSwtStsInvalid;
  static inline bool MenulepushswtstsType_IsValid(int value) {
    return Scmsts7b_MenulepushswtstsType_IsValid(value);
  }
  static constexpr MenulepushswtstsType MenulepushswtstsType_MIN =
    Scmsts7b_MenulepushswtstsType_MenulepushswtstsType_MIN;
  static constexpr MenulepushswtstsType MenulepushswtstsType_MAX =
    Scmsts7b_MenulepushswtstsType_MenulepushswtstsType_MAX;
  static constexpr int MenulepushswtstsType_ARRAYSIZE =
    Scmsts7b_MenulepushswtstsType_MenulepushswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MenulepushswtstsType_descriptor() {
    return Scmsts7b_MenulepushswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& MenulepushswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MenulepushswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MenulepushswtstsType_Name.");
    return Scmsts7b_MenulepushswtstsType_Name(enum_t_value);
  }
  static inline bool MenulepushswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MenulepushswtstsType* value) {
    return Scmsts7b_MenulepushswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_MenuorvoluppushswtstsType MenuorvoluppushswtstsType;
  static constexpr MenuorvoluppushswtstsType MenuOrVolUpPushSwtStsNotPressed =
    Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsNotPressed;
  static constexpr MenuorvoluppushswtstsType MenuOrVolUpPushSwtStsPressed =
    Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsPressed;
  static constexpr MenuorvoluppushswtstsType MenuOrVolUpPushSwtStsReserved =
    Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsReserved;
  static constexpr MenuorvoluppushswtstsType MenuOrVolUpPushSwtStsInvalid =
    Scmsts7b_MenuorvoluppushswtstsType_MenuOrVolUpPushSwtStsInvalid;
  static inline bool MenuorvoluppushswtstsType_IsValid(int value) {
    return Scmsts7b_MenuorvoluppushswtstsType_IsValid(value);
  }
  static constexpr MenuorvoluppushswtstsType MenuorvoluppushswtstsType_MIN =
    Scmsts7b_MenuorvoluppushswtstsType_MenuorvoluppushswtstsType_MIN;
  static constexpr MenuorvoluppushswtstsType MenuorvoluppushswtstsType_MAX =
    Scmsts7b_MenuorvoluppushswtstsType_MenuorvoluppushswtstsType_MAX;
  static constexpr int MenuorvoluppushswtstsType_ARRAYSIZE =
    Scmsts7b_MenuorvoluppushswtstsType_MenuorvoluppushswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MenuorvoluppushswtstsType_descriptor() {
    return Scmsts7b_MenuorvoluppushswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& MenuorvoluppushswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MenuorvoluppushswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MenuorvoluppushswtstsType_Name.");
    return Scmsts7b_MenuorvoluppushswtstsType_Name(enum_t_value);
  }
  static inline bool MenuorvoluppushswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MenuorvoluppushswtstsType* value) {
    return Scmsts7b_MenuorvoluppushswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_AcctimegapdecswtstsType AcctimegapdecswtstsType;
  static constexpr AcctimegapdecswtstsType AccTimeGapDecSwtStsNotPressed =
    Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsNotPressed;
  static constexpr AcctimegapdecswtstsType AccTimeGapDecSwtStsPressed =
    Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsPressed;
  static constexpr AcctimegapdecswtstsType AccTimeGapDecSwtStsReserved =
    Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsReserved;
  static constexpr AcctimegapdecswtstsType AccTimeGapDecSwtStsInvalid =
    Scmsts7b_AcctimegapdecswtstsType_AccTimeGapDecSwtStsInvalid;
  static inline bool AcctimegapdecswtstsType_IsValid(int value) {
    return Scmsts7b_AcctimegapdecswtstsType_IsValid(value);
  }
  static constexpr AcctimegapdecswtstsType AcctimegapdecswtstsType_MIN =
    Scmsts7b_AcctimegapdecswtstsType_AcctimegapdecswtstsType_MIN;
  static constexpr AcctimegapdecswtstsType AcctimegapdecswtstsType_MAX =
    Scmsts7b_AcctimegapdecswtstsType_AcctimegapdecswtstsType_MAX;
  static constexpr int AcctimegapdecswtstsType_ARRAYSIZE =
    Scmsts7b_AcctimegapdecswtstsType_AcctimegapdecswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AcctimegapdecswtstsType_descriptor() {
    return Scmsts7b_AcctimegapdecswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AcctimegapdecswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AcctimegapdecswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AcctimegapdecswtstsType_Name.");
    return Scmsts7b_AcctimegapdecswtstsType_Name(enum_t_value);
  }
  static inline bool AcctimegapdecswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AcctimegapdecswtstsType* value) {
    return Scmsts7b_AcctimegapdecswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_MenuripushswtstsType MenuripushswtstsType;
  static constexpr MenuripushswtstsType MenuRiPushSwtStsNotPressed =
    Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsNotPressed;
  static constexpr MenuripushswtstsType MenuRiPushSwtStsPressed =
    Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsPressed;
  static constexpr MenuripushswtstsType MenuRiPushSwtStsReserved =
    Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsReserved;
  static constexpr MenuripushswtstsType MenuRiPushSwtStsInvalid =
    Scmsts7b_MenuripushswtstsType_MenuRiPushSwtStsInvalid;
  static inline bool MenuripushswtstsType_IsValid(int value) {
    return Scmsts7b_MenuripushswtstsType_IsValid(value);
  }
  static constexpr MenuripushswtstsType MenuripushswtstsType_MIN =
    Scmsts7b_MenuripushswtstsType_MenuripushswtstsType_MIN;
  static constexpr MenuripushswtstsType MenuripushswtstsType_MAX =
    Scmsts7b_MenuripushswtstsType_MenuripushswtstsType_MAX;
  static constexpr int MenuripushswtstsType_ARRAYSIZE =
    Scmsts7b_MenuripushswtstsType_MenuripushswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MenuripushswtstsType_descriptor() {
    return Scmsts7b_MenuripushswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& MenuripushswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MenuripushswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MenuripushswtstsType_Name.");
    return Scmsts7b_MenuripushswtstsType_Name(enum_t_value);
  }
  static inline bool MenuripushswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MenuripushswtstsType* value) {
    return Scmsts7b_MenuripushswtstsType_Parse(name, value);
  }

  typedef Scmsts7b_AccsetswtstsType AccsetswtstsType;
  static constexpr AccsetswtstsType AccSetSwtStsNotPressed =
    Scmsts7b_AccsetswtstsType_AccSetSwtStsNotPressed;
  static constexpr AccsetswtstsType AccSetSwtStsPressed =
    Scmsts7b_AccsetswtstsType_AccSetSwtStsPressed;
  static constexpr AccsetswtstsType AccSetSwtStsReserved =
    Scmsts7b_AccsetswtstsType_AccSetSwtStsReserved;
  static constexpr AccsetswtstsType AccSetSwtStsInvalid =
    Scmsts7b_AccsetswtstsType_AccSetSwtStsInvalid;
  static inline bool AccsetswtstsType_IsValid(int value) {
    return Scmsts7b_AccsetswtstsType_IsValid(value);
  }
  static constexpr AccsetswtstsType AccsetswtstsType_MIN =
    Scmsts7b_AccsetswtstsType_AccsetswtstsType_MIN;
  static constexpr AccsetswtstsType AccsetswtstsType_MAX =
    Scmsts7b_AccsetswtstsType_AccsetswtstsType_MAX;
  static constexpr int AccsetswtstsType_ARRAYSIZE =
    Scmsts7b_AccsetswtstsType_AccsetswtstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccsetswtstsType_descriptor() {
    return Scmsts7b_AccsetswtstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccsetswtstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccsetswtstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccsetswtstsType_Name.");
    return Scmsts7b_AccsetswtstsType_Name(enum_t_value);
  }
  static inline bool AccsetswtstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccsetswtstsType* value) {
    return Scmsts7b_AccsetswtstsType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScmfailstsFieldNumber = 1,
    kHilowbeampushswtstsFieldNumber = 2,
    kFrntwiprswtstsFieldNumber = 3,
    kTurnindcrswtstsFieldNumber = 4,
    kFoglipushswtstsFieldNumber = 5,
    kFrntwiprinterspdFieldNumber = 6,
    kMenuorvoldwnpushswtstsFieldNumber = 7,
    kAccspdincorresuswtstsFieldNumber = 8,
    kAcctimegapincswtstsFieldNumber = 9,
    kSelnpushswtstsFieldNumber = 10,
    kModetogdecswtstsFieldNumber = 11,
    kModetogincswtstsFieldNumber = 12,
    kMenupushswtstsFieldNumber = 13,
    kSwcfailstsFieldNumber = 14,
    kAccspddecswtstsFieldNumber = 15,
    kScmcrcFieldNumber = 16,
    kMenulepushswtstsFieldNumber = 17,
    kMenuorvoluppushswtstsFieldNumber = 18,
    kScmmsgcntrFieldNumber = 19,
    kAcctimegapdecswtstsFieldNumber = 20,
    kMenuripushswtstsFieldNumber = 21,
    kAccsetswtstsFieldNumber = 22,
  };
  // optional .apollo.canbus.Scmsts7b.ScmfailstsType scmfailsts = 1;
  bool has_scmfailsts() const;
  private:
  bool _internal_has_scmfailsts() const;
  public:
  void clear_scmfailsts();
  ::apollo::canbus::Scmsts7b_ScmfailstsType scmfailsts() const;
  void set_scmfailsts(::apollo::canbus::Scmsts7b_ScmfailstsType value);
  private:
  ::apollo::canbus::Scmsts7b_ScmfailstsType _internal_scmfailsts() const;
  void _internal_set_scmfailsts(::apollo::canbus::Scmsts7b_ScmfailstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.HilowbeampushswtstsType hilowbeampushswtsts = 2;
  bool has_hilowbeampushswtsts() const;
  private:
  bool _internal_has_hilowbeampushswtsts() const;
  public:
  void clear_hilowbeampushswtsts();
  ::apollo::canbus::Scmsts7b_HilowbeampushswtstsType hilowbeampushswtsts() const;
  void set_hilowbeampushswtsts(::apollo::canbus::Scmsts7b_HilowbeampushswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_HilowbeampushswtstsType _internal_hilowbeampushswtsts() const;
  void _internal_set_hilowbeampushswtsts(::apollo::canbus::Scmsts7b_HilowbeampushswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.FrntwiprswtstsType frntwiprswtsts = 3;
  bool has_frntwiprswtsts() const;
  private:
  bool _internal_has_frntwiprswtsts() const;
  public:
  void clear_frntwiprswtsts();
  ::apollo::canbus::Scmsts7b_FrntwiprswtstsType frntwiprswtsts() const;
  void set_frntwiprswtsts(::apollo::canbus::Scmsts7b_FrntwiprswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_FrntwiprswtstsType _internal_frntwiprswtsts() const;
  void _internal_set_frntwiprswtsts(::apollo::canbus::Scmsts7b_FrntwiprswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.TurnindcrswtstsType turnindcrswtsts = 4;
  bool has_turnindcrswtsts() const;
  private:
  bool _internal_has_turnindcrswtsts() const;
  public:
  void clear_turnindcrswtsts();
  ::apollo::canbus::Scmsts7b_TurnindcrswtstsType turnindcrswtsts() const;
  void set_turnindcrswtsts(::apollo::canbus::Scmsts7b_TurnindcrswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_TurnindcrswtstsType _internal_turnindcrswtsts() const;
  void _internal_set_turnindcrswtsts(::apollo::canbus::Scmsts7b_TurnindcrswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.FoglipushswtstsType foglipushswtsts = 5;
  bool has_foglipushswtsts() const;
  private:
  bool _internal_has_foglipushswtsts() const;
  public:
  void clear_foglipushswtsts();
  ::apollo::canbus::Scmsts7b_FoglipushswtstsType foglipushswtsts() const;
  void set_foglipushswtsts(::apollo::canbus::Scmsts7b_FoglipushswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_FoglipushswtstsType _internal_foglipushswtsts() const;
  void _internal_set_foglipushswtsts(::apollo::canbus::Scmsts7b_FoglipushswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.FrntwiprinterspdType frntwiprinterspd = 6;
  bool has_frntwiprinterspd() const;
  private:
  bool _internal_has_frntwiprinterspd() const;
  public:
  void clear_frntwiprinterspd();
  ::apollo::canbus::Scmsts7b_FrntwiprinterspdType frntwiprinterspd() const;
  void set_frntwiprinterspd(::apollo::canbus::Scmsts7b_FrntwiprinterspdType value);
  private:
  ::apollo::canbus::Scmsts7b_FrntwiprinterspdType _internal_frntwiprinterspd() const;
  void _internal_set_frntwiprinterspd(::apollo::canbus::Scmsts7b_FrntwiprinterspdType value);
  public:

  // optional .apollo.canbus.Scmsts7b.MenuorvoldwnpushswtstsType menuorvoldwnpushswtsts = 7;
  bool has_menuorvoldwnpushswtsts() const;
  private:
  bool _internal_has_menuorvoldwnpushswtsts() const;
  public:
  void clear_menuorvoldwnpushswtsts();
  ::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType menuorvoldwnpushswtsts() const;
  void set_menuorvoldwnpushswtsts(::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType _internal_menuorvoldwnpushswtsts() const;
  void _internal_set_menuorvoldwnpushswtsts(::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.AccspdincorresuswtstsType accspdincorresuswtsts = 8;
  bool has_accspdincorresuswtsts() const;
  private:
  bool _internal_has_accspdincorresuswtsts() const;
  public:
  void clear_accspdincorresuswtsts();
  ::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType accspdincorresuswtsts() const;
  void set_accspdincorresuswtsts(::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType _internal_accspdincorresuswtsts() const;
  void _internal_set_accspdincorresuswtsts(::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.AcctimegapincswtstsType acctimegapincswtsts = 9;
  bool has_acctimegapincswtsts() const;
  private:
  bool _internal_has_acctimegapincswtsts() const;
  public:
  void clear_acctimegapincswtsts();
  ::apollo::canbus::Scmsts7b_AcctimegapincswtstsType acctimegapincswtsts() const;
  void set_acctimegapincswtsts(::apollo::canbus::Scmsts7b_AcctimegapincswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_AcctimegapincswtstsType _internal_acctimegapincswtsts() const;
  void _internal_set_acctimegapincswtsts(::apollo::canbus::Scmsts7b_AcctimegapincswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.SelnpushswtstsType selnpushswtsts = 10;
  bool has_selnpushswtsts() const;
  private:
  bool _internal_has_selnpushswtsts() const;
  public:
  void clear_selnpushswtsts();
  ::apollo::canbus::Scmsts7b_SelnpushswtstsType selnpushswtsts() const;
  void set_selnpushswtsts(::apollo::canbus::Scmsts7b_SelnpushswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_SelnpushswtstsType _internal_selnpushswtsts() const;
  void _internal_set_selnpushswtsts(::apollo::canbus::Scmsts7b_SelnpushswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.ModetogdecswtstsType modetogdecswtsts = 11;
  bool has_modetogdecswtsts() const;
  private:
  bool _internal_has_modetogdecswtsts() const;
  public:
  void clear_modetogdecswtsts();
  ::apollo::canbus::Scmsts7b_ModetogdecswtstsType modetogdecswtsts() const;
  void set_modetogdecswtsts(::apollo::canbus::Scmsts7b_ModetogdecswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_ModetogdecswtstsType _internal_modetogdecswtsts() const;
  void _internal_set_modetogdecswtsts(::apollo::canbus::Scmsts7b_ModetogdecswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.ModetogincswtstsType modetogincswtsts = 12;
  bool has_modetogincswtsts() const;
  private:
  bool _internal_has_modetogincswtsts() const;
  public:
  void clear_modetogincswtsts();
  ::apollo::canbus::Scmsts7b_ModetogincswtstsType modetogincswtsts() const;
  void set_modetogincswtsts(::apollo::canbus::Scmsts7b_ModetogincswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_ModetogincswtstsType _internal_modetogincswtsts() const;
  void _internal_set_modetogincswtsts(::apollo::canbus::Scmsts7b_ModetogincswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.MenupushswtstsType menupushswtsts = 13;
  bool has_menupushswtsts() const;
  private:
  bool _internal_has_menupushswtsts() const;
  public:
  void clear_menupushswtsts();
  ::apollo::canbus::Scmsts7b_MenupushswtstsType menupushswtsts() const;
  void set_menupushswtsts(::apollo::canbus::Scmsts7b_MenupushswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_MenupushswtstsType _internal_menupushswtsts() const;
  void _internal_set_menupushswtsts(::apollo::canbus::Scmsts7b_MenupushswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.SwcfailstsType swcfailsts = 14;
  bool has_swcfailsts() const;
  private:
  bool _internal_has_swcfailsts() const;
  public:
  void clear_swcfailsts();
  ::apollo::canbus::Scmsts7b_SwcfailstsType swcfailsts() const;
  void set_swcfailsts(::apollo::canbus::Scmsts7b_SwcfailstsType value);
  private:
  ::apollo::canbus::Scmsts7b_SwcfailstsType _internal_swcfailsts() const;
  void _internal_set_swcfailsts(::apollo::canbus::Scmsts7b_SwcfailstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.AccspddecswtstsType accspddecswtsts = 15;
  bool has_accspddecswtsts() const;
  private:
  bool _internal_has_accspddecswtsts() const;
  public:
  void clear_accspddecswtsts();
  ::apollo::canbus::Scmsts7b_AccspddecswtstsType accspddecswtsts() const;
  void set_accspddecswtsts(::apollo::canbus::Scmsts7b_AccspddecswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_AccspddecswtstsType _internal_accspddecswtsts() const;
  void _internal_set_accspddecswtsts(::apollo::canbus::Scmsts7b_AccspddecswtstsType value);
  public:

  // optional int32 scmcrc = 16;
  bool has_scmcrc() const;
  private:
  bool _internal_has_scmcrc() const;
  public:
  void clear_scmcrc();
  ::PROTOBUF_NAMESPACE_ID::int32 scmcrc() const;
  void set_scmcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scmcrc() const;
  void _internal_set_scmcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Scmsts7b.MenulepushswtstsType menulepushswtsts = 17;
  bool has_menulepushswtsts() const;
  private:
  bool _internal_has_menulepushswtsts() const;
  public:
  void clear_menulepushswtsts();
  ::apollo::canbus::Scmsts7b_MenulepushswtstsType menulepushswtsts() const;
  void set_menulepushswtsts(::apollo::canbus::Scmsts7b_MenulepushswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_MenulepushswtstsType _internal_menulepushswtsts() const;
  void _internal_set_menulepushswtsts(::apollo::canbus::Scmsts7b_MenulepushswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.MenuorvoluppushswtstsType menuorvoluppushswtsts = 18;
  bool has_menuorvoluppushswtsts() const;
  private:
  bool _internal_has_menuorvoluppushswtsts() const;
  public:
  void clear_menuorvoluppushswtsts();
  ::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType menuorvoluppushswtsts() const;
  void set_menuorvoluppushswtsts(::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType _internal_menuorvoluppushswtsts() const;
  void _internal_set_menuorvoluppushswtsts(::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType value);
  public:

  // optional int32 scmmsgcntr = 19;
  bool has_scmmsgcntr() const;
  private:
  bool _internal_has_scmmsgcntr() const;
  public:
  void clear_scmmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 scmmsgcntr() const;
  void set_scmmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scmmsgcntr() const;
  void _internal_set_scmmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Scmsts7b.AcctimegapdecswtstsType acctimegapdecswtsts = 20;
  bool has_acctimegapdecswtsts() const;
  private:
  bool _internal_has_acctimegapdecswtsts() const;
  public:
  void clear_acctimegapdecswtsts();
  ::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType acctimegapdecswtsts() const;
  void set_acctimegapdecswtsts(::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType _internal_acctimegapdecswtsts() const;
  void _internal_set_acctimegapdecswtsts(::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.MenuripushswtstsType menuripushswtsts = 21;
  bool has_menuripushswtsts() const;
  private:
  bool _internal_has_menuripushswtsts() const;
  public:
  void clear_menuripushswtsts();
  ::apollo::canbus::Scmsts7b_MenuripushswtstsType menuripushswtsts() const;
  void set_menuripushswtsts(::apollo::canbus::Scmsts7b_MenuripushswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_MenuripushswtstsType _internal_menuripushswtsts() const;
  void _internal_set_menuripushswtsts(::apollo::canbus::Scmsts7b_MenuripushswtstsType value);
  public:

  // optional .apollo.canbus.Scmsts7b.AccsetswtstsType accsetswtsts = 22;
  bool has_accsetswtsts() const;
  private:
  bool _internal_has_accsetswtsts() const;
  public:
  void clear_accsetswtsts();
  ::apollo::canbus::Scmsts7b_AccsetswtstsType accsetswtsts() const;
  void set_accsetswtsts(::apollo::canbus::Scmsts7b_AccsetswtstsType value);
  private:
  ::apollo::canbus::Scmsts7b_AccsetswtstsType _internal_accsetswtsts() const;
  void _internal_set_accsetswtsts(::apollo::canbus::Scmsts7b_AccsetswtstsType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scmsts7b)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int scmfailsts_;
  int hilowbeampushswtsts_;
  int frntwiprswtsts_;
  int turnindcrswtsts_;
  int foglipushswtsts_;
  int frntwiprinterspd_;
  int menuorvoldwnpushswtsts_;
  int accspdincorresuswtsts_;
  int acctimegapincswtsts_;
  int selnpushswtsts_;
  int modetogdecswtsts_;
  int modetogincswtsts_;
  int menupushswtsts_;
  int swcfailsts_;
  int accspddecswtsts_;
  ::PROTOBUF_NAMESPACE_ID::int32 scmcrc_;
  int menulepushswtsts_;
  int menuorvoluppushswtsts_;
  ::PROTOBUF_NAMESPACE_ID::int32 scmmsgcntr_;
  int acctimegapdecswtsts_;
  int menuripushswtsts_;
  int accsetswtsts_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Accreq7f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Accreq7f) */ {
 public:
  inline Accreq7f() : Accreq7f(nullptr) {}
  virtual ~Accreq7f();

  Accreq7f(const Accreq7f& from);
  Accreq7f(Accreq7f&& from) noexcept
    : Accreq7f() {
    *this = ::std::move(from);
  }

  inline Accreq7f& operator=(const Accreq7f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accreq7f& operator=(Accreq7f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accreq7f& default_instance();

  static inline const Accreq7f* internal_default_instance() {
    return reinterpret_cast<const Accreq7f*>(
               &_Accreq7f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Accreq7f& a, Accreq7f& b) {
    a.Swap(&b);
  }
  inline void Swap(Accreq7f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accreq7f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accreq7f* New() const final {
    return CreateMaybeMessage<Accreq7f>(nullptr);
  }

  Accreq7f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accreq7f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accreq7f& from);
  void MergeFrom(const Accreq7f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accreq7f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Accreq7f";
  }
  protected:
  explicit Accreq7f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Accreq7f_AccdrvoffType AccdrvoffType;
  static constexpr AccdrvoffType AccDrvoffNoRequest =
    Accreq7f_AccdrvoffType_AccDrvoffNoRequest;
  static constexpr AccdrvoffType AccDrvoffRequest =
    Accreq7f_AccdrvoffType_AccDrvoffRequest;
  static inline bool AccdrvoffType_IsValid(int value) {
    return Accreq7f_AccdrvoffType_IsValid(value);
  }
  static constexpr AccdrvoffType AccdrvoffType_MIN =
    Accreq7f_AccdrvoffType_AccdrvoffType_MIN;
  static constexpr AccdrvoffType AccdrvoffType_MAX =
    Accreq7f_AccdrvoffType_AccdrvoffType_MAX;
  static constexpr int AccdrvoffType_ARRAYSIZE =
    Accreq7f_AccdrvoffType_AccdrvoffType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccdrvoffType_descriptor() {
    return Accreq7f_AccdrvoffType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccdrvoffType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccdrvoffType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccdrvoffType_Name.");
    return Accreq7f_AccdrvoffType_Name(enum_t_value);
  }
  static inline bool AccdrvoffType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccdrvoffType* value) {
    return Accreq7f_AccdrvoffType_Parse(name, value);
  }

  typedef Accreq7f_AccdestopType AccdestopType;
  static constexpr AccdestopType AccDeStopNoRequest =
    Accreq7f_AccdestopType_AccDeStopNoRequest;
  static constexpr AccdestopType AccDeStoprequest =
    Accreq7f_AccdestopType_AccDeStoprequest;
  static inline bool AccdestopType_IsValid(int value) {
    return Accreq7f_AccdestopType_IsValid(value);
  }
  static constexpr AccdestopType AccdestopType_MIN =
    Accreq7f_AccdestopType_AccdestopType_MIN;
  static constexpr AccdestopType AccdestopType_MAX =
    Accreq7f_AccdestopType_AccdestopType_MAX;
  static constexpr int AccdestopType_ARRAYSIZE =
    Accreq7f_AccdestopType_AccdestopType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccdestopType_descriptor() {
    return Accreq7f_AccdestopType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccdestopType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccdestopType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccdestopType_Name.");
    return Accreq7f_AccdestopType_Name(enum_t_value);
  }
  static inline bool AccdestopType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccdestopType* value) {
    return Accreq7f_AccdestopType_Parse(name, value);
  }

  typedef Accreq7f_AccmodeType AccmodeType;
  static constexpr AccmodeType AccModeOffMode =
    Accreq7f_AccmodeType_AccModeOffMode;
  static constexpr AccmodeType AccModePassiveMode =
    Accreq7f_AccmodeType_AccModePassiveMode;
  static constexpr AccmodeType AccModeStandbyMode =
    Accreq7f_AccmodeType_AccModeStandbyMode;
  static constexpr AccmodeType AccModeActiveControlMode =
    Accreq7f_AccmodeType_AccModeActiveControlMode;
  static constexpr AccmodeType AccModeBrakeOnlyMode =
    Accreq7f_AccmodeType_AccModeBrakeOnlyMode;
  static constexpr AccmodeType AccModeOverrideMode =
    Accreq7f_AccmodeType_AccModeOverrideMode;
  static constexpr AccmodeType AccModeStandstillMode =
    Accreq7f_AccmodeType_AccModeStandstillMode;
  static constexpr AccmodeType AccModeFailureMode =
    Accreq7f_AccmodeType_AccModeFailureMode;
  static inline bool AccmodeType_IsValid(int value) {
    return Accreq7f_AccmodeType_IsValid(value);
  }
  static constexpr AccmodeType AccmodeType_MIN =
    Accreq7f_AccmodeType_AccmodeType_MIN;
  static constexpr AccmodeType AccmodeType_MAX =
    Accreq7f_AccmodeType_AccmodeType_MAX;
  static constexpr int AccmodeType_ARRAYSIZE =
    Accreq7f_AccmodeType_AccmodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccmodeType_descriptor() {
    return Accreq7f_AccmodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccmodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccmodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccmodeType_Name.");
    return Accreq7f_AccmodeType_Name(enum_t_value);
  }
  static inline bool AccmodeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccmodeType* value) {
    return Accreq7f_AccmodeType_Parse(name, value);
  }

  typedef Accreq7f_AcchvydecelType AcchvydecelType;
  static constexpr AcchvydecelType AccHvydecelNotRequest =
    Accreq7f_AcchvydecelType_AccHvydecelNotRequest;
  static constexpr AcchvydecelType AccHvydecelrequest =
    Accreq7f_AcchvydecelType_AccHvydecelrequest;
  static inline bool AcchvydecelType_IsValid(int value) {
    return Accreq7f_AcchvydecelType_IsValid(value);
  }
  static constexpr AcchvydecelType AcchvydecelType_MIN =
    Accreq7f_AcchvydecelType_AcchvydecelType_MIN;
  static constexpr AcchvydecelType AcchvydecelType_MAX =
    Accreq7f_AcchvydecelType_AcchvydecelType_MAX;
  static constexpr int AcchvydecelType_ARRAYSIZE =
    Accreq7f_AcchvydecelType_AcchvydecelType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AcchvydecelType_descriptor() {
    return Accreq7f_AcchvydecelType_descriptor();
  }
  template<typename T>
  static inline const std::string& AcchvydecelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AcchvydecelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AcchvydecelType_Name.");
    return Accreq7f_AcchvydecelType_Name(enum_t_value);
  }
  static inline bool AcchvydecelType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AcchvydecelType* value) {
    return Accreq7f_AcchvydecelType_Parse(name, value);
  }

  typedef Accreq7f_AccheavymodeType AccheavymodeType;
  static constexpr AccheavymodeType AccHeavymodeinactive =
    Accreq7f_AccheavymodeType_AccHeavymodeinactive;
  static constexpr AccheavymodeType AccHeavymodereserved1 =
    Accreq7f_AccheavymodeType_AccHeavymodereserved1;
  static constexpr AccheavymodeType AccHeavymodereserved2 =
    Accreq7f_AccheavymodeType_AccHeavymodereserved2;
  static constexpr AccheavymodeType AccHeavymodeactive =
    Accreq7f_AccheavymodeType_AccHeavymodeactive;
  static inline bool AccheavymodeType_IsValid(int value) {
    return Accreq7f_AccheavymodeType_IsValid(value);
  }
  static constexpr AccheavymodeType AccheavymodeType_MIN =
    Accreq7f_AccheavymodeType_AccheavymodeType_MIN;
  static constexpr AccheavymodeType AccheavymodeType_MAX =
    Accreq7f_AccheavymodeType_AccheavymodeType_MAX;
  static constexpr int AccheavymodeType_ARRAYSIZE =
    Accreq7f_AccheavymodeType_AccheavymodeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AccheavymodeType_descriptor() {
    return Accreq7f_AccheavymodeType_descriptor();
  }
  template<typename T>
  static inline const std::string& AccheavymodeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AccheavymodeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AccheavymodeType_Name.");
    return Accreq7f_AccheavymodeType_Name(enum_t_value);
  }
  static inline bool AccheavymodeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AccheavymodeType* value) {
    return Accreq7f_AccheavymodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAccdrvoffFieldNumber = 1,
    kAccdestopFieldNumber = 2,
    kAccmaxjerkFieldNumber = 3,
    kAccminjerkFieldNumber = 4,
    kAcccomforlowFieldNumber = 6,
    kAccmodeFieldNumber = 5,
    kAcchvydecelFieldNumber = 8,
    kAcccomforupFieldNumber = 7,
    kAcctaraFieldNumber = 10,
    kAccheavymodeFieldNumber = 9,
    kAccmsgcntrFieldNumber = 11,
    kAcccrcFieldNumber = 12,
  };
  // optional .apollo.canbus.Accreq7f.AccdrvoffType accdrvoff = 1;
  bool has_accdrvoff() const;
  private:
  bool _internal_has_accdrvoff() const;
  public:
  void clear_accdrvoff();
  ::apollo::canbus::Accreq7f_AccdrvoffType accdrvoff() const;
  void set_accdrvoff(::apollo::canbus::Accreq7f_AccdrvoffType value);
  private:
  ::apollo::canbus::Accreq7f_AccdrvoffType _internal_accdrvoff() const;
  void _internal_set_accdrvoff(::apollo::canbus::Accreq7f_AccdrvoffType value);
  public:

  // optional .apollo.canbus.Accreq7f.AccdestopType accdestop = 2;
  bool has_accdestop() const;
  private:
  bool _internal_has_accdestop() const;
  public:
  void clear_accdestop();
  ::apollo::canbus::Accreq7f_AccdestopType accdestop() const;
  void set_accdestop(::apollo::canbus::Accreq7f_AccdestopType value);
  private:
  ::apollo::canbus::Accreq7f_AccdestopType _internal_accdestop() const;
  void _internal_set_accdestop(::apollo::canbus::Accreq7f_AccdestopType value);
  public:

  // optional double accmaxjerk = 3;
  bool has_accmaxjerk() const;
  private:
  bool _internal_has_accmaxjerk() const;
  public:
  void clear_accmaxjerk();
  double accmaxjerk() const;
  void set_accmaxjerk(double value);
  private:
  double _internal_accmaxjerk() const;
  void _internal_set_accmaxjerk(double value);
  public:

  // optional double accminjerk = 4;
  bool has_accminjerk() const;
  private:
  bool _internal_has_accminjerk() const;
  public:
  void clear_accminjerk();
  double accminjerk() const;
  void set_accminjerk(double value);
  private:
  double _internal_accminjerk() const;
  void _internal_set_accminjerk(double value);
  public:

  // optional double acccomforlow = 6;
  bool has_acccomforlow() const;
  private:
  bool _internal_has_acccomforlow() const;
  public:
  void clear_acccomforlow();
  double acccomforlow() const;
  void set_acccomforlow(double value);
  private:
  double _internal_acccomforlow() const;
  void _internal_set_acccomforlow(double value);
  public:

  // optional .apollo.canbus.Accreq7f.AccmodeType accmode = 5;
  bool has_accmode() const;
  private:
  bool _internal_has_accmode() const;
  public:
  void clear_accmode();
  ::apollo::canbus::Accreq7f_AccmodeType accmode() const;
  void set_accmode(::apollo::canbus::Accreq7f_AccmodeType value);
  private:
  ::apollo::canbus::Accreq7f_AccmodeType _internal_accmode() const;
  void _internal_set_accmode(::apollo::canbus::Accreq7f_AccmodeType value);
  public:

  // optional .apollo.canbus.Accreq7f.AcchvydecelType acchvydecel = 8;
  bool has_acchvydecel() const;
  private:
  bool _internal_has_acchvydecel() const;
  public:
  void clear_acchvydecel();
  ::apollo::canbus::Accreq7f_AcchvydecelType acchvydecel() const;
  void set_acchvydecel(::apollo::canbus::Accreq7f_AcchvydecelType value);
  private:
  ::apollo::canbus::Accreq7f_AcchvydecelType _internal_acchvydecel() const;
  void _internal_set_acchvydecel(::apollo::canbus::Accreq7f_AcchvydecelType value);
  public:

  // optional double acccomforup = 7;
  bool has_acccomforup() const;
  private:
  bool _internal_has_acccomforup() const;
  public:
  void clear_acccomforup();
  double acccomforup() const;
  void set_acccomforup(double value);
  private:
  double _internal_acccomforup() const;
  void _internal_set_acccomforup(double value);
  public:

  // optional double acctara = 10;
  bool has_acctara() const;
  private:
  bool _internal_has_acctara() const;
  public:
  void clear_acctara();
  double acctara() const;
  void set_acctara(double value);
  private:
  double _internal_acctara() const;
  void _internal_set_acctara(double value);
  public:

  // optional .apollo.canbus.Accreq7f.AccheavymodeType accheavymode = 9;
  bool has_accheavymode() const;
  private:
  bool _internal_has_accheavymode() const;
  public:
  void clear_accheavymode();
  ::apollo::canbus::Accreq7f_AccheavymodeType accheavymode() const;
  void set_accheavymode(::apollo::canbus::Accreq7f_AccheavymodeType value);
  private:
  ::apollo::canbus::Accreq7f_AccheavymodeType _internal_accheavymode() const;
  void _internal_set_accheavymode(::apollo::canbus::Accreq7f_AccheavymodeType value);
  public:

  // optional int32 accmsgcntr = 11;
  bool has_accmsgcntr() const;
  private:
  bool _internal_has_accmsgcntr() const;
  public:
  void clear_accmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 accmsgcntr() const;
  void set_accmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accmsgcntr() const;
  void _internal_set_accmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 acccrc = 12;
  bool has_acccrc() const;
  private:
  bool _internal_has_acccrc() const;
  public:
  void clear_acccrc();
  ::PROTOBUF_NAMESPACE_ID::int32 acccrc() const;
  void set_acccrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_acccrc() const;
  void _internal_set_acccrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Accreq7f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int accdrvoff_;
  int accdestop_;
  double accmaxjerk_;
  double accminjerk_;
  double acccomforlow_;
  int accmode_;
  int acchvydecel_;
  double acccomforup_;
  double acctara_;
  int accheavymode_;
  ::PROTOBUF_NAMESPACE_ID::int32 accmsgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 acccrc_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Motorsts0286 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Motorsts0286) */ {
 public:
  inline Motorsts0286() : Motorsts0286(nullptr) {}
  virtual ~Motorsts0286();

  Motorsts0286(const Motorsts0286& from);
  Motorsts0286(Motorsts0286&& from) noexcept
    : Motorsts0286() {
    *this = ::std::move(from);
  }

  inline Motorsts0286& operator=(const Motorsts0286& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motorsts0286& operator=(Motorsts0286&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Motorsts0286& default_instance();

  static inline const Motorsts0286* internal_default_instance() {
    return reinterpret_cast<const Motorsts0286*>(
               &_Motorsts0286_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Motorsts0286& a, Motorsts0286& b) {
    a.Swap(&b);
  }
  inline void Swap(Motorsts0286* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motorsts0286* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Motorsts0286* New() const final {
    return CreateMaybeMessage<Motorsts0286>(nullptr);
  }

  Motorsts0286* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Motorsts0286>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Motorsts0286& from);
  void MergeFrom(const Motorsts0286& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motorsts0286* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Motorsts0286";
  }
  protected:
  explicit Motorsts0286(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Motorsts0286_FrntmottqvalidType FrntmottqvalidType;
  static constexpr FrntmottqvalidType FrntMotTqValidvalid =
    Motorsts0286_FrntmottqvalidType_FrntMotTqValidvalid;
  static constexpr FrntmottqvalidType FrntMotTqValidinvalid =
    Motorsts0286_FrntmottqvalidType_FrntMotTqValidinvalid;
  static inline bool FrntmottqvalidType_IsValid(int value) {
    return Motorsts0286_FrntmottqvalidType_IsValid(value);
  }
  static constexpr FrntmottqvalidType FrntmottqvalidType_MIN =
    Motorsts0286_FrntmottqvalidType_FrntmottqvalidType_MIN;
  static constexpr FrntmottqvalidType FrntmottqvalidType_MAX =
    Motorsts0286_FrntmottqvalidType_FrntmottqvalidType_MAX;
  static constexpr int FrntmottqvalidType_ARRAYSIZE =
    Motorsts0286_FrntmottqvalidType_FrntmottqvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrntmottqvalidType_descriptor() {
    return Motorsts0286_FrntmottqvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrntmottqvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrntmottqvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrntmottqvalidType_Name.");
    return Motorsts0286_FrntmottqvalidType_Name(enum_t_value);
  }
  static inline bool FrntmottqvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrntmottqvalidType* value) {
    return Motorsts0286_FrntmottqvalidType_Parse(name, value);
  }

  typedef Motorsts0286_FrntmotspdvalidType FrntmotspdvalidType;
  static constexpr FrntmotspdvalidType FrntMotSpdValidvalid =
    Motorsts0286_FrntmotspdvalidType_FrntMotSpdValidvalid;
  static constexpr FrntmotspdvalidType FrntMotSpdValidinvalid =
    Motorsts0286_FrntmotspdvalidType_FrntMotSpdValidinvalid;
  static inline bool FrntmotspdvalidType_IsValid(int value) {
    return Motorsts0286_FrntmotspdvalidType_IsValid(value);
  }
  static constexpr FrntmotspdvalidType FrntmotspdvalidType_MIN =
    Motorsts0286_FrntmotspdvalidType_FrntmotspdvalidType_MIN;
  static constexpr FrntmotspdvalidType FrntmotspdvalidType_MAX =
    Motorsts0286_FrntmotspdvalidType_FrntmotspdvalidType_MAX;
  static constexpr int FrntmotspdvalidType_ARRAYSIZE =
    Motorsts0286_FrntmotspdvalidType_FrntmotspdvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrntmotspdvalidType_descriptor() {
    return Motorsts0286_FrntmotspdvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrntmotspdvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrntmotspdvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrntmotspdvalidType_Name.");
    return Motorsts0286_FrntmotspdvalidType_Name(enum_t_value);
  }
  static inline bool FrntmotspdvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FrntmotspdvalidType* value) {
    return Motorsts0286_FrntmotspdvalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMotor02MsgcntrFieldNumber = 1,
    kMotor02CrcFieldNumber = 2,
    kFrntmottqFieldNumber = 4,
    kFrntmottqvalidFieldNumber = 3,
    kFrntmotspdvalidFieldNumber = 5,
    kFrntmotspdFieldNumber = 6,
  };
  // optional int32 motor02msgcntr = 1;
  bool has_motor02msgcntr() const;
  private:
  bool _internal_has_motor02msgcntr() const;
  public:
  void clear_motor02msgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 motor02msgcntr() const;
  void set_motor02msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_motor02msgcntr() const;
  void _internal_set_motor02msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 motor02crc = 2;
  bool has_motor02crc() const;
  private:
  bool _internal_has_motor02crc() const;
  public:
  void clear_motor02crc();
  ::PROTOBUF_NAMESPACE_ID::int32 motor02crc() const;
  void set_motor02crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_motor02crc() const;
  void _internal_set_motor02crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double frntmottq = 4;
  bool has_frntmottq() const;
  private:
  bool _internal_has_frntmottq() const;
  public:
  void clear_frntmottq();
  double frntmottq() const;
  void set_frntmottq(double value);
  private:
  double _internal_frntmottq() const;
  void _internal_set_frntmottq(double value);
  public:

  // optional .apollo.canbus.Motorsts0286.FrntmottqvalidType frntmottqvalid = 3;
  bool has_frntmottqvalid() const;
  private:
  bool _internal_has_frntmottqvalid() const;
  public:
  void clear_frntmottqvalid();
  ::apollo::canbus::Motorsts0286_FrntmottqvalidType frntmottqvalid() const;
  void set_frntmottqvalid(::apollo::canbus::Motorsts0286_FrntmottqvalidType value);
  private:
  ::apollo::canbus::Motorsts0286_FrntmottqvalidType _internal_frntmottqvalid() const;
  void _internal_set_frntmottqvalid(::apollo::canbus::Motorsts0286_FrntmottqvalidType value);
  public:

  // optional .apollo.canbus.Motorsts0286.FrntmotspdvalidType frntmotspdvalid = 5;
  bool has_frntmotspdvalid() const;
  private:
  bool _internal_has_frntmotspdvalid() const;
  public:
  void clear_frntmotspdvalid();
  ::apollo::canbus::Motorsts0286_FrntmotspdvalidType frntmotspdvalid() const;
  void set_frntmotspdvalid(::apollo::canbus::Motorsts0286_FrntmotspdvalidType value);
  private:
  ::apollo::canbus::Motorsts0286_FrntmotspdvalidType _internal_frntmotspdvalid() const;
  void _internal_set_frntmotspdvalid(::apollo::canbus::Motorsts0286_FrntmotspdvalidType value);
  public:

  // optional int32 frntmotspd = 6;
  bool has_frntmotspd() const;
  private:
  bool _internal_has_frntmotspd() const;
  public:
  void clear_frntmotspd();
  ::PROTOBUF_NAMESPACE_ID::int32 frntmotspd() const;
  void set_frntmotspd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frntmotspd() const;
  void _internal_set_frntmotspd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Motorsts0286)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 motor02msgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 motor02crc_;
  double frntmottq_;
  int frntmottqvalid_;
  int frntmotspdvalid_;
  ::PROTOBUF_NAMESPACE_ID::int32 frntmotspd_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Motorsts018e PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Motorsts018e) */ {
 public:
  inline Motorsts018e() : Motorsts018e(nullptr) {}
  virtual ~Motorsts018e();

  Motorsts018e(const Motorsts018e& from);
  Motorsts018e(Motorsts018e&& from) noexcept
    : Motorsts018e() {
    *this = ::std::move(from);
  }

  inline Motorsts018e& operator=(const Motorsts018e& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motorsts018e& operator=(Motorsts018e&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Motorsts018e& default_instance();

  static inline const Motorsts018e* internal_default_instance() {
    return reinterpret_cast<const Motorsts018e*>(
               &_Motorsts018e_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Motorsts018e& a, Motorsts018e& b) {
    a.Swap(&b);
  }
  inline void Swap(Motorsts018e* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motorsts018e* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Motorsts018e* New() const final {
    return CreateMaybeMessage<Motorsts018e>(nullptr);
  }

  Motorsts018e* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Motorsts018e>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Motorsts018e& from);
  void MergeFrom(const Motorsts018e& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motorsts018e* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Motorsts018e";
  }
  protected:
  explicit Motorsts018e(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Motorsts018e_RearmottqvalidType RearmottqvalidType;
  static constexpr RearmottqvalidType RearMotTqValidvalid =
    Motorsts018e_RearmottqvalidType_RearMotTqValidvalid;
  static constexpr RearmottqvalidType RearMotTqValidinvalid =
    Motorsts018e_RearmottqvalidType_RearMotTqValidinvalid;
  static inline bool RearmottqvalidType_IsValid(int value) {
    return Motorsts018e_RearmottqvalidType_IsValid(value);
  }
  static constexpr RearmottqvalidType RearmottqvalidType_MIN =
    Motorsts018e_RearmottqvalidType_RearmottqvalidType_MIN;
  static constexpr RearmottqvalidType RearmottqvalidType_MAX =
    Motorsts018e_RearmottqvalidType_RearmottqvalidType_MAX;
  static constexpr int RearmottqvalidType_ARRAYSIZE =
    Motorsts018e_RearmottqvalidType_RearmottqvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RearmottqvalidType_descriptor() {
    return Motorsts018e_RearmottqvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& RearmottqvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RearmottqvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RearmottqvalidType_Name.");
    return Motorsts018e_RearmottqvalidType_Name(enum_t_value);
  }
  static inline bool RearmottqvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RearmottqvalidType* value) {
    return Motorsts018e_RearmottqvalidType_Parse(name, value);
  }

  typedef Motorsts018e_RearmotspdvalidType RearmotspdvalidType;
  static constexpr RearmotspdvalidType RearMotSpdValidvalid =
    Motorsts018e_RearmotspdvalidType_RearMotSpdValidvalid;
  static constexpr RearmotspdvalidType RearMotSpdValidinvalid =
    Motorsts018e_RearmotspdvalidType_RearMotSpdValidinvalid;
  static inline bool RearmotspdvalidType_IsValid(int value) {
    return Motorsts018e_RearmotspdvalidType_IsValid(value);
  }
  static constexpr RearmotspdvalidType RearmotspdvalidType_MIN =
    Motorsts018e_RearmotspdvalidType_RearmotspdvalidType_MIN;
  static constexpr RearmotspdvalidType RearmotspdvalidType_MAX =
    Motorsts018e_RearmotspdvalidType_RearmotspdvalidType_MAX;
  static constexpr int RearmotspdvalidType_ARRAYSIZE =
    Motorsts018e_RearmotspdvalidType_RearmotspdvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RearmotspdvalidType_descriptor() {
    return Motorsts018e_RearmotspdvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& RearmotspdvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RearmotspdvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RearmotspdvalidType_Name.");
    return Motorsts018e_RearmotspdvalidType_Name(enum_t_value);
  }
  static inline bool RearmotspdvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RearmotspdvalidType* value) {
    return Motorsts018e_RearmotspdvalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMotor01MsgcntrFieldNumber = 1,
    kMotor01CrcFieldNumber = 2,
    kRearmottqFieldNumber = 4,
    kRearmottqvalidFieldNumber = 3,
    kRearmotspdvalidFieldNumber = 5,
    kRearmotspdFieldNumber = 6,
  };
  // optional int32 motor01msgcntr = 1;
  bool has_motor01msgcntr() const;
  private:
  bool _internal_has_motor01msgcntr() const;
  public:
  void clear_motor01msgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 motor01msgcntr() const;
  void set_motor01msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_motor01msgcntr() const;
  void _internal_set_motor01msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 motor01crc = 2;
  bool has_motor01crc() const;
  private:
  bool _internal_has_motor01crc() const;
  public:
  void clear_motor01crc();
  ::PROTOBUF_NAMESPACE_ID::int32 motor01crc() const;
  void set_motor01crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_motor01crc() const;
  void _internal_set_motor01crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double rearmottq = 4;
  bool has_rearmottq() const;
  private:
  bool _internal_has_rearmottq() const;
  public:
  void clear_rearmottq();
  double rearmottq() const;
  void set_rearmottq(double value);
  private:
  double _internal_rearmottq() const;
  void _internal_set_rearmottq(double value);
  public:

  // optional .apollo.canbus.Motorsts018e.RearmottqvalidType rearmottqvalid = 3;
  bool has_rearmottqvalid() const;
  private:
  bool _internal_has_rearmottqvalid() const;
  public:
  void clear_rearmottqvalid();
  ::apollo::canbus::Motorsts018e_RearmottqvalidType rearmottqvalid() const;
  void set_rearmottqvalid(::apollo::canbus::Motorsts018e_RearmottqvalidType value);
  private:
  ::apollo::canbus::Motorsts018e_RearmottqvalidType _internal_rearmottqvalid() const;
  void _internal_set_rearmottqvalid(::apollo::canbus::Motorsts018e_RearmottqvalidType value);
  public:

  // optional .apollo.canbus.Motorsts018e.RearmotspdvalidType rearmotspdvalid = 5;
  bool has_rearmotspdvalid() const;
  private:
  bool _internal_has_rearmotspdvalid() const;
  public:
  void clear_rearmotspdvalid();
  ::apollo::canbus::Motorsts018e_RearmotspdvalidType rearmotspdvalid() const;
  void set_rearmotspdvalid(::apollo::canbus::Motorsts018e_RearmotspdvalidType value);
  private:
  ::apollo::canbus::Motorsts018e_RearmotspdvalidType _internal_rearmotspdvalid() const;
  void _internal_set_rearmotspdvalid(::apollo::canbus::Motorsts018e_RearmotspdvalidType value);
  public:

  // optional int32 rearmotspd = 6;
  bool has_rearmotspd() const;
  private:
  bool _internal_has_rearmotspd() const;
  public:
  void clear_rearmotspd();
  ::PROTOBUF_NAMESPACE_ID::int32 rearmotspd() const;
  void set_rearmotspd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rearmotspd() const;
  void _internal_set_rearmotspd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Motorsts018e)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 motor01msgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 motor01crc_;
  double rearmottq_;
  int rearmottqvalid_;
  int rearmotspdvalid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rearmotspd_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Epsreqc6 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Epsreqc6) */ {
 public:
  inline Epsreqc6() : Epsreqc6(nullptr) {}
  virtual ~Epsreqc6();

  Epsreqc6(const Epsreqc6& from);
  Epsreqc6(Epsreqc6&& from) noexcept
    : Epsreqc6() {
    *this = ::std::move(from);
  }

  inline Epsreqc6& operator=(const Epsreqc6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Epsreqc6& operator=(Epsreqc6&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Epsreqc6& default_instance();

  static inline const Epsreqc6* internal_default_instance() {
    return reinterpret_cast<const Epsreqc6*>(
               &_Epsreqc6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Epsreqc6& a, Epsreqc6& b) {
    a.Swap(&b);
  }
  inline void Swap(Epsreqc6* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Epsreqc6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Epsreqc6* New() const final {
    return CreateMaybeMessage<Epsreqc6>(nullptr);
  }

  Epsreqc6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Epsreqc6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Epsreqc6& from);
  void MergeFrom(const Epsreqc6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Epsreqc6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Epsreqc6";
  }
  protected:
  explicit Epsreqc6(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Epsreqc6_EpsreqtypType EpsreqtypType;
  static constexpr EpsreqtypType EPSReqTypNoRequest =
    Epsreqc6_EpsreqtypType_EPSReqTypNoRequest;
  static constexpr EpsreqtypType EPSReqTypReserved1DSR =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved1DSR;
  static constexpr EpsreqtypType EPSReqTypTOIRequest =
    Epsreqc6_EpsreqtypType_EPSReqTypTOIRequest;
  static constexpr EpsreqtypType EPSReqTypPAIRequest =
    Epsreqc6_EpsreqtypType_EPSReqTypPAIRequest;
  static constexpr EpsreqtypType EPSReqTypDAIRequest =
    Epsreqc6_EpsreqtypType_EPSReqTypDAIRequest;
  static constexpr EpsreqtypType EPSReqTypHI1Request =
    Epsreqc6_EpsreqtypType_EPSReqTypHI1Request;
  static constexpr EpsreqtypType EPSReqTypHI2Request =
    Epsreqc6_EpsreqtypType_EPSReqTypHI2Request;
  static constexpr EpsreqtypType EPSReqTypReserved7 =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved7;
  static constexpr EpsreqtypType EPSReqTypReserved8 =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved8;
  static constexpr EpsreqtypType EPSReqTypReserved9 =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved9;
  static constexpr EpsreqtypType EPSReqTypReserved10 =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved10;
  static constexpr EpsreqtypType EPSReqTypReserved11 =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved11;
  static constexpr EpsreqtypType EPSReqTypReserved12 =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved12;
  static constexpr EpsreqtypType EPSReqTypReserved13 =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved13;
  static constexpr EpsreqtypType EPSReqTypReserved14 =
    Epsreqc6_EpsreqtypType_EPSReqTypReserved14;
  static constexpr EpsreqtypType EPSReqTypSignalNotAvailable =
    Epsreqc6_EpsreqtypType_EPSReqTypSignalNotAvailable;
  static inline bool EpsreqtypType_IsValid(int value) {
    return Epsreqc6_EpsreqtypType_IsValid(value);
  }
  static constexpr EpsreqtypType EpsreqtypType_MIN =
    Epsreqc6_EpsreqtypType_EpsreqtypType_MIN;
  static constexpr EpsreqtypType EpsreqtypType_MAX =
    Epsreqc6_EpsreqtypType_EpsreqtypType_MAX;
  static constexpr int EpsreqtypType_ARRAYSIZE =
    Epsreqc6_EpsreqtypType_EpsreqtypType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpsreqtypType_descriptor() {
    return Epsreqc6_EpsreqtypType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpsreqtypType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpsreqtypType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpsreqtypType_Name.");
    return Epsreqc6_EpsreqtypType_Name(enum_t_value);
  }
  static inline bool EpsreqtypType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpsreqtypType* value) {
    return Epsreqc6_EpsreqtypType_Parse(name, value);
  }

  typedef Epsreqc6_SysvalidType SysvalidType;
  static constexpr SysvalidType SysValidInvalid =
    Epsreqc6_SysvalidType_SysValidInvalid;
  static constexpr SysvalidType SysValidValid =
    Epsreqc6_SysvalidType_SysValidValid;
  static inline bool SysvalidType_IsValid(int value) {
    return Epsreqc6_SysvalidType_IsValid(value);
  }
  static constexpr SysvalidType SysvalidType_MIN =
    Epsreqc6_SysvalidType_SysvalidType_MIN;
  static constexpr SysvalidType SysvalidType_MAX =
    Epsreqc6_SysvalidType_SysvalidType_MAX;
  static constexpr int SysvalidType_ARRAYSIZE =
    Epsreqc6_SysvalidType_SysvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SysvalidType_descriptor() {
    return Epsreqc6_SysvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& SysvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SysvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SysvalidType_Name.");
    return Epsreqc6_SysvalidType_Name(enum_t_value);
  }
  static inline bool SysvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SysvalidType* value) {
    return Epsreqc6_SysvalidType_Parse(name, value);
  }

  typedef Epsreqc6_PilotsymType PilotsymType;
  static constexpr PilotsymType PilotSymNoSymbol =
    Epsreqc6_PilotsymType_PilotSymNoSymbol;
  static constexpr PilotsymType PilotSymGraySymbol =
    Epsreqc6_PilotsymType_PilotSymGraySymbol;
  static constexpr PilotsymType PilotSymWhiteSymbol =
    Epsreqc6_PilotsymType_PilotSymWhiteSymbol;
  static constexpr PilotsymType PilotSymreserved =
    Epsreqc6_PilotsymType_PilotSymreserved;
  static inline bool PilotsymType_IsValid(int value) {
    return Epsreqc6_PilotsymType_IsValid(value);
  }
  static constexpr PilotsymType PilotsymType_MIN =
    Epsreqc6_PilotsymType_PilotsymType_MIN;
  static constexpr PilotsymType PilotsymType_MAX =
    Epsreqc6_PilotsymType_PilotsymType_MAX;
  static constexpr int PilotsymType_ARRAYSIZE =
    Epsreqc6_PilotsymType_PilotsymType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PilotsymType_descriptor() {
    return Epsreqc6_PilotsymType_descriptor();
  }
  template<typename T>
  static inline const std::string& PilotsymType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PilotsymType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PilotsymType_Name.");
    return Epsreqc6_PilotsymType_Name(enum_t_value);
  }
  static inline bool PilotsymType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PilotsymType* value) {
    return Epsreqc6_PilotsymType_Parse(name, value);
  }

  typedef Epsreqc6_AdcaccsymType AdcaccsymType;
  static constexpr AdcaccsymType AdcAccsymNoSymbol =
    Epsreqc6_AdcaccsymType_AdcAccsymNoSymbol;
  static constexpr AdcaccsymType AdcAccsymGraySymbol =
    Epsreqc6_AdcaccsymType_AdcAccsymGraySymbol;
  static constexpr AdcaccsymType AdcAccsymWhiteSymbol =
    Epsreqc6_AdcaccsymType_AdcAccsymWhiteSymbol;
  static constexpr AdcaccsymType AdcAccsymreserved =
    Epsreqc6_AdcaccsymType_AdcAccsymreserved;
  static inline bool AdcaccsymType_IsValid(int value) {
    return Epsreqc6_AdcaccsymType_IsValid(value);
  }
  static constexpr AdcaccsymType AdcaccsymType_MIN =
    Epsreqc6_AdcaccsymType_AdcaccsymType_MIN;
  static constexpr AdcaccsymType AdcaccsymType_MAX =
    Epsreqc6_AdcaccsymType_AdcaccsymType_MAX;
  static constexpr int AdcaccsymType_ARRAYSIZE =
    Epsreqc6_AdcaccsymType_AdcaccsymType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AdcaccsymType_descriptor() {
    return Epsreqc6_AdcaccsymType_descriptor();
  }
  template<typename T>
  static inline const std::string& AdcaccsymType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AdcaccsymType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AdcaccsymType_Name.");
    return Epsreqc6_AdcaccsymType_Name(enum_t_value);
  }
  static inline bool AdcaccsymType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AdcaccsymType* value) {
    return Epsreqc6_AdcaccsymType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEpspaireqFieldNumber = 1,
    kEpsdaireqFieldNumber = 2,
    kEpstoireqFieldNumber = 3,
    kEpsreqtypFieldNumber = 4,
    kSysvalidFieldNumber = 5,
    kPilotsymFieldNumber = 6,
    kEpscrcFieldNumber = 7,
    kEpsmsgcntrFieldNumber = 8,
    kAdcaccsymFieldNumber = 9,
  };
  // optional double epspaireq = 1;
  bool has_epspaireq() const;
  private:
  bool _internal_has_epspaireq() const;
  public:
  void clear_epspaireq();
  double epspaireq() const;
  void set_epspaireq(double value);
  private:
  double _internal_epspaireq() const;
  void _internal_set_epspaireq(double value);
  public:

  // optional double epsdaireq = 2;
  bool has_epsdaireq() const;
  private:
  bool _internal_has_epsdaireq() const;
  public:
  void clear_epsdaireq();
  double epsdaireq() const;
  void set_epsdaireq(double value);
  private:
  double _internal_epsdaireq() const;
  void _internal_set_epsdaireq(double value);
  public:

  // optional double epstoireq = 3;
  bool has_epstoireq() const;
  private:
  bool _internal_has_epstoireq() const;
  public:
  void clear_epstoireq();
  double epstoireq() const;
  void set_epstoireq(double value);
  private:
  double _internal_epstoireq() const;
  void _internal_set_epstoireq(double value);
  public:

  // optional .apollo.canbus.Epsreqc6.EpsreqtypType epsreqtyp = 4;
  bool has_epsreqtyp() const;
  private:
  bool _internal_has_epsreqtyp() const;
  public:
  void clear_epsreqtyp();
  ::apollo::canbus::Epsreqc6_EpsreqtypType epsreqtyp() const;
  void set_epsreqtyp(::apollo::canbus::Epsreqc6_EpsreqtypType value);
  private:
  ::apollo::canbus::Epsreqc6_EpsreqtypType _internal_epsreqtyp() const;
  void _internal_set_epsreqtyp(::apollo::canbus::Epsreqc6_EpsreqtypType value);
  public:

  // optional .apollo.canbus.Epsreqc6.SysvalidType sysvalid = 5;
  bool has_sysvalid() const;
  private:
  bool _internal_has_sysvalid() const;
  public:
  void clear_sysvalid();
  ::apollo::canbus::Epsreqc6_SysvalidType sysvalid() const;
  void set_sysvalid(::apollo::canbus::Epsreqc6_SysvalidType value);
  private:
  ::apollo::canbus::Epsreqc6_SysvalidType _internal_sysvalid() const;
  void _internal_set_sysvalid(::apollo::canbus::Epsreqc6_SysvalidType value);
  public:

  // optional .apollo.canbus.Epsreqc6.PilotsymType pilotsym = 6;
  bool has_pilotsym() const;
  private:
  bool _internal_has_pilotsym() const;
  public:
  void clear_pilotsym();
  ::apollo::canbus::Epsreqc6_PilotsymType pilotsym() const;
  void set_pilotsym(::apollo::canbus::Epsreqc6_PilotsymType value);
  private:
  ::apollo::canbus::Epsreqc6_PilotsymType _internal_pilotsym() const;
  void _internal_set_pilotsym(::apollo::canbus::Epsreqc6_PilotsymType value);
  public:

  // optional int32 epscrc = 7;
  bool has_epscrc() const;
  private:
  bool _internal_has_epscrc() const;
  public:
  void clear_epscrc();
  ::PROTOBUF_NAMESPACE_ID::int32 epscrc() const;
  void set_epscrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epscrc() const;
  void _internal_set_epscrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 epsmsgcntr = 8;
  bool has_epsmsgcntr() const;
  private:
  bool _internal_has_epsmsgcntr() const;
  public:
  void clear_epsmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 epsmsgcntr() const;
  void set_epsmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epsmsgcntr() const;
  void _internal_set_epsmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Epsreqc6.AdcaccsymType adcaccsym = 9;
  bool has_adcaccsym() const;
  private:
  bool _internal_has_adcaccsym() const;
  public:
  void clear_adcaccsym();
  ::apollo::canbus::Epsreqc6_AdcaccsymType adcaccsym() const;
  void set_adcaccsym(::apollo::canbus::Epsreqc6_AdcaccsymType value);
  private:
  ::apollo::canbus::Epsreqc6_AdcaccsymType _internal_adcaccsym() const;
  void _internal_set_adcaccsym(::apollo::canbus::Epsreqc6_AdcaccsymType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Epsreqc6)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double epspaireq_;
  double epsdaireq_;
  double epstoireq_;
  int epsreqtyp_;
  int sysvalid_;
  int pilotsym_;
  ::PROTOBUF_NAMESPACE_ID::int32 epscrc_;
  ::PROTOBUF_NAMESPACE_ID::int32 epsmsgcntr_;
  int adcaccsym_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Epsstatus01d5 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Epsstatus01d5) */ {
 public:
  inline Epsstatus01d5() : Epsstatus01d5(nullptr) {}
  virtual ~Epsstatus01d5();

  Epsstatus01d5(const Epsstatus01d5& from);
  Epsstatus01d5(Epsstatus01d5&& from) noexcept
    : Epsstatus01d5() {
    *this = ::std::move(from);
  }

  inline Epsstatus01d5& operator=(const Epsstatus01d5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Epsstatus01d5& operator=(Epsstatus01d5&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Epsstatus01d5& default_instance();

  static inline const Epsstatus01d5* internal_default_instance() {
    return reinterpret_cast<const Epsstatus01d5*>(
               &_Epsstatus01d5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Epsstatus01d5& a, Epsstatus01d5& b) {
    a.Swap(&b);
  }
  inline void Swap(Epsstatus01d5* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Epsstatus01d5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Epsstatus01d5* New() const final {
    return CreateMaybeMessage<Epsstatus01d5>(nullptr);
  }

  Epsstatus01d5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Epsstatus01d5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Epsstatus01d5& from);
  void MergeFrom(const Epsstatus01d5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Epsstatus01d5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Epsstatus01d5";
  }
  protected:
  explicit Epsstatus01d5(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Epsstatus01d5_EpswarnlampType EpswarnlampType;
  static constexpr EpswarnlampType EPSwarnLampoff =
    Epsstatus01d5_EpswarnlampType_EPSwarnLampoff;
  static constexpr EpswarnlampType EPSwarnLampon =
    Epsstatus01d5_EpswarnlampType_EPSwarnLampon;
  static constexpr EpswarnlampType EPSwarnLampNotAvailable =
    Epsstatus01d5_EpswarnlampType_EPSwarnLampNotAvailable;
  static constexpr EpswarnlampType EPSwarnLampreserved =
    Epsstatus01d5_EpswarnlampType_EPSwarnLampreserved;
  static inline bool EpswarnlampType_IsValid(int value) {
    return Epsstatus01d5_EpswarnlampType_IsValid(value);
  }
  static constexpr EpswarnlampType EpswarnlampType_MIN =
    Epsstatus01d5_EpswarnlampType_EpswarnlampType_MIN;
  static constexpr EpswarnlampType EpswarnlampType_MAX =
    Epsstatus01d5_EpswarnlampType_EpswarnlampType_MAX;
  static constexpr int EpswarnlampType_ARRAYSIZE =
    Epsstatus01d5_EpswarnlampType_EpswarnlampType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpswarnlampType_descriptor() {
    return Epsstatus01d5_EpswarnlampType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpswarnlampType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpswarnlampType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpswarnlampType_Name.");
    return Epsstatus01d5_EpswarnlampType_Name(enum_t_value);
  }
  static inline bool EpswarnlampType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpswarnlampType* value) {
    return Epsstatus01d5_EpswarnlampType_Parse(name, value);
  }

  typedef Epsstatus01d5_AbsagreqavlType AbsagreqavlType;
  static constexpr AbsagreqavlType AbsAgreqavlNotAvailable =
    Epsstatus01d5_AbsagreqavlType_AbsAgreqavlNotAvailable;
  static constexpr AbsagreqavlType AbsAgreqavlavailable =
    Epsstatus01d5_AbsagreqavlType_AbsAgreqavlavailable;
  static inline bool AbsagreqavlType_IsValid(int value) {
    return Epsstatus01d5_AbsagreqavlType_IsValid(value);
  }
  static constexpr AbsagreqavlType AbsagreqavlType_MIN =
    Epsstatus01d5_AbsagreqavlType_AbsagreqavlType_MIN;
  static constexpr AbsagreqavlType AbsagreqavlType_MAX =
    Epsstatus01d5_AbsagreqavlType_AbsagreqavlType_MAX;
  static constexpr int AbsagreqavlType_ARRAYSIZE =
    Epsstatus01d5_AbsagreqavlType_AbsagreqavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AbsagreqavlType_descriptor() {
    return Epsstatus01d5_AbsagreqavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& AbsagreqavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AbsagreqavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AbsagreqavlType_Name.");
    return Epsstatus01d5_AbsagreqavlType_Name(enum_t_value);
  }
  static inline bool AbsagreqavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AbsagreqavlType* value) {
    return Epsstatus01d5_AbsagreqavlType_Parse(name, value);
  }

  typedef Epsstatus01d5_EpsstsType EpsstsType;
  static constexpr EpsstsType EPSstsinit =
    Epsstatus01d5_EpsstsType_EPSstsinit;
  static constexpr EpsstsType EPSstsnormal =
    Epsstatus01d5_EpsstsType_EPSstsnormal;
  static constexpr EpsstsType EPSstsDegradedDueToTempOrVol =
    Epsstatus01d5_EpsstsType_EPSstsDegradedDueToTempOrVol;
  static constexpr EpsstsType EPSstsTemporaryError =
    Epsstatus01d5_EpsstsType_EPSstsTemporaryError;
  static constexpr EpsstsType EPSstsPermamemtError =
    Epsstatus01d5_EpsstsType_EPSstsPermamemtError;
  static constexpr EpsstsType EPSstsreserved5 =
    Epsstatus01d5_EpsstsType_EPSstsreserved5;
  static constexpr EpsstsType EPSstsreserved6 =
    Epsstatus01d5_EpsstsType_EPSstsreserved6;
  static constexpr EpsstsType EPSstsinvalid =
    Epsstatus01d5_EpsstsType_EPSstsinvalid;
  static inline bool EpsstsType_IsValid(int value) {
    return Epsstatus01d5_EpsstsType_IsValid(value);
  }
  static constexpr EpsstsType EpsstsType_MIN =
    Epsstatus01d5_EpsstsType_EpsstsType_MIN;
  static constexpr EpsstsType EpsstsType_MAX =
    Epsstatus01d5_EpsstsType_EpsstsType_MAX;
  static constexpr int EpsstsType_ARRAYSIZE =
    Epsstatus01d5_EpsstsType_EpsstsType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpsstsType_descriptor() {
    return Epsstatus01d5_EpsstsType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpsstsType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpsstsType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpsstsType_Name.");
    return Epsstatus01d5_EpsstsType_Name(enum_t_value);
  }
  static inline bool EpsstsType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpsstsType* value) {
    return Epsstatus01d5_EpsstsType_Parse(name, value);
  }

  typedef Epsstatus01d5_EpsmodType EpsmodType;
  static constexpr EpsmodType EPSModNone =
    Epsstatus01d5_EpsmodType_EPSModNone;
  static constexpr EpsmodType EPSModPAI =
    Epsstatus01d5_EpsmodType_EPSModPAI;
  static constexpr EpsmodType EPSModDAI =
    Epsstatus01d5_EpsmodType_EPSModDAI;
  static constexpr EpsmodType EPSModTOI =
    Epsstatus01d5_EpsmodType_EPSModTOI;
  static constexpr EpsmodType EPSModinvalid =
    Epsstatus01d5_EpsmodType_EPSModinvalid;
  static inline bool EpsmodType_IsValid(int value) {
    return Epsstatus01d5_EpsmodType_IsValid(value);
  }
  static constexpr EpsmodType EpsmodType_MIN =
    Epsstatus01d5_EpsmodType_EpsmodType_MIN;
  static constexpr EpsmodType EpsmodType_MAX =
    Epsstatus01d5_EpsmodType_EpsmodType_MAX;
  static constexpr int EpsmodType_ARRAYSIZE =
    Epsstatus01d5_EpsmodType_EpsmodType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpsmodType_descriptor() {
    return Epsstatus01d5_EpsmodType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpsmodType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpsmodType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpsmodType_Name.");
    return Epsstatus01d5_EpsmodType_Name(enum_t_value);
  }
  static inline bool EpsmodType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpsmodType* value) {
    return Epsstatus01d5_EpsmodType_Parse(name, value);
  }

  typedef Epsstatus01d5_SteeragspddirType SteeragspddirType;
  static constexpr SteeragspddirType SteeragspddirLeftPlus =
    Epsstatus01d5_SteeragspddirType_SteeragspddirLeftPlus;
  static constexpr SteeragspddirType SteeragspddirRightMinus =
    Epsstatus01d5_SteeragspddirType_SteeragspddirRightMinus;
  static inline bool SteeragspddirType_IsValid(int value) {
    return Epsstatus01d5_SteeragspddirType_IsValid(value);
  }
  static constexpr SteeragspddirType SteeragspddirType_MIN =
    Epsstatus01d5_SteeragspddirType_SteeragspddirType_MIN;
  static constexpr SteeragspddirType SteeragspddirType_MAX =
    Epsstatus01d5_SteeragspddirType_SteeragspddirType_MAX;
  static constexpr int SteeragspddirType_ARRAYSIZE =
    Epsstatus01d5_SteeragspddirType_SteeragspddirType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SteeragspddirType_descriptor() {
    return Epsstatus01d5_SteeragspddirType_descriptor();
  }
  template<typename T>
  static inline const std::string& SteeragspddirType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SteeragspddirType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SteeragspddirType_Name.");
    return Epsstatus01d5_SteeragspddirType_Name(enum_t_value);
  }
  static inline bool SteeragspddirType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SteeragspddirType* value) {
    return Epsstatus01d5_SteeragspddirType_Parse(name, value);
  }

  typedef Epsstatus01d5_SteerangledirType SteerangledirType;
  static constexpr SteerangledirType SteerAngledirLeftPlus =
    Epsstatus01d5_SteerangledirType_SteerAngledirLeftPlus;
  static constexpr SteerangledirType SteerAngledirRightMinus =
    Epsstatus01d5_SteerangledirType_SteerAngledirRightMinus;
  static inline bool SteerangledirType_IsValid(int value) {
    return Epsstatus01d5_SteerangledirType_IsValid(value);
  }
  static constexpr SteerangledirType SteerangledirType_MIN =
    Epsstatus01d5_SteerangledirType_SteerangledirType_MIN;
  static constexpr SteerangledirType SteerangledirType_MAX =
    Epsstatus01d5_SteerangledirType_SteerangledirType_MAX;
  static constexpr int SteerangledirType_ARRAYSIZE =
    Epsstatus01d5_SteerangledirType_SteerangledirType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SteerangledirType_descriptor() {
    return Epsstatus01d5_SteerangledirType_descriptor();
  }
  template<typename T>
  static inline const std::string& SteerangledirType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SteerangledirType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SteerangledirType_Name.");
    return Epsstatus01d5_SteerangledirType_Name(enum_t_value);
  }
  static inline bool SteerangledirType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SteerangledirType* value) {
    return Epsstatus01d5_SteerangledirType_Parse(name, value);
  }

  typedef Epsstatus01d5_SteerangleandspdvalidType SteerangleandspdvalidType;
  static constexpr SteerangleandspdvalidType SteerAngleandspdvalidvalid =
    Epsstatus01d5_SteerangleandspdvalidType_SteerAngleandspdvalidvalid;
  static constexpr SteerangleandspdvalidType SteerAngleandspdvalidinvalid =
    Epsstatus01d5_SteerangleandspdvalidType_SteerAngleandspdvalidinvalid;
  static inline bool SteerangleandspdvalidType_IsValid(int value) {
    return Epsstatus01d5_SteerangleandspdvalidType_IsValid(value);
  }
  static constexpr SteerangleandspdvalidType SteerangleandspdvalidType_MIN =
    Epsstatus01d5_SteerangleandspdvalidType_SteerangleandspdvalidType_MIN;
  static constexpr SteerangleandspdvalidType SteerangleandspdvalidType_MAX =
    Epsstatus01d5_SteerangleandspdvalidType_SteerangleandspdvalidType_MAX;
  static constexpr int SteerangleandspdvalidType_ARRAYSIZE =
    Epsstatus01d5_SteerangleandspdvalidType_SteerangleandspdvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SteerangleandspdvalidType_descriptor() {
    return Epsstatus01d5_SteerangleandspdvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& SteerangleandspdvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SteerangleandspdvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SteerangleandspdvalidType_Name.");
    return Epsstatus01d5_SteerangleandspdvalidType_Name(enum_t_value);
  }
  static inline bool SteerangleandspdvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SteerangleandspdvalidType* value) {
    return Epsstatus01d5_SteerangleandspdvalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEpswarnlampFieldNumber = 1,
    kAbsagreqavlFieldNumber = 2,
    kTorsbartqFieldNumber = 3,
    kEpsstsFieldNumber = 4,
    kEpsmodFieldNumber = 5,
    kSteeragspdFieldNumber = 7,
    kSteeragspddirFieldNumber = 6,
    kSteerangledirFieldNumber = 8,
    kSteerangleFieldNumber = 10,
    kSteerangleandspdvalidFieldNumber = 9,
    kEpsdmsgcntrFieldNumber = 11,
    kEpsdcrcFieldNumber = 12,
  };
  // optional .apollo.canbus.Epsstatus01d5.EpswarnlampType epswarnlamp = 1;
  bool has_epswarnlamp() const;
  private:
  bool _internal_has_epswarnlamp() const;
  public:
  void clear_epswarnlamp();
  ::apollo::canbus::Epsstatus01d5_EpswarnlampType epswarnlamp() const;
  void set_epswarnlamp(::apollo::canbus::Epsstatus01d5_EpswarnlampType value);
  private:
  ::apollo::canbus::Epsstatus01d5_EpswarnlampType _internal_epswarnlamp() const;
  void _internal_set_epswarnlamp(::apollo::canbus::Epsstatus01d5_EpswarnlampType value);
  public:

  // optional .apollo.canbus.Epsstatus01d5.AbsagreqavlType absagreqavl = 2;
  bool has_absagreqavl() const;
  private:
  bool _internal_has_absagreqavl() const;
  public:
  void clear_absagreqavl();
  ::apollo::canbus::Epsstatus01d5_AbsagreqavlType absagreqavl() const;
  void set_absagreqavl(::apollo::canbus::Epsstatus01d5_AbsagreqavlType value);
  private:
  ::apollo::canbus::Epsstatus01d5_AbsagreqavlType _internal_absagreqavl() const;
  void _internal_set_absagreqavl(::apollo::canbus::Epsstatus01d5_AbsagreqavlType value);
  public:

  // optional double torsbartq = 3;
  bool has_torsbartq() const;
  private:
  bool _internal_has_torsbartq() const;
  public:
  void clear_torsbartq();
  double torsbartq() const;
  void set_torsbartq(double value);
  private:
  double _internal_torsbartq() const;
  void _internal_set_torsbartq(double value);
  public:

  // optional .apollo.canbus.Epsstatus01d5.EpsstsType epssts = 4;
  bool has_epssts() const;
  private:
  bool _internal_has_epssts() const;
  public:
  void clear_epssts();
  ::apollo::canbus::Epsstatus01d5_EpsstsType epssts() const;
  void set_epssts(::apollo::canbus::Epsstatus01d5_EpsstsType value);
  private:
  ::apollo::canbus::Epsstatus01d5_EpsstsType _internal_epssts() const;
  void _internal_set_epssts(::apollo::canbus::Epsstatus01d5_EpsstsType value);
  public:

  // optional .apollo.canbus.Epsstatus01d5.EpsmodType epsmod = 5;
  bool has_epsmod() const;
  private:
  bool _internal_has_epsmod() const;
  public:
  void clear_epsmod();
  ::apollo::canbus::Epsstatus01d5_EpsmodType epsmod() const;
  void set_epsmod(::apollo::canbus::Epsstatus01d5_EpsmodType value);
  private:
  ::apollo::canbus::Epsstatus01d5_EpsmodType _internal_epsmod() const;
  void _internal_set_epsmod(::apollo::canbus::Epsstatus01d5_EpsmodType value);
  public:

  // optional double steeragspd = 7;
  bool has_steeragspd() const;
  private:
  bool _internal_has_steeragspd() const;
  public:
  void clear_steeragspd();
  double steeragspd() const;
  void set_steeragspd(double value);
  private:
  double _internal_steeragspd() const;
  void _internal_set_steeragspd(double value);
  public:

  // optional .apollo.canbus.Epsstatus01d5.SteeragspddirType steeragspddir = 6;
  bool has_steeragspddir() const;
  private:
  bool _internal_has_steeragspddir() const;
  public:
  void clear_steeragspddir();
  ::apollo::canbus::Epsstatus01d5_SteeragspddirType steeragspddir() const;
  void set_steeragspddir(::apollo::canbus::Epsstatus01d5_SteeragspddirType value);
  private:
  ::apollo::canbus::Epsstatus01d5_SteeragspddirType _internal_steeragspddir() const;
  void _internal_set_steeragspddir(::apollo::canbus::Epsstatus01d5_SteeragspddirType value);
  public:

  // optional .apollo.canbus.Epsstatus01d5.SteerangledirType steerangledir = 8;
  bool has_steerangledir() const;
  private:
  bool _internal_has_steerangledir() const;
  public:
  void clear_steerangledir();
  ::apollo::canbus::Epsstatus01d5_SteerangledirType steerangledir() const;
  void set_steerangledir(::apollo::canbus::Epsstatus01d5_SteerangledirType value);
  private:
  ::apollo::canbus::Epsstatus01d5_SteerangledirType _internal_steerangledir() const;
  void _internal_set_steerangledir(::apollo::canbus::Epsstatus01d5_SteerangledirType value);
  public:

  // optional double steerangle = 10;
  bool has_steerangle() const;
  private:
  bool _internal_has_steerangle() const;
  public:
  void clear_steerangle();
  double steerangle() const;
  void set_steerangle(double value);
  private:
  double _internal_steerangle() const;
  void _internal_set_steerangle(double value);
  public:

  // optional .apollo.canbus.Epsstatus01d5.SteerangleandspdvalidType steerangleandspdvalid = 9;
  bool has_steerangleandspdvalid() const;
  private:
  bool _internal_has_steerangleandspdvalid() const;
  public:
  void clear_steerangleandspdvalid();
  ::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType steerangleandspdvalid() const;
  void set_steerangleandspdvalid(::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType value);
  private:
  ::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType _internal_steerangleandspdvalid() const;
  void _internal_set_steerangleandspdvalid(::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType value);
  public:

  // optional int32 epsdmsgcntr = 11;
  bool has_epsdmsgcntr() const;
  private:
  bool _internal_has_epsdmsgcntr() const;
  public:
  void clear_epsdmsgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 epsdmsgcntr() const;
  void set_epsdmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epsdmsgcntr() const;
  void _internal_set_epsdmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 epsdcrc = 12;
  bool has_epsdcrc() const;
  private:
  bool _internal_has_epsdcrc() const;
  public:
  void clear_epsdcrc();
  ::PROTOBUF_NAMESPACE_ID::int32 epsdcrc() const;
  void set_epsdcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_epsdcrc() const;
  void _internal_set_epsdcrc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Epsstatus01d5)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int epswarnlamp_;
  int absagreqavl_;
  double torsbartq_;
  int epssts_;
  int epsmod_;
  double steeragspd_;
  int steeragspddir_;
  int steerangledir_;
  double steerangle_;
  int steerangleandspdvalid_;
  ::PROTOBUF_NAMESPACE_ID::int32 epsdmsgcntr_;
  ::PROTOBUF_NAMESPACE_ID::int32 epsdcrc_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Epsstatus02d6 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Epsstatus02d6) */ {
 public:
  inline Epsstatus02d6() : Epsstatus02d6(nullptr) {}
  virtual ~Epsstatus02d6();

  Epsstatus02d6(const Epsstatus02d6& from);
  Epsstatus02d6(Epsstatus02d6&& from) noexcept
    : Epsstatus02d6() {
    *this = ::std::move(from);
  }

  inline Epsstatus02d6& operator=(const Epsstatus02d6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Epsstatus02d6& operator=(Epsstatus02d6&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Epsstatus02d6& default_instance();

  static inline const Epsstatus02d6* internal_default_instance() {
    return reinterpret_cast<const Epsstatus02d6*>(
               &_Epsstatus02d6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Epsstatus02d6& a, Epsstatus02d6& b) {
    a.Swap(&b);
  }
  inline void Swap(Epsstatus02d6* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Epsstatus02d6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Epsstatus02d6* New() const final {
    return CreateMaybeMessage<Epsstatus02d6>(nullptr);
  }

  Epsstatus02d6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Epsstatus02d6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Epsstatus02d6& from);
  void MergeFrom(const Epsstatus02d6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Epsstatus02d6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Epsstatus02d6";
  }
  protected:
  explicit Epsstatus02d6(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Epsstatus02d6_EpstqreqavlType EpstqreqavlType;
  static constexpr EpstqreqavlType EpsTqreqavlNotAvailable =
    Epsstatus02d6_EpstqreqavlType_EpsTqreqavlNotAvailable;
  static constexpr EpstqreqavlType EpsTqreqavlAvailable =
    Epsstatus02d6_EpstqreqavlType_EpsTqreqavlAvailable;
  static inline bool EpstqreqavlType_IsValid(int value) {
    return Epsstatus02d6_EpstqreqavlType_IsValid(value);
  }
  static constexpr EpstqreqavlType EpstqreqavlType_MIN =
    Epsstatus02d6_EpstqreqavlType_EpstqreqavlType_MIN;
  static constexpr EpstqreqavlType EpstqreqavlType_MAX =
    Epsstatus02d6_EpstqreqavlType_EpstqreqavlType_MAX;
  static constexpr int EpstqreqavlType_ARRAYSIZE =
    Epsstatus02d6_EpstqreqavlType_EpstqreqavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpstqreqavlType_descriptor() {
    return Epsstatus02d6_EpstqreqavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpstqreqavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpstqreqavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpstqreqavlType_Name.");
    return Epsstatus02d6_EpstqreqavlType_Name(enum_t_value);
  }
  static inline bool EpstqreqavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpstqreqavlType* value) {
    return Epsstatus02d6_EpstqreqavlType_Parse(name, value);
  }

  typedef Epsstatus02d6_EpspinionangreqavlType EpspinionangreqavlType;
  static constexpr EpspinionangreqavlType EpsPinionangreqavlNotAvailable =
    Epsstatus02d6_EpspinionangreqavlType_EpsPinionangreqavlNotAvailable;
  static constexpr EpspinionangreqavlType EpsPinionangreqavlAvailable =
    Epsstatus02d6_EpspinionangreqavlType_EpsPinionangreqavlAvailable;
  static inline bool EpspinionangreqavlType_IsValid(int value) {
    return Epsstatus02d6_EpspinionangreqavlType_IsValid(value);
  }
  static constexpr EpspinionangreqavlType EpspinionangreqavlType_MIN =
    Epsstatus02d6_EpspinionangreqavlType_EpspinionangreqavlType_MIN;
  static constexpr EpspinionangreqavlType EpspinionangreqavlType_MAX =
    Epsstatus02d6_EpspinionangreqavlType_EpspinionangreqavlType_MAX;
  static constexpr int EpspinionangreqavlType_ARRAYSIZE =
    Epsstatus02d6_EpspinionangreqavlType_EpspinionangreqavlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpspinionangreqavlType_descriptor() {
    return Epsstatus02d6_EpspinionangreqavlType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpspinionangreqavlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpspinionangreqavlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpspinionangreqavlType_Name.");
    return Epsstatus02d6_EpspinionangreqavlType_Name(enum_t_value);
  }
  static inline bool EpspinionangreqavlType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpspinionangreqavlType* value) {
    return Epsstatus02d6_EpspinionangreqavlType_Parse(name, value);
  }

  typedef Epsstatus02d6_EpshandsoffdetnconfidenceType EpshandsoffdetnconfidenceType;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOn =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOn;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel1 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel1;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel2 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel2;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel3 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel3;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel4 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel4;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel5 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel5;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel6 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel6;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel7 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel7;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel8 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel8;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel9 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel9;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel10 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel10;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel11 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel11;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel12 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel12;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel13 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel13;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceHandsOffConfidenceLevel14 =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceHandsOffConfidenceLevel14;
  static constexpr EpshandsoffdetnconfidenceType EpsHandsoffdetnconfidenceSignalNotAvalible =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpsHandsoffdetnconfidenceSignalNotAvalible;
  static inline bool EpshandsoffdetnconfidenceType_IsValid(int value) {
    return Epsstatus02d6_EpshandsoffdetnconfidenceType_IsValid(value);
  }
  static constexpr EpshandsoffdetnconfidenceType EpshandsoffdetnconfidenceType_MIN =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpshandsoffdetnconfidenceType_MIN;
  static constexpr EpshandsoffdetnconfidenceType EpshandsoffdetnconfidenceType_MAX =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpshandsoffdetnconfidenceType_MAX;
  static constexpr int EpshandsoffdetnconfidenceType_ARRAYSIZE =
    Epsstatus02d6_EpshandsoffdetnconfidenceType_EpshandsoffdetnconfidenceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpshandsoffdetnconfidenceType_descriptor() {
    return Epsstatus02d6_EpshandsoffdetnconfidenceType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpshandsoffdetnconfidenceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpshandsoffdetnconfidenceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpshandsoffdetnconfidenceType_Name.");
    return Epsstatus02d6_EpshandsoffdetnconfidenceType_Name(enum_t_value);
  }
  static inline bool EpshandsoffdetnconfidenceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpshandsoffdetnconfidenceType* value) {
    return Epsstatus02d6_EpshandsoffdetnconfidenceType_Parse(name, value);
  }

  typedef Epsstatus02d6_EpspinionagvalidType EpspinionagvalidType;
  static constexpr EpspinionagvalidType EpsPinionagvalidValid =
    Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidValid;
  static constexpr EpspinionagvalidType EpsPinionagvalidInvalid =
    Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidInvalid;
  static constexpr EpspinionagvalidType EpsPinionagvalidSignalNotAvailable =
    Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidSignalNotAvailable;
  static constexpr EpspinionagvalidType EpsPinionagvalidReserved =
    Epsstatus02d6_EpspinionagvalidType_EpsPinionagvalidReserved;
  static inline bool EpspinionagvalidType_IsValid(int value) {
    return Epsstatus02d6_EpspinionagvalidType_IsValid(value);
  }
  static constexpr EpspinionagvalidType EpspinionagvalidType_MIN =
    Epsstatus02d6_EpspinionagvalidType_EpspinionagvalidType_MIN;
  static constexpr EpspinionagvalidType EpspinionagvalidType_MAX =
    Epsstatus02d6_EpspinionagvalidType_EpspinionagvalidType_MAX;
  static constexpr int EpspinionagvalidType_ARRAYSIZE =
    Epsstatus02d6_EpspinionagvalidType_EpspinionagvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpspinionagvalidType_descriptor() {
    return Epsstatus02d6_EpspinionagvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpspinionagvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpspinionagvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpspinionagvalidType_Name.");
    return Epsstatus02d6_EpspinionagvalidType_Name(enum_t_value);
  }
  static inline bool EpspinionagvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpspinionagvalidType* value) {
    return Epsstatus02d6_EpspinionagvalidType_Parse(name, value);
  }

  typedef Epsstatus02d6_EpsdrvoverridedetnType EpsdrvoverridedetnType;
  static constexpr EpsdrvoverridedetnType EpsDrvoverridedetnOverrideDetected =
    Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnOverrideDetected;
  static constexpr EpsdrvoverridedetnType EpsDrvoverridedetnOverrideNotDetected =
    Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnOverrideNotDetected;
  static constexpr EpsdrvoverridedetnType EpsDrvoverridedetnSignalNotAvailable =
    Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnSignalNotAvailable;
  static constexpr EpsdrvoverridedetnType EpsDrvoverridedetnNoActiveADCRequest =
    Epsstatus02d6_EpsdrvoverridedetnType_EpsDrvoverridedetnNoActiveADCRequest;
  static inline bool EpsdrvoverridedetnType_IsValid(int value) {
    return Epsstatus02d6_EpsdrvoverridedetnType_IsValid(value);
  }
  static constexpr EpsdrvoverridedetnType EpsdrvoverridedetnType_MIN =
    Epsstatus02d6_EpsdrvoverridedetnType_EpsdrvoverridedetnType_MIN;
  static constexpr EpsdrvoverridedetnType EpsdrvoverridedetnType_MAX =
    Epsstatus02d6_EpsdrvoverridedetnType_EpsdrvoverridedetnType_MAX;
  static constexpr int EpsdrvoverridedetnType_ARRAYSIZE =
    Epsstatus02d6_EpsdrvoverridedetnType_EpsdrvoverridedetnType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpsdrvoverridedetnType_descriptor() {
    return Epsstatus02d6_EpsdrvoverridedetnType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpsdrvoverridedetnType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpsdrvoverridedetnType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpsdrvoverridedetnType_Name.");
    return Epsstatus02d6_EpsdrvoverridedetnType_Name(enum_t_value);
  }
  static inline bool EpsdrvoverridedetnType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpsdrvoverridedetnType* value) {
    return Epsstatus02d6_EpsdrvoverridedetnType_Parse(name, value);
  }

  typedef Epsstatus02d6_EpsmotortqvalidType EpsmotortqvalidType;
  static constexpr EpsmotortqvalidType EpsMotortqvalidValid =
    Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidValid;
  static constexpr EpsmotortqvalidType EpsMotortqvalidInvalid =
    Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidInvalid;
  static constexpr EpsmotortqvalidType EpsMotortqvalidSignalNotAvailable =
    Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidSignalNotAvailable;
  static constexpr EpsmotortqvalidType EpsMotortqvalidReserved =
    Epsstatus02d6_EpsmotortqvalidType_EpsMotortqvalidReserved;
  static inline bool EpsmotortqvalidType_IsValid(int value) {
    return Epsstatus02d6_EpsmotortqvalidType_IsValid(value);
  }
  static constexpr EpsmotortqvalidType EpsmotortqvalidType_MIN =
    Epsstatus02d6_EpsmotortqvalidType_EpsmotortqvalidType_MIN;
  static constexpr EpsmotortqvalidType EpsmotortqvalidType_MAX =
    Epsstatus02d6_EpsmotortqvalidType_EpsmotortqvalidType_MAX;
  static constexpr int EpsmotortqvalidType_ARRAYSIZE =
    Epsstatus02d6_EpsmotortqvalidType_EpsmotortqvalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpsmotortqvalidType_descriptor() {
    return Epsstatus02d6_EpsmotortqvalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpsmotortqvalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpsmotortqvalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpsmotortqvalidType_Name.");
    return Epsstatus02d6_EpsmotortqvalidType_Name(enum_t_value);
  }
  static inline bool EpsmotortqvalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpsmotortqvalidType* value) {
    return Epsstatus02d6_EpsmotortqvalidType_Parse(name, value);
  }

  typedef Epsstatus02d6_EpsestrackforcevalidType EpsestrackforcevalidType;
  static constexpr EpsestrackforcevalidType EpsEstrackforcevalidValid =
    Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidValid;
  static constexpr EpsestrackforcevalidType EpsEstrackforcevalidInvalid =
    Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidInvalid;
  static constexpr EpsestrackforcevalidType EpsEstrackforcevalidSignalNotAvailable =
    Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidSignalNotAvailable;
  static constexpr EpsestrackforcevalidType EpsEstrackforcevalidReserved =
    Epsstatus02d6_EpsestrackforcevalidType_EpsEstrackforcevalidReserved;
  static inline bool EpsestrackforcevalidType_IsValid(int value) {
    return Epsstatus02d6_EpsestrackforcevalidType_IsValid(value);
  }
  static constexpr EpsestrackforcevalidType EpsestrackforcevalidType_MIN =
    Epsstatus02d6_EpsestrackforcevalidType_EpsestrackforcevalidType_MIN;
  static constexpr EpsestrackforcevalidType EpsestrackforcevalidType_MAX =
    Epsstatus02d6_EpsestrackforcevalidType_EpsestrackforcevalidType_MAX;
  static constexpr int EpsestrackforcevalidType_ARRAYSIZE =
    Epsstatus02d6_EpsestrackforcevalidType_EpsestrackforcevalidType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EpsestrackforcevalidType_descriptor() {
    return Epsstatus02d6_EpsestrackforcevalidType_descriptor();
  }
  template<typename T>
  static inline const std::string& EpsestrackforcevalidType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EpsestrackforcevalidType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EpsestrackforcevalidType_Name.");
    return Epsstatus02d6_EpsestrackforcevalidType_Name(enum_t_value);
  }
  static inline bool EpsestrackforcevalidType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EpsestrackforcevalidType* value) {
    return Epsstatus02d6_EpsestrackforcevalidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEpstqreqavlFieldNumber = 1,
    kEpspinionangreqavlFieldNumber = 2,
    kEpsestrackforceFieldNumber = 3,
    kEpshandsoffdetnconfidenceFieldNumber = 4,
    kEps02MsgcntrFieldNumber = 5,
    kEpspinionagvalidFieldNumber = 6,
    kEpsdrvoverridedetnFieldNumber = 7,
    kEpsmotortqFieldNumber = 9,
    kEps02CrcFieldNumber = 8,
    kEpsmotortqvalidFieldNumber = 10,
    kEpspinionagFieldNumber = 11,
    kEpsestrackforcevalidFieldNumber = 12,
  };
  // optional .apollo.canbus.Epsstatus02d6.EpstqreqavlType epstqreqavl = 1;
  bool has_epstqreqavl() const;
  private:
  bool _internal_has_epstqreqavl() const;
  public:
  void clear_epstqreqavl();
  ::apollo::canbus::Epsstatus02d6_EpstqreqavlType epstqreqavl() const;
  void set_epstqreqavl(::apollo::canbus::Epsstatus02d6_EpstqreqavlType value);
  private:
  ::apollo::canbus::Epsstatus02d6_EpstqreqavlType _internal_epstqreqavl() const;
  void _internal_set_epstqreqavl(::apollo::canbus::Epsstatus02d6_EpstqreqavlType value);
  public:

  // optional .apollo.canbus.Epsstatus02d6.EpspinionangreqavlType epspinionangreqavl = 2;
  bool has_epspinionangreqavl() const;
  private:
  bool _internal_has_epspinionangreqavl() const;
  public:
  void clear_epspinionangreqavl();
  ::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType epspinionangreqavl() const;
  void set_epspinionangreqavl(::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType value);
  private:
  ::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType _internal_epspinionangreqavl() const;
  void _internal_set_epspinionangreqavl(::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType value);
  public:

  // optional double epsestrackforce = 3;
  bool has_epsestrackforce() const;
  private:
  bool _internal_has_epsestrackforce() const;
  public:
  void clear_epsestrackforce();
  double epsestrackforce() const;
  void set_epsestrackforce(double value);
  private:
  double _internal_epsestrackforce() const;
  void _internal_set_epsestrackforce(double value);
  public:

  // optional .apollo.canbus.Epsstatus02d6.EpshandsoffdetnconfidenceType epshandsoffdetnconfidence = 4;
  bool has_epshandsoffdetnconfidence() const;
  private:
  bool _internal_has_epshandsoffdetnconfidence() const;
  public:
  void clear_epshandsoffdetnconfidence();
  ::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType epshandsoffdetnconfidence() const;
  void set_epshandsoffdetnconfidence(::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType value);
  private:
  ::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType _internal_epshandsoffdetnconfidence() const;
  void _internal_set_epshandsoffdetnconfidence(::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType value);
  public:

  // optional int32 eps02msgcntr = 5;
  bool has_eps02msgcntr() const;
  private:
  bool _internal_has_eps02msgcntr() const;
  public:
  void clear_eps02msgcntr();
  ::PROTOBUF_NAMESPACE_ID::int32 eps02msgcntr() const;
  void set_eps02msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eps02msgcntr() const;
  void _internal_set_eps02msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Epsstatus02d6.EpspinionagvalidType epspinionagvalid = 6;
  bool has_epspinionagvalid() const;
  private:
  bool _internal_has_epspinionagvalid() const;
  public:
  void clear_epspinionagvalid();
  ::apollo::canbus::Epsstatus02d6_EpspinionagvalidType epspinionagvalid() const;
  void set_epspinionagvalid(::apollo::canbus::Epsstatus02d6_EpspinionagvalidType value);
  private:
  ::apollo::canbus::Epsstatus02d6_EpspinionagvalidType _internal_epspinionagvalid() const;
  void _internal_set_epspinionagvalid(::apollo::canbus::Epsstatus02d6_EpspinionagvalidType value);
  public:

  // optional .apollo.canbus.Epsstatus02d6.EpsdrvoverridedetnType epsdrvoverridedetn = 7;
  bool has_epsdrvoverridedetn() const;
  private:
  bool _internal_has_epsdrvoverridedetn() const;
  public:
  void clear_epsdrvoverridedetn();
  ::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType epsdrvoverridedetn() const;
  void set_epsdrvoverridedetn(::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType value);
  private:
  ::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType _internal_epsdrvoverridedetn() const;
  void _internal_set_epsdrvoverridedetn(::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType value);
  public:

  // optional double epsmotortq = 9;
  bool has_epsmotortq() const;
  private:
  bool _internal_has_epsmotortq() const;
  public:
  void clear_epsmotortq();
  double epsmotortq() const;
  void set_epsmotortq(double value);
  private:
  double _internal_epsmotortq() const;
  void _internal_set_epsmotortq(double value);
  public:

  // optional int32 eps02crc = 8;
  bool has_eps02crc() const;
  private:
  bool _internal_has_eps02crc() const;
  public:
  void clear_eps02crc();
  ::PROTOBUF_NAMESPACE_ID::int32 eps02crc() const;
  void set_eps02crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eps02crc() const;
  void _internal_set_eps02crc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .apollo.canbus.Epsstatus02d6.EpsmotortqvalidType epsmotortqvalid = 10;
  bool has_epsmotortqvalid() const;
  private:
  bool _internal_has_epsmotortqvalid() const;
  public:
  void clear_epsmotortqvalid();
  ::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType epsmotortqvalid() const;
  void set_epsmotortqvalid(::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType value);
  private:
  ::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType _internal_epsmotortqvalid() const;
  void _internal_set_epsmotortqvalid(::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType value);
  public:

  // optional double epspinionag = 11;
  bool has_epspinionag() const;
  private:
  bool _internal_has_epspinionag() const;
  public:
  void clear_epspinionag();
  double epspinionag() const;
  void set_epspinionag(double value);
  private:
  double _internal_epspinionag() const;
  void _internal_set_epspinionag(double value);
  public:

  // optional .apollo.canbus.Epsstatus02d6.EpsestrackforcevalidType epsestrackforcevalid = 12;
  bool has_epsestrackforcevalid() const;
  private:
  bool _internal_has_epsestrackforcevalid() const;
  public:
  void clear_epsestrackforcevalid();
  ::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType epsestrackforcevalid() const;
  void set_epsestrackforcevalid(::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType value);
  private:
  ::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType _internal_epsestrackforcevalid() const;
  void _internal_set_epsestrackforcevalid(::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.canbus.Epsstatus02d6)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int epstqreqavl_;
  int epspinionangreqavl_;
  double epsestrackforce_;
  int epshandsoffdetnconfidence_;
  ::PROTOBUF_NAMESPACE_ID::int32 eps02msgcntr_;
  int epspinionagvalid_;
  int epsdrvoverridedetn_;
  double epsmotortq_;
  ::PROTOBUF_NAMESPACE_ID::int32 eps02crc_;
  int epsmotortqvalid_;
  double epspinionag_;
  int epsestrackforcevalid_;
  friend struct ::TableStruct_nio_2eproto;
};
// -------------------------------------------------------------------

class Nio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Nio) */ {
 public:
  inline Nio() : Nio(nullptr) {}
  virtual ~Nio();

  Nio(const Nio& from);
  Nio(Nio&& from) noexcept
    : Nio() {
    *this = ::std::move(from);
  }

  inline Nio& operator=(const Nio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nio& operator=(Nio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Nio& default_instance();

  static inline const Nio* internal_default_instance() {
    return reinterpret_cast<const Nio*>(
               &_Nio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Nio& a, Nio& b) {
    a.Swap(&b);
  }
  inline void Swap(Nio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Nio* New() const final {
    return CreateMaybeMessage<Nio>(nullptr);
  }

  Nio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Nio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Nio& from);
  void MergeFrom(const Nio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.canbus.Nio";
  }
  protected:
  explicit Nio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nio_2eproto);
    return ::descriptor_table_nio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvpReq15EFieldNumber = 1,
    kVcusts01218FieldNumber = 2,
    kVcusts0221CFieldNumber = 3,
    kBrkdrvstatus24CFieldNumber = 4,
    kBodystatus24DFieldNumber = 5,
    kDriverstatus24EFieldNumber = 6,
    kVehiclelights2C7FieldNumber = 7,
    kLightReq336FieldNumber = 8,
    kAcmbody4AFieldNumber = 9,
    kWhlspdfront51FieldNumber = 10,
    kWhlspdrear52FieldNumber = 11,
    kBcusts5EFieldNumber = 12,
    kPulsecnt65FieldNumber = 13,
    kAebreq79FieldNumber = 14,
    kScmsts7BFieldNumber = 15,
    kAccreq7FFieldNumber = 16,
    kMotorsts0286FieldNumber = 17,
    kMotorsts018EFieldNumber = 18,
    kEpsReqC6FieldNumber = 19,
    kEpsstatus01D5FieldNumber = 20,
    kEpsstatus02D6FieldNumber = 21,
  };
  // optional .apollo.canbus.Avpreq15e AvpReq15e = 1;
  bool has_avpreq15e() const;
  private:
  bool _internal_has_avpreq15e() const;
  public:
  void clear_avpreq15e();
  const ::apollo::canbus::Avpreq15e& avpreq15e() const;
  ::apollo::canbus::Avpreq15e* release_avpreq15e();
  ::apollo::canbus::Avpreq15e* mutable_avpreq15e();
  void set_allocated_avpreq15e(::apollo::canbus::Avpreq15e* avpreq15e);
  private:
  const ::apollo::canbus::Avpreq15e& _internal_avpreq15e() const;
  ::apollo::canbus::Avpreq15e* _internal_mutable_avpreq15e();
  public:
  void unsafe_arena_set_allocated_avpreq15e(
      ::apollo::canbus::Avpreq15e* avpreq15e);
  ::apollo::canbus::Avpreq15e* unsafe_arena_release_avpreq15e();

  // optional .apollo.canbus.Vcusts01218 Vcusts01218 = 2;
  bool has_vcusts01218() const;
  private:
  bool _internal_has_vcusts01218() const;
  public:
  void clear_vcusts01218();
  const ::apollo::canbus::Vcusts01218& vcusts01218() const;
  ::apollo::canbus::Vcusts01218* release_vcusts01218();
  ::apollo::canbus::Vcusts01218* mutable_vcusts01218();
  void set_allocated_vcusts01218(::apollo::canbus::Vcusts01218* vcusts01218);
  private:
  const ::apollo::canbus::Vcusts01218& _internal_vcusts01218() const;
  ::apollo::canbus::Vcusts01218* _internal_mutable_vcusts01218();
  public:
  void unsafe_arena_set_allocated_vcusts01218(
      ::apollo::canbus::Vcusts01218* vcusts01218);
  ::apollo::canbus::Vcusts01218* unsafe_arena_release_vcusts01218();

  // optional .apollo.canbus.Vcusts0221c Vcusts0221c = 3;
  bool has_vcusts0221c() const;
  private:
  bool _internal_has_vcusts0221c() const;
  public:
  void clear_vcusts0221c();
  const ::apollo::canbus::Vcusts0221c& vcusts0221c() const;
  ::apollo::canbus::Vcusts0221c* release_vcusts0221c();
  ::apollo::canbus::Vcusts0221c* mutable_vcusts0221c();
  void set_allocated_vcusts0221c(::apollo::canbus::Vcusts0221c* vcusts0221c);
  private:
  const ::apollo::canbus::Vcusts0221c& _internal_vcusts0221c() const;
  ::apollo::canbus::Vcusts0221c* _internal_mutable_vcusts0221c();
  public:
  void unsafe_arena_set_allocated_vcusts0221c(
      ::apollo::canbus::Vcusts0221c* vcusts0221c);
  ::apollo::canbus::Vcusts0221c* unsafe_arena_release_vcusts0221c();

  // optional .apollo.canbus.Brkdrvstatus24c Brkdrvstatus24c = 4;
  bool has_brkdrvstatus24c() const;
  private:
  bool _internal_has_brkdrvstatus24c() const;
  public:
  void clear_brkdrvstatus24c();
  const ::apollo::canbus::Brkdrvstatus24c& brkdrvstatus24c() const;
  ::apollo::canbus::Brkdrvstatus24c* release_brkdrvstatus24c();
  ::apollo::canbus::Brkdrvstatus24c* mutable_brkdrvstatus24c();
  void set_allocated_brkdrvstatus24c(::apollo::canbus::Brkdrvstatus24c* brkdrvstatus24c);
  private:
  const ::apollo::canbus::Brkdrvstatus24c& _internal_brkdrvstatus24c() const;
  ::apollo::canbus::Brkdrvstatus24c* _internal_mutable_brkdrvstatus24c();
  public:
  void unsafe_arena_set_allocated_brkdrvstatus24c(
      ::apollo::canbus::Brkdrvstatus24c* brkdrvstatus24c);
  ::apollo::canbus::Brkdrvstatus24c* unsafe_arena_release_brkdrvstatus24c();

  // optional .apollo.canbus.Bodystatus24d Bodystatus24d = 5;
  bool has_bodystatus24d() const;
  private:
  bool _internal_has_bodystatus24d() const;
  public:
  void clear_bodystatus24d();
  const ::apollo::canbus::Bodystatus24d& bodystatus24d() const;
  ::apollo::canbus::Bodystatus24d* release_bodystatus24d();
  ::apollo::canbus::Bodystatus24d* mutable_bodystatus24d();
  void set_allocated_bodystatus24d(::apollo::canbus::Bodystatus24d* bodystatus24d);
  private:
  const ::apollo::canbus::Bodystatus24d& _internal_bodystatus24d() const;
  ::apollo::canbus::Bodystatus24d* _internal_mutable_bodystatus24d();
  public:
  void unsafe_arena_set_allocated_bodystatus24d(
      ::apollo::canbus::Bodystatus24d* bodystatus24d);
  ::apollo::canbus::Bodystatus24d* unsafe_arena_release_bodystatus24d();

  // optional .apollo.canbus.Driverstatus24e Driverstatus24e = 6;
  bool has_driverstatus24e() const;
  private:
  bool _internal_has_driverstatus24e() const;
  public:
  void clear_driverstatus24e();
  const ::apollo::canbus::Driverstatus24e& driverstatus24e() const;
  ::apollo::canbus::Driverstatus24e* release_driverstatus24e();
  ::apollo::canbus::Driverstatus24e* mutable_driverstatus24e();
  void set_allocated_driverstatus24e(::apollo::canbus::Driverstatus24e* driverstatus24e);
  private:
  const ::apollo::canbus::Driverstatus24e& _internal_driverstatus24e() const;
  ::apollo::canbus::Driverstatus24e* _internal_mutable_driverstatus24e();
  public:
  void unsafe_arena_set_allocated_driverstatus24e(
      ::apollo::canbus::Driverstatus24e* driverstatus24e);
  ::apollo::canbus::Driverstatus24e* unsafe_arena_release_driverstatus24e();

  // optional .apollo.canbus.Vehiclelights2c7 Vehiclelights2c7 = 7;
  bool has_vehiclelights2c7() const;
  private:
  bool _internal_has_vehiclelights2c7() const;
  public:
  void clear_vehiclelights2c7();
  const ::apollo::canbus::Vehiclelights2c7& vehiclelights2c7() const;
  ::apollo::canbus::Vehiclelights2c7* release_vehiclelights2c7();
  ::apollo::canbus::Vehiclelights2c7* mutable_vehiclelights2c7();
  void set_allocated_vehiclelights2c7(::apollo::canbus::Vehiclelights2c7* vehiclelights2c7);
  private:
  const ::apollo::canbus::Vehiclelights2c7& _internal_vehiclelights2c7() const;
  ::apollo::canbus::Vehiclelights2c7* _internal_mutable_vehiclelights2c7();
  public:
  void unsafe_arena_set_allocated_vehiclelights2c7(
      ::apollo::canbus::Vehiclelights2c7* vehiclelights2c7);
  ::apollo::canbus::Vehiclelights2c7* unsafe_arena_release_vehiclelights2c7();

  // optional .apollo.canbus.Lightreq336 LightReq336 = 8;
  bool has_lightreq336() const;
  private:
  bool _internal_has_lightreq336() const;
  public:
  void clear_lightreq336();
  const ::apollo::canbus::Lightreq336& lightreq336() const;
  ::apollo::canbus::Lightreq336* release_lightreq336();
  ::apollo::canbus::Lightreq336* mutable_lightreq336();
  void set_allocated_lightreq336(::apollo::canbus::Lightreq336* lightreq336);
  private:
  const ::apollo::canbus::Lightreq336& _internal_lightreq336() const;
  ::apollo::canbus::Lightreq336* _internal_mutable_lightreq336();
  public:
  void unsafe_arena_set_allocated_lightreq336(
      ::apollo::canbus::Lightreq336* lightreq336);
  ::apollo::canbus::Lightreq336* unsafe_arena_release_lightreq336();

  // optional .apollo.canbus.Acmbody4a Acmbody4a = 9;
  bool has_acmbody4a() const;
  private:
  bool _internal_has_acmbody4a() const;
  public:
  void clear_acmbody4a();
  const ::apollo::canbus::Acmbody4a& acmbody4a() const;
  ::apollo::canbus::Acmbody4a* release_acmbody4a();
  ::apollo::canbus::Acmbody4a* mutable_acmbody4a();
  void set_allocated_acmbody4a(::apollo::canbus::Acmbody4a* acmbody4a);
  private:
  const ::apollo::canbus::Acmbody4a& _internal_acmbody4a() const;
  ::apollo::canbus::Acmbody4a* _internal_mutable_acmbody4a();
  public:
  void unsafe_arena_set_allocated_acmbody4a(
      ::apollo::canbus::Acmbody4a* acmbody4a);
  ::apollo::canbus::Acmbody4a* unsafe_arena_release_acmbody4a();

  // optional .apollo.canbus.Whlspdfront51 Whlspdfront51 = 10;
  bool has_whlspdfront51() const;
  private:
  bool _internal_has_whlspdfront51() const;
  public:
  void clear_whlspdfront51();
  const ::apollo::canbus::Whlspdfront51& whlspdfront51() const;
  ::apollo::canbus::Whlspdfront51* release_whlspdfront51();
  ::apollo::canbus::Whlspdfront51* mutable_whlspdfront51();
  void set_allocated_whlspdfront51(::apollo::canbus::Whlspdfront51* whlspdfront51);
  private:
  const ::apollo::canbus::Whlspdfront51& _internal_whlspdfront51() const;
  ::apollo::canbus::Whlspdfront51* _internal_mutable_whlspdfront51();
  public:
  void unsafe_arena_set_allocated_whlspdfront51(
      ::apollo::canbus::Whlspdfront51* whlspdfront51);
  ::apollo::canbus::Whlspdfront51* unsafe_arena_release_whlspdfront51();

  // optional .apollo.canbus.Whlspdrear52 Whlspdrear52 = 11;
  bool has_whlspdrear52() const;
  private:
  bool _internal_has_whlspdrear52() const;
  public:
  void clear_whlspdrear52();
  const ::apollo::canbus::Whlspdrear52& whlspdrear52() const;
  ::apollo::canbus::Whlspdrear52* release_whlspdrear52();
  ::apollo::canbus::Whlspdrear52* mutable_whlspdrear52();
  void set_allocated_whlspdrear52(::apollo::canbus::Whlspdrear52* whlspdrear52);
  private:
  const ::apollo::canbus::Whlspdrear52& _internal_whlspdrear52() const;
  ::apollo::canbus::Whlspdrear52* _internal_mutable_whlspdrear52();
  public:
  void unsafe_arena_set_allocated_whlspdrear52(
      ::apollo::canbus::Whlspdrear52* whlspdrear52);
  ::apollo::canbus::Whlspdrear52* unsafe_arena_release_whlspdrear52();

  // optional .apollo.canbus.Bcusts5e Bcusts5e = 12;
  bool has_bcusts5e() const;
  private:
  bool _internal_has_bcusts5e() const;
  public:
  void clear_bcusts5e();
  const ::apollo::canbus::Bcusts5e& bcusts5e() const;
  ::apollo::canbus::Bcusts5e* release_bcusts5e();
  ::apollo::canbus::Bcusts5e* mutable_bcusts5e();
  void set_allocated_bcusts5e(::apollo::canbus::Bcusts5e* bcusts5e);
  private:
  const ::apollo::canbus::Bcusts5e& _internal_bcusts5e() const;
  ::apollo::canbus::Bcusts5e* _internal_mutable_bcusts5e();
  public:
  void unsafe_arena_set_allocated_bcusts5e(
      ::apollo::canbus::Bcusts5e* bcusts5e);
  ::apollo::canbus::Bcusts5e* unsafe_arena_release_bcusts5e();

  // optional .apollo.canbus.Pulsecnt65 Pulsecnt65 = 13;
  bool has_pulsecnt65() const;
  private:
  bool _internal_has_pulsecnt65() const;
  public:
  void clear_pulsecnt65();
  const ::apollo::canbus::Pulsecnt65& pulsecnt65() const;
  ::apollo::canbus::Pulsecnt65* release_pulsecnt65();
  ::apollo::canbus::Pulsecnt65* mutable_pulsecnt65();
  void set_allocated_pulsecnt65(::apollo::canbus::Pulsecnt65* pulsecnt65);
  private:
  const ::apollo::canbus::Pulsecnt65& _internal_pulsecnt65() const;
  ::apollo::canbus::Pulsecnt65* _internal_mutable_pulsecnt65();
  public:
  void unsafe_arena_set_allocated_pulsecnt65(
      ::apollo::canbus::Pulsecnt65* pulsecnt65);
  ::apollo::canbus::Pulsecnt65* unsafe_arena_release_pulsecnt65();

  // optional .apollo.canbus.Aebreq79 Aebreq79 = 14;
  bool has_aebreq79() const;
  private:
  bool _internal_has_aebreq79() const;
  public:
  void clear_aebreq79();
  const ::apollo::canbus::Aebreq79& aebreq79() const;
  ::apollo::canbus::Aebreq79* release_aebreq79();
  ::apollo::canbus::Aebreq79* mutable_aebreq79();
  void set_allocated_aebreq79(::apollo::canbus::Aebreq79* aebreq79);
  private:
  const ::apollo::canbus::Aebreq79& _internal_aebreq79() const;
  ::apollo::canbus::Aebreq79* _internal_mutable_aebreq79();
  public:
  void unsafe_arena_set_allocated_aebreq79(
      ::apollo::canbus::Aebreq79* aebreq79);
  ::apollo::canbus::Aebreq79* unsafe_arena_release_aebreq79();

  // optional .apollo.canbus.Scmsts7b Scmsts7b = 15;
  bool has_scmsts7b() const;
  private:
  bool _internal_has_scmsts7b() const;
  public:
  void clear_scmsts7b();
  const ::apollo::canbus::Scmsts7b& scmsts7b() const;
  ::apollo::canbus::Scmsts7b* release_scmsts7b();
  ::apollo::canbus::Scmsts7b* mutable_scmsts7b();
  void set_allocated_scmsts7b(::apollo::canbus::Scmsts7b* scmsts7b);
  private:
  const ::apollo::canbus::Scmsts7b& _internal_scmsts7b() const;
  ::apollo::canbus::Scmsts7b* _internal_mutable_scmsts7b();
  public:
  void unsafe_arena_set_allocated_scmsts7b(
      ::apollo::canbus::Scmsts7b* scmsts7b);
  ::apollo::canbus::Scmsts7b* unsafe_arena_release_scmsts7b();

  // optional .apollo.canbus.Accreq7f Accreq7f = 16;
  bool has_accreq7f() const;
  private:
  bool _internal_has_accreq7f() const;
  public:
  void clear_accreq7f();
  const ::apollo::canbus::Accreq7f& accreq7f() const;
  ::apollo::canbus::Accreq7f* release_accreq7f();
  ::apollo::canbus::Accreq7f* mutable_accreq7f();
  void set_allocated_accreq7f(::apollo::canbus::Accreq7f* accreq7f);
  private:
  const ::apollo::canbus::Accreq7f& _internal_accreq7f() const;
  ::apollo::canbus::Accreq7f* _internal_mutable_accreq7f();
  public:
  void unsafe_arena_set_allocated_accreq7f(
      ::apollo::canbus::Accreq7f* accreq7f);
  ::apollo::canbus::Accreq7f* unsafe_arena_release_accreq7f();

  // optional .apollo.canbus.Motorsts0286 Motorsts0286 = 17;
  bool has_motorsts0286() const;
  private:
  bool _internal_has_motorsts0286() const;
  public:
  void clear_motorsts0286();
  const ::apollo::canbus::Motorsts0286& motorsts0286() const;
  ::apollo::canbus::Motorsts0286* release_motorsts0286();
  ::apollo::canbus::Motorsts0286* mutable_motorsts0286();
  void set_allocated_motorsts0286(::apollo::canbus::Motorsts0286* motorsts0286);
  private:
  const ::apollo::canbus::Motorsts0286& _internal_motorsts0286() const;
  ::apollo::canbus::Motorsts0286* _internal_mutable_motorsts0286();
  public:
  void unsafe_arena_set_allocated_motorsts0286(
      ::apollo::canbus::Motorsts0286* motorsts0286);
  ::apollo::canbus::Motorsts0286* unsafe_arena_release_motorsts0286();

  // optional .apollo.canbus.Motorsts018e Motorsts018e = 18;
  bool has_motorsts018e() const;
  private:
  bool _internal_has_motorsts018e() const;
  public:
  void clear_motorsts018e();
  const ::apollo::canbus::Motorsts018e& motorsts018e() const;
  ::apollo::canbus::Motorsts018e* release_motorsts018e();
  ::apollo::canbus::Motorsts018e* mutable_motorsts018e();
  void set_allocated_motorsts018e(::apollo::canbus::Motorsts018e* motorsts018e);
  private:
  const ::apollo::canbus::Motorsts018e& _internal_motorsts018e() const;
  ::apollo::canbus::Motorsts018e* _internal_mutable_motorsts018e();
  public:
  void unsafe_arena_set_allocated_motorsts018e(
      ::apollo::canbus::Motorsts018e* motorsts018e);
  ::apollo::canbus::Motorsts018e* unsafe_arena_release_motorsts018e();

  // optional .apollo.canbus.Epsreqc6 EpsReqC6 = 19;
  bool has_epsreqc6() const;
  private:
  bool _internal_has_epsreqc6() const;
  public:
  void clear_epsreqc6();
  const ::apollo::canbus::Epsreqc6& epsreqc6() const;
  ::apollo::canbus::Epsreqc6* release_epsreqc6();
  ::apollo::canbus::Epsreqc6* mutable_epsreqc6();
  void set_allocated_epsreqc6(::apollo::canbus::Epsreqc6* epsreqc6);
  private:
  const ::apollo::canbus::Epsreqc6& _internal_epsreqc6() const;
  ::apollo::canbus::Epsreqc6* _internal_mutable_epsreqc6();
  public:
  void unsafe_arena_set_allocated_epsreqc6(
      ::apollo::canbus::Epsreqc6* epsreqc6);
  ::apollo::canbus::Epsreqc6* unsafe_arena_release_epsreqc6();

  // optional .apollo.canbus.Epsstatus01d5 Epsstatus01D5 = 20;
  bool has_epsstatus01d5() const;
  private:
  bool _internal_has_epsstatus01d5() const;
  public:
  void clear_epsstatus01d5();
  const ::apollo::canbus::Epsstatus01d5& epsstatus01d5() const;
  ::apollo::canbus::Epsstatus01d5* release_epsstatus01d5();
  ::apollo::canbus::Epsstatus01d5* mutable_epsstatus01d5();
  void set_allocated_epsstatus01d5(::apollo::canbus::Epsstatus01d5* epsstatus01d5);
  private:
  const ::apollo::canbus::Epsstatus01d5& _internal_epsstatus01d5() const;
  ::apollo::canbus::Epsstatus01d5* _internal_mutable_epsstatus01d5();
  public:
  void unsafe_arena_set_allocated_epsstatus01d5(
      ::apollo::canbus::Epsstatus01d5* epsstatus01d5);
  ::apollo::canbus::Epsstatus01d5* unsafe_arena_release_epsstatus01d5();

  // optional .apollo.canbus.Epsstatus02d6 Epsstatus02D6 = 21;
  bool has_epsstatus02d6() const;
  private:
  bool _internal_has_epsstatus02d6() const;
  public:
  void clear_epsstatus02d6();
  const ::apollo::canbus::Epsstatus02d6& epsstatus02d6() const;
  ::apollo::canbus::Epsstatus02d6* release_epsstatus02d6();
  ::apollo::canbus::Epsstatus02d6* mutable_epsstatus02d6();
  void set_allocated_epsstatus02d6(::apollo::canbus::Epsstatus02d6* epsstatus02d6);
  private:
  const ::apollo::canbus::Epsstatus02d6& _internal_epsstatus02d6() const;
  ::apollo::canbus::Epsstatus02d6* _internal_mutable_epsstatus02d6();
  public:
  void unsafe_arena_set_allocated_epsstatus02d6(
      ::apollo::canbus::Epsstatus02d6* epsstatus02d6);
  ::apollo::canbus::Epsstatus02d6* unsafe_arena_release_epsstatus02d6();

  // @@protoc_insertion_point(class_scope:apollo.canbus.Nio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::canbus::Avpreq15e* avpreq15e_;
  ::apollo::canbus::Vcusts01218* vcusts01218_;
  ::apollo::canbus::Vcusts0221c* vcusts0221c_;
  ::apollo::canbus::Brkdrvstatus24c* brkdrvstatus24c_;
  ::apollo::canbus::Bodystatus24d* bodystatus24d_;
  ::apollo::canbus::Driverstatus24e* driverstatus24e_;
  ::apollo::canbus::Vehiclelights2c7* vehiclelights2c7_;
  ::apollo::canbus::Lightreq336* lightreq336_;
  ::apollo::canbus::Acmbody4a* acmbody4a_;
  ::apollo::canbus::Whlspdfront51* whlspdfront51_;
  ::apollo::canbus::Whlspdrear52* whlspdrear52_;
  ::apollo::canbus::Bcusts5e* bcusts5e_;
  ::apollo::canbus::Pulsecnt65* pulsecnt65_;
  ::apollo::canbus::Aebreq79* aebreq79_;
  ::apollo::canbus::Scmsts7b* scmsts7b_;
  ::apollo::canbus::Accreq7f* accreq7f_;
  ::apollo::canbus::Motorsts0286* motorsts0286_;
  ::apollo::canbus::Motorsts018e* motorsts018e_;
  ::apollo::canbus::Epsreqc6* epsreqc6_;
  ::apollo::canbus::Epsstatus01d5* epsstatus01d5_;
  ::apollo::canbus::Epsstatus02d6* epsstatus02d6_;
  friend struct ::TableStruct_nio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Avpreq15e

// optional .apollo.canbus.Avpreq15e.AvpapaparkmodType avpapaparkmod = 1;
inline bool Avpreq15e::_internal_has_avpapaparkmod() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpapaparkmod() const {
  return _internal_has_avpapaparkmod();
}
inline void Avpreq15e::clear_avpapaparkmod() {
  avpapaparkmod_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Avpreq15e_AvpapaparkmodType Avpreq15e::_internal_avpapaparkmod() const {
  return static_cast< ::apollo::canbus::Avpreq15e_AvpapaparkmodType >(avpapaparkmod_);
}
inline ::apollo::canbus::Avpreq15e_AvpapaparkmodType Avpreq15e::avpapaparkmod() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpapaparkmod)
  return _internal_avpapaparkmod();
}
inline void Avpreq15e::_internal_set_avpapaparkmod(::apollo::canbus::Avpreq15e_AvpapaparkmodType value) {
  assert(::apollo::canbus::Avpreq15e_AvpapaparkmodType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  avpapaparkmod_ = value;
}
inline void Avpreq15e::set_avpapaparkmod(::apollo::canbus::Avpreq15e_AvpapaparkmodType value) {
  _internal_set_avpapaparkmod(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpapaparkmod)
}

// optional .apollo.canbus.Avpreq15e.AvpnbsstsType avpnbssts = 2;
inline bool Avpreq15e::_internal_has_avpnbssts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpnbssts() const {
  return _internal_has_avpnbssts();
}
inline void Avpreq15e::clear_avpnbssts() {
  avpnbssts_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Avpreq15e_AvpnbsstsType Avpreq15e::_internal_avpnbssts() const {
  return static_cast< ::apollo::canbus::Avpreq15e_AvpnbsstsType >(avpnbssts_);
}
inline ::apollo::canbus::Avpreq15e_AvpnbsstsType Avpreq15e::avpnbssts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpnbssts)
  return _internal_avpnbssts();
}
inline void Avpreq15e::_internal_set_avpnbssts(::apollo::canbus::Avpreq15e_AvpnbsstsType value) {
  assert(::apollo::canbus::Avpreq15e_AvpnbsstsType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  avpnbssts_ = value;
}
inline void Avpreq15e::set_avpnbssts(::apollo::canbus::Avpreq15e_AvpnbsstsType value) {
  _internal_set_avpnbssts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpnbssts)
}

// optional .apollo.canbus.Avpreq15e.AvpadcvcunbsstsType avpadcvcunbssts = 3;
inline bool Avpreq15e::_internal_has_avpadcvcunbssts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpadcvcunbssts() const {
  return _internal_has_avpadcvcunbssts();
}
inline void Avpreq15e::clear_avpadcvcunbssts() {
  avpadcvcunbssts_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType Avpreq15e::_internal_avpadcvcunbssts() const {
  return static_cast< ::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType >(avpadcvcunbssts_);
}
inline ::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType Avpreq15e::avpadcvcunbssts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpadcvcunbssts)
  return _internal_avpadcvcunbssts();
}
inline void Avpreq15e::_internal_set_avpadcvcunbssts(::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType value) {
  assert(::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  avpadcvcunbssts_ = value;
}
inline void Avpreq15e::set_avpadcvcunbssts(::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType value) {
  _internal_set_avpadcvcunbssts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpadcvcunbssts)
}

// optional .apollo.canbus.Avpreq15e.AvpapastsType avpapasts = 4;
inline bool Avpreq15e::_internal_has_avpapasts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpapasts() const {
  return _internal_has_avpapasts();
}
inline void Avpreq15e::clear_avpapasts() {
  avpapasts_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Avpreq15e_AvpapastsType Avpreq15e::_internal_avpapasts() const {
  return static_cast< ::apollo::canbus::Avpreq15e_AvpapastsType >(avpapasts_);
}
inline ::apollo::canbus::Avpreq15e_AvpapastsType Avpreq15e::avpapasts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpapasts)
  return _internal_avpapasts();
}
inline void Avpreq15e::_internal_set_avpapasts(::apollo::canbus::Avpreq15e_AvpapastsType value) {
  assert(::apollo::canbus::Avpreq15e_AvpapastsType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  avpapasts_ = value;
}
inline void Avpreq15e::set_avpapasts(::apollo::canbus::Avpreq15e_AvpapastsType value) {
  _internal_set_avpapasts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpapasts)
}

// optional .apollo.canbus.Avpreq15e.AvpbrkmodstsType avpbrkmodsts = 5;
inline bool Avpreq15e::_internal_has_avpbrkmodsts() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpbrkmodsts() const {
  return _internal_has_avpbrkmodsts();
}
inline void Avpreq15e::clear_avpbrkmodsts() {
  avpbrkmodsts_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Avpreq15e_AvpbrkmodstsType Avpreq15e::_internal_avpbrkmodsts() const {
  return static_cast< ::apollo::canbus::Avpreq15e_AvpbrkmodstsType >(avpbrkmodsts_);
}
inline ::apollo::canbus::Avpreq15e_AvpbrkmodstsType Avpreq15e::avpbrkmodsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpbrkmodsts)
  return _internal_avpbrkmodsts();
}
inline void Avpreq15e::_internal_set_avpbrkmodsts(::apollo::canbus::Avpreq15e_AvpbrkmodstsType value) {
  assert(::apollo::canbus::Avpreq15e_AvpbrkmodstsType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  avpbrkmodsts_ = value;
}
inline void Avpreq15e::set_avpbrkmodsts(::apollo::canbus::Avpreq15e_AvpbrkmodstsType value) {
  _internal_set_avpbrkmodsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpbrkmodsts)
}

// optional double avpspdlmt = 6;
inline bool Avpreq15e::_internal_has_avpspdlmt() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpspdlmt() const {
  return _internal_has_avpspdlmt();
}
inline void Avpreq15e::clear_avpspdlmt() {
  avpspdlmt_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Avpreq15e::_internal_avpspdlmt() const {
  return avpspdlmt_;
}
inline double Avpreq15e::avpspdlmt() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpspdlmt)
  return _internal_avpspdlmt();
}
inline void Avpreq15e::_internal_set_avpspdlmt(double value) {
  _has_bits_[0] |= 0x00000010u;
  avpspdlmt_ = value;
}
inline void Avpreq15e::set_avpspdlmt(double value) {
  _internal_set_avpspdlmt(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpspdlmt)
}

// optional bool avpgearreqactv = 7;
inline bool Avpreq15e::_internal_has_avpgearreqactv() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpgearreqactv() const {
  return _internal_has_avpgearreqactv();
}
inline void Avpreq15e::clear_avpgearreqactv() {
  avpgearreqactv_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Avpreq15e::_internal_avpgearreqactv() const {
  return avpgearreqactv_;
}
inline bool Avpreq15e::avpgearreqactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpgearreqactv)
  return _internal_avpgearreqactv();
}
inline void Avpreq15e::_internal_set_avpgearreqactv(bool value) {
  _has_bits_[0] |= 0x00000040u;
  avpgearreqactv_ = value;
}
inline void Avpreq15e::set_avpgearreqactv(bool value) {
  _internal_set_avpgearreqactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpgearreqactv)
}

// optional int32 avpmsgcntr = 8;
inline bool Avpreq15e::_internal_has_avpmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpmsgcntr() const {
  return _internal_has_avpmsgcntr();
}
inline void Avpreq15e::clear_avpmsgcntr() {
  avpmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Avpreq15e::_internal_avpmsgcntr() const {
  return avpmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Avpreq15e::avpmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpmsgcntr)
  return _internal_avpmsgcntr();
}
inline void Avpreq15e::_internal_set_avpmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  avpmsgcntr_ = value;
}
inline void Avpreq15e::set_avpmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avpmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpmsgcntr)
}

// optional int32 avpcrc = 9;
inline bool Avpreq15e::_internal_has_avpcrc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpcrc() const {
  return _internal_has_avpcrc();
}
inline void Avpreq15e::clear_avpcrc() {
  avpcrc_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Avpreq15e::_internal_avpcrc() const {
  return avpcrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Avpreq15e::avpcrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpcrc)
  return _internal_avpcrc();
}
inline void Avpreq15e::_internal_set_avpcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  avpcrc_ = value;
}
inline void Avpreq15e::set_avpcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avpcrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpcrc)
}

// optional int32 avpdstreq = 10;
inline bool Avpreq15e::_internal_has_avpdstreq() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpdstreq() const {
  return _internal_has_avpdstreq();
}
inline void Avpreq15e::clear_avpdstreq() {
  avpdstreq_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Avpreq15e::_internal_avpdstreq() const {
  return avpdstreq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Avpreq15e::avpdstreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpdstreq)
  return _internal_avpdstreq();
}
inline void Avpreq15e::_internal_set_avpdstreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  avpdstreq_ = value;
}
inline void Avpreq15e::set_avpdstreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_avpdstreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpdstreq)
}

// optional .apollo.canbus.Avpreq15e.AvptargearreqType avptargearreq = 11;
inline bool Avpreq15e::_internal_has_avptargearreq() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Avpreq15e::has_avptargearreq() const {
  return _internal_has_avptargearreq();
}
inline void Avpreq15e::clear_avptargearreq() {
  avptargearreq_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Avpreq15e_AvptargearreqType Avpreq15e::_internal_avptargearreq() const {
  return static_cast< ::apollo::canbus::Avpreq15e_AvptargearreqType >(avptargearreq_);
}
inline ::apollo::canbus::Avpreq15e_AvptargearreqType Avpreq15e::avptargearreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avptargearreq)
  return _internal_avptargearreq();
}
inline void Avpreq15e::_internal_set_avptargearreq(::apollo::canbus::Avpreq15e_AvptargearreqType value) {
  assert(::apollo::canbus::Avpreq15e_AvptargearreqType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  avptargearreq_ = value;
}
inline void Avpreq15e::set_avptargearreq(::apollo::canbus::Avpreq15e_AvptargearreqType value) {
  _internal_set_avptargearreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avptargearreq)
}

// optional .apollo.canbus.Avpreq15e.AvpcrtlmodeType avpcrtlmode = 12;
inline bool Avpreq15e::_internal_has_avpcrtlmode() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Avpreq15e::has_avpcrtlmode() const {
  return _internal_has_avpcrtlmode();
}
inline void Avpreq15e::clear_avpcrtlmode() {
  avpcrtlmode_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::canbus::Avpreq15e_AvpcrtlmodeType Avpreq15e::_internal_avpcrtlmode() const {
  return static_cast< ::apollo::canbus::Avpreq15e_AvpcrtlmodeType >(avpcrtlmode_);
}
inline ::apollo::canbus::Avpreq15e_AvpcrtlmodeType Avpreq15e::avpcrtlmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Avpreq15e.avpcrtlmode)
  return _internal_avpcrtlmode();
}
inline void Avpreq15e::_internal_set_avpcrtlmode(::apollo::canbus::Avpreq15e_AvpcrtlmodeType value) {
  assert(::apollo::canbus::Avpreq15e_AvpcrtlmodeType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  avpcrtlmode_ = value;
}
inline void Avpreq15e::set_avpcrtlmode(::apollo::canbus::Avpreq15e_AvpcrtlmodeType value) {
  _internal_set_avpcrtlmode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Avpreq15e.avpcrtlmode)
}

// -------------------------------------------------------------------

// Vcusts01218

// optional .apollo.canbus.Vcusts01218.VcunbsstsType vcunbssts = 1;
inline bool Vcusts01218::_internal_has_vcunbssts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcusts01218::has_vcunbssts() const {
  return _internal_has_vcunbssts();
}
inline void Vcusts01218::clear_vcunbssts() {
  vcunbssts_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Vcusts01218_VcunbsstsType Vcusts01218::_internal_vcunbssts() const {
  return static_cast< ::apollo::canbus::Vcusts01218_VcunbsstsType >(vcunbssts_);
}
inline ::apollo::canbus::Vcusts01218_VcunbsstsType Vcusts01218::vcunbssts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.vcunbssts)
  return _internal_vcunbssts();
}
inline void Vcusts01218::_internal_set_vcunbssts(::apollo::canbus::Vcusts01218_VcunbsstsType value) {
  assert(::apollo::canbus::Vcusts01218_VcunbsstsType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  vcunbssts_ = value;
}
inline void Vcusts01218::set_vcunbssts(::apollo::canbus::Vcusts01218_VcunbsstsType value) {
  _internal_set_vcunbssts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.vcunbssts)
}

// optional int32 vcuvlcsts = 2;
inline bool Vcusts01218::_internal_has_vcuvlcsts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcusts01218::has_vcuvlcsts() const {
  return _internal_has_vcuvlcsts();
}
inline void Vcusts01218::clear_vcuvlcsts() {
  vcuvlcsts_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::_internal_vcuvlcsts() const {
  return vcuvlcsts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::vcuvlcsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.vcuvlcsts)
  return _internal_vcuvlcsts();
}
inline void Vcusts01218::_internal_set_vcuvlcsts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  vcuvlcsts_ = value;
}
inline void Vcusts01218::set_vcuvlcsts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vcuvlcsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.vcuvlcsts)
}

// optional int32 vcullcsts = 3;
inline bool Vcusts01218::_internal_has_vcullcsts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcusts01218::has_vcullcsts() const {
  return _internal_has_vcullcsts();
}
inline void Vcusts01218::clear_vcullcsts() {
  vcullcsts_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::_internal_vcullcsts() const {
  return vcullcsts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::vcullcsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.vcullcsts)
  return _internal_vcullcsts();
}
inline void Vcusts01218::_internal_set_vcullcsts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  vcullcsts_ = value;
}
inline void Vcusts01218::set_vcullcsts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vcullcsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.vcullcsts)
}

// optional .apollo.canbus.Vcusts01218.TaggearvalidType taggearvalid = 4;
inline bool Vcusts01218::_internal_has_taggearvalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcusts01218::has_taggearvalid() const {
  return _internal_has_taggearvalid();
}
inline void Vcusts01218::clear_taggearvalid() {
  taggearvalid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Vcusts01218_TaggearvalidType Vcusts01218::_internal_taggearvalid() const {
  return static_cast< ::apollo::canbus::Vcusts01218_TaggearvalidType >(taggearvalid_);
}
inline ::apollo::canbus::Vcusts01218_TaggearvalidType Vcusts01218::taggearvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.taggearvalid)
  return _internal_taggearvalid();
}
inline void Vcusts01218::_internal_set_taggearvalid(::apollo::canbus::Vcusts01218_TaggearvalidType value) {
  assert(::apollo::canbus::Vcusts01218_TaggearvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  taggearvalid_ = value;
}
inline void Vcusts01218::set_taggearvalid(::apollo::canbus::Vcusts01218_TaggearvalidType value) {
  _internal_set_taggearvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.taggearvalid)
}

// optional int32 taggear = 5;
inline bool Vcusts01218::_internal_has_taggear() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcusts01218::has_taggear() const {
  return _internal_has_taggear();
}
inline void Vcusts01218::clear_taggear() {
  taggear_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::_internal_taggear() const {
  return taggear_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::taggear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.taggear)
  return _internal_taggear();
}
inline void Vcusts01218::_internal_set_taggear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  taggear_ = value;
}
inline void Vcusts01218::set_taggear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taggear(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.taggear)
}

// optional .apollo.canbus.Vcusts01218.ActualgearvalidType actualgearvalid = 6;
inline bool Vcusts01218::_internal_has_actualgearvalid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcusts01218::has_actualgearvalid() const {
  return _internal_has_actualgearvalid();
}
inline void Vcusts01218::clear_actualgearvalid() {
  actualgearvalid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Vcusts01218_ActualgearvalidType Vcusts01218::_internal_actualgearvalid() const {
  return static_cast< ::apollo::canbus::Vcusts01218_ActualgearvalidType >(actualgearvalid_);
}
inline ::apollo::canbus::Vcusts01218_ActualgearvalidType Vcusts01218::actualgearvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.actualgearvalid)
  return _internal_actualgearvalid();
}
inline void Vcusts01218::_internal_set_actualgearvalid(::apollo::canbus::Vcusts01218_ActualgearvalidType value) {
  assert(::apollo::canbus::Vcusts01218_ActualgearvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  actualgearvalid_ = value;
}
inline void Vcusts01218::set_actualgearvalid(::apollo::canbus::Vcusts01218_ActualgearvalidType value) {
  _internal_set_actualgearvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.actualgearvalid)
}

// optional .apollo.canbus.Vcusts01218.ActualgearType actualgear = 7;
inline bool Vcusts01218::_internal_has_actualgear() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vcusts01218::has_actualgear() const {
  return _internal_has_actualgear();
}
inline void Vcusts01218::clear_actualgear() {
  actualgear_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Vcusts01218_ActualgearType Vcusts01218::_internal_actualgear() const {
  return static_cast< ::apollo::canbus::Vcusts01218_ActualgearType >(actualgear_);
}
inline ::apollo::canbus::Vcusts01218_ActualgearType Vcusts01218::actualgear() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.actualgear)
  return _internal_actualgear();
}
inline void Vcusts01218::_internal_set_actualgear(::apollo::canbus::Vcusts01218_ActualgearType value) {
  assert(::apollo::canbus::Vcusts01218_ActualgearType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  actualgear_ = value;
}
inline void Vcusts01218::set_actualgear(::apollo::canbus::Vcusts01218_ActualgearType value) {
  _internal_set_actualgear(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.actualgear)
}

// optional int32 vcu17msgcntr = 8;
inline bool Vcusts01218::_internal_has_vcu17msgcntr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Vcusts01218::has_vcu17msgcntr() const {
  return _internal_has_vcu17msgcntr();
}
inline void Vcusts01218::clear_vcu17msgcntr() {
  vcu17msgcntr_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::_internal_vcu17msgcntr() const {
  return vcu17msgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::vcu17msgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.vcu17msgcntr)
  return _internal_vcu17msgcntr();
}
inline void Vcusts01218::_internal_set_vcu17msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  vcu17msgcntr_ = value;
}
inline void Vcusts01218::set_vcu17msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vcu17msgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.vcu17msgcntr)
}

// optional int32 vcu17crc = 9;
inline bool Vcusts01218::_internal_has_vcu17crc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Vcusts01218::has_vcu17crc() const {
  return _internal_has_vcu17crc();
}
inline void Vcusts01218::clear_vcu17crc() {
  vcu17crc_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::_internal_vcu17crc() const {
  return vcu17crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts01218::vcu17crc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.vcu17crc)
  return _internal_vcu17crc();
}
inline void Vcusts01218::_internal_set_vcu17crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  vcu17crc_ = value;
}
inline void Vcusts01218::set_vcu17crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vcu17crc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.vcu17crc)
}

// optional .apollo.canbus.Vcusts01218.VcuepfailType vcuepfail = 10;
inline bool Vcusts01218::_internal_has_vcuepfail() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Vcusts01218::has_vcuepfail() const {
  return _internal_has_vcuepfail();
}
inline void Vcusts01218::clear_vcuepfail() {
  vcuepfail_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Vcusts01218_VcuepfailType Vcusts01218::_internal_vcuepfail() const {
  return static_cast< ::apollo::canbus::Vcusts01218_VcuepfailType >(vcuepfail_);
}
inline ::apollo::canbus::Vcusts01218_VcuepfailType Vcusts01218::vcuepfail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.vcuepfail)
  return _internal_vcuepfail();
}
inline void Vcusts01218::_internal_set_vcuepfail(::apollo::canbus::Vcusts01218_VcuepfailType value) {
  assert(::apollo::canbus::Vcusts01218_VcuepfailType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  vcuepfail_ = value;
}
inline void Vcusts01218::set_vcuepfail(::apollo::canbus::Vcusts01218_VcuepfailType value) {
  _internal_set_vcuepfail(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.vcuepfail)
}

// optional .apollo.canbus.Vcusts01218.VcumodindType vcumodind = 11;
inline bool Vcusts01218::_internal_has_vcumodind() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Vcusts01218::has_vcumodind() const {
  return _internal_has_vcumodind();
}
inline void Vcusts01218::clear_vcumodind() {
  vcumodind_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Vcusts01218_VcumodindType Vcusts01218::_internal_vcumodind() const {
  return static_cast< ::apollo::canbus::Vcusts01218_VcumodindType >(vcumodind_);
}
inline ::apollo::canbus::Vcusts01218_VcumodindType Vcusts01218::vcumodind() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts01218.vcumodind)
  return _internal_vcumodind();
}
inline void Vcusts01218::_internal_set_vcumodind(::apollo::canbus::Vcusts01218_VcumodindType value) {
  assert(::apollo::canbus::Vcusts01218_VcumodindType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  vcumodind_ = value;
}
inline void Vcusts01218::set_vcumodind(::apollo::canbus::Vcusts01218_VcumodindType value) {
  _internal_set_vcumodind(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts01218.vcumodind)
}

// -------------------------------------------------------------------

// Vcusts0221c

// optional .apollo.canbus.Vcusts0221c.AccpedelftravelvalidType accpedelftravelvalid = 1;
inline bool Vcusts0221c::_internal_has_accpedelftravelvalid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vcusts0221c::has_accpedelftravelvalid() const {
  return _internal_has_accpedelftravelvalid();
}
inline void Vcusts0221c::clear_accpedelftravelvalid() {
  accpedelftravelvalid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType Vcusts0221c::_internal_accpedelftravelvalid() const {
  return static_cast< ::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType >(accpedelftravelvalid_);
}
inline ::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType Vcusts0221c::accpedelftravelvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts0221c.accpedelftravelvalid)
  return _internal_accpedelftravelvalid();
}
inline void Vcusts0221c::_internal_set_accpedelftravelvalid(::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType value) {
  assert(::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  accpedelftravelvalid_ = value;
}
inline void Vcusts0221c::set_accpedelftravelvalid(::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType value) {
  _internal_set_accpedelftravelvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts0221c.accpedelftravelvalid)
}

// optional double accpedelftravel = 2;
inline bool Vcusts0221c::_internal_has_accpedelftravel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vcusts0221c::has_accpedelftravel() const {
  return _internal_has_accpedelftravel();
}
inline void Vcusts0221c::clear_accpedelftravel() {
  accpedelftravel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Vcusts0221c::_internal_accpedelftravel() const {
  return accpedelftravel_;
}
inline double Vcusts0221c::accpedelftravel() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts0221c.accpedelftravel)
  return _internal_accpedelftravel();
}
inline void Vcusts0221c::_internal_set_accpedelftravel(double value) {
  _has_bits_[0] |= 0x00000001u;
  accpedelftravel_ = value;
}
inline void Vcusts0221c::set_accpedelftravel(double value) {
  _internal_set_accpedelftravel(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts0221c.accpedelftravel)
}

// optional .apollo.canbus.Vcusts0221c.AccpedacttravelvalidType accpedacttravelvalid = 3;
inline bool Vcusts0221c::_internal_has_accpedacttravelvalid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vcusts0221c::has_accpedacttravelvalid() const {
  return _internal_has_accpedacttravelvalid();
}
inline void Vcusts0221c::clear_accpedacttravelvalid() {
  accpedacttravelvalid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType Vcusts0221c::_internal_accpedacttravelvalid() const {
  return static_cast< ::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType >(accpedacttravelvalid_);
}
inline ::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType Vcusts0221c::accpedacttravelvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts0221c.accpedacttravelvalid)
  return _internal_accpedacttravelvalid();
}
inline void Vcusts0221c::_internal_set_accpedacttravelvalid(::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType value) {
  assert(::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  accpedacttravelvalid_ = value;
}
inline void Vcusts0221c::set_accpedacttravelvalid(::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType value) {
  _internal_set_accpedacttravelvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts0221c.accpedacttravelvalid)
}

// optional double accpedacttravel = 4;
inline bool Vcusts0221c::_internal_has_accpedacttravel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vcusts0221c::has_accpedacttravel() const {
  return _internal_has_accpedacttravel();
}
inline void Vcusts0221c::clear_accpedacttravel() {
  accpedacttravel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Vcusts0221c::_internal_accpedacttravel() const {
  return accpedacttravel_;
}
inline double Vcusts0221c::accpedacttravel() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts0221c.accpedacttravel)
  return _internal_accpedacttravel();
}
inline void Vcusts0221c::_internal_set_accpedacttravel(double value) {
  _has_bits_[0] |= 0x00000008u;
  accpedacttravel_ = value;
}
inline void Vcusts0221c::set_accpedacttravel(double value) {
  _internal_set_accpedacttravel(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts0221c.accpedacttravel)
}

// optional int32 vcu4msgcntr = 5;
inline bool Vcusts0221c::_internal_has_vcu4msgcntr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vcusts0221c::has_vcu4msgcntr() const {
  return _internal_has_vcu4msgcntr();
}
inline void Vcusts0221c::clear_vcu4msgcntr() {
  vcu4msgcntr_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts0221c::_internal_vcu4msgcntr() const {
  return vcu4msgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts0221c::vcu4msgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts0221c.vcu4msgcntr)
  return _internal_vcu4msgcntr();
}
inline void Vcusts0221c::_internal_set_vcu4msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  vcu4msgcntr_ = value;
}
inline void Vcusts0221c::set_vcu4msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vcu4msgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts0221c.vcu4msgcntr)
}

// optional int32 vcu4crc = 6;
inline bool Vcusts0221c::_internal_has_vcu4crc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vcusts0221c::has_vcu4crc() const {
  return _internal_has_vcu4crc();
}
inline void Vcusts0221c::clear_vcu4crc() {
  vcu4crc_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts0221c::_internal_vcu4crc() const {
  return vcu4crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vcusts0221c::vcu4crc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vcusts0221c.vcu4crc)
  return _internal_vcu4crc();
}
inline void Vcusts0221c::_internal_set_vcu4crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  vcu4crc_ = value;
}
inline void Vcusts0221c::set_vcu4crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vcu4crc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vcusts0221c.vcu4crc)
}

// -------------------------------------------------------------------

// Brkdrvstatus24c

// optional int32 brkmsgcntr = 1;
inline bool Brkdrvstatus24c::_internal_has_brkmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_brkmsgcntr() const {
  return _internal_has_brkmsgcntr();
}
inline void Brkdrvstatus24c::clear_brkmsgcntr() {
  brkmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brkdrvstatus24c::_internal_brkmsgcntr() const {
  return brkmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brkdrvstatus24c::brkmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.brkmsgcntr)
  return _internal_brkmsgcntr();
}
inline void Brkdrvstatus24c::_internal_set_brkmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  brkmsgcntr_ = value;
}
inline void Brkdrvstatus24c::set_brkmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brkmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.brkmsgcntr)
}

// optional .apollo.canbus.Brkdrvstatus24c.BrkpressurestsType brkpressurests = 2;
inline bool Brkdrvstatus24c::_internal_has_brkpressurests() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_brkpressurests() const {
  return _internal_has_brkpressurests();
}
inline void Brkdrvstatus24c::clear_brkpressurests() {
  brkpressurests_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType Brkdrvstatus24c::_internal_brkpressurests() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType >(brkpressurests_);
}
inline ::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType Brkdrvstatus24c::brkpressurests() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.brkpressurests)
  return _internal_brkpressurests();
}
inline void Brkdrvstatus24c::_internal_set_brkpressurests(::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  brkpressurests_ = value;
}
inline void Brkdrvstatus24c::set_brkpressurests(::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType value) {
  _internal_set_brkpressurests(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.brkpressurests)
}

// optional double brkpressure = 3;
inline bool Brkdrvstatus24c::_internal_has_brkpressure() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_brkpressure() const {
  return _internal_has_brkpressure();
}
inline void Brkdrvstatus24c::clear_brkpressure() {
  brkpressure_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Brkdrvstatus24c::_internal_brkpressure() const {
  return brkpressure_;
}
inline double Brkdrvstatus24c::brkpressure() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.brkpressure)
  return _internal_brkpressure();
}
inline void Brkdrvstatus24c::_internal_set_brkpressure(double value) {
  _has_bits_[0] |= 0x00000004u;
  brkpressure_ = value;
}
inline void Brkdrvstatus24c::set_brkpressure(double value) {
  _internal_set_brkpressure(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.brkpressure)
}

// optional double longaccvalue = 4;
inline bool Brkdrvstatus24c::_internal_has_longaccvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_longaccvalue() const {
  return _internal_has_longaccvalue();
}
inline void Brkdrvstatus24c::clear_longaccvalue() {
  longaccvalue_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Brkdrvstatus24c::_internal_longaccvalue() const {
  return longaccvalue_;
}
inline double Brkdrvstatus24c::longaccvalue() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.longaccvalue)
  return _internal_longaccvalue();
}
inline void Brkdrvstatus24c::_internal_set_longaccvalue(double value) {
  _has_bits_[0] |= 0x00000008u;
  longaccvalue_ = value;
}
inline void Brkdrvstatus24c::set_longaccvalue(double value) {
  _internal_set_longaccvalue(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.longaccvalue)
}

// optional .apollo.canbus.Brkdrvstatus24c.VehspdstsType vehspdsts = 5;
inline bool Brkdrvstatus24c::_internal_has_vehspdsts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_vehspdsts() const {
  return _internal_has_vehspdsts();
}
inline void Brkdrvstatus24c::clear_vehspdsts() {
  vehspdsts_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Brkdrvstatus24c_VehspdstsType Brkdrvstatus24c::_internal_vehspdsts() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_VehspdstsType >(vehspdsts_);
}
inline ::apollo::canbus::Brkdrvstatus24c_VehspdstsType Brkdrvstatus24c::vehspdsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.vehspdsts)
  return _internal_vehspdsts();
}
inline void Brkdrvstatus24c::_internal_set_vehspdsts(::apollo::canbus::Brkdrvstatus24c_VehspdstsType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_VehspdstsType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  vehspdsts_ = value;
}
inline void Brkdrvstatus24c::set_vehspdsts(::apollo::canbus::Brkdrvstatus24c_VehspdstsType value) {
  _internal_set_vehspdsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.vehspdsts)
}

// optional .apollo.canbus.Brkdrvstatus24c.VehspddirType vehspddir = 6;
inline bool Brkdrvstatus24c::_internal_has_vehspddir() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_vehspddir() const {
  return _internal_has_vehspddir();
}
inline void Brkdrvstatus24c::clear_vehspddir() {
  vehspddir_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Brkdrvstatus24c_VehspddirType Brkdrvstatus24c::_internal_vehspddir() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_VehspddirType >(vehspddir_);
}
inline ::apollo::canbus::Brkdrvstatus24c_VehspddirType Brkdrvstatus24c::vehspddir() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.vehspddir)
  return _internal_vehspddir();
}
inline void Brkdrvstatus24c::_internal_set_vehspddir(::apollo::canbus::Brkdrvstatus24c_VehspddirType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_VehspddirType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  vehspddir_ = value;
}
inline void Brkdrvstatus24c::set_vehspddir(::apollo::canbus::Brkdrvstatus24c_VehspddirType value) {
  _internal_set_vehspddir(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.vehspddir)
}

// optional int32 vehspd = 7;
inline bool Brkdrvstatus24c::_internal_has_vehspd() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_vehspd() const {
  return _internal_has_vehspd();
}
inline void Brkdrvstatus24c::clear_vehspd() {
  vehspd_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brkdrvstatus24c::_internal_vehspd() const {
  return vehspd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Brkdrvstatus24c::vehspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.vehspd)
  return _internal_vehspd();
}
inline void Brkdrvstatus24c::_internal_set_vehspd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  vehspd_ = value;
}
inline void Brkdrvstatus24c::set_vehspd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehspd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.vehspd)
}

// optional .apollo.canbus.Brkdrvstatus24c.EpbswstsType epbswsts = 8;
inline bool Brkdrvstatus24c::_internal_has_epbswsts() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_epbswsts() const {
  return _internal_has_epbswsts();
}
inline void Brkdrvstatus24c::clear_epbswsts() {
  epbswsts_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Brkdrvstatus24c_EpbswstsType Brkdrvstatus24c::_internal_epbswsts() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_EpbswstsType >(epbswsts_);
}
inline ::apollo::canbus::Brkdrvstatus24c_EpbswstsType Brkdrvstatus24c::epbswsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.epbswsts)
  return _internal_epbswsts();
}
inline void Brkdrvstatus24c::_internal_set_epbswsts(::apollo::canbus::Brkdrvstatus24c_EpbswstsType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_EpbswstsType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  epbswsts_ = value;
}
inline void Brkdrvstatus24c::set_epbswsts(::apollo::canbus::Brkdrvstatus24c_EpbswstsType value) {
  _internal_set_epbswsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.epbswsts)
}

// optional .apollo.canbus.Brkdrvstatus24c.DrvstateType drvstate = 9;
inline bool Brkdrvstatus24c::_internal_has_drvstate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_drvstate() const {
  return _internal_has_drvstate();
}
inline void Brkdrvstatus24c::clear_drvstate() {
  drvstate_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Brkdrvstatus24c_DrvstateType Brkdrvstatus24c::_internal_drvstate() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_DrvstateType >(drvstate_);
}
inline ::apollo::canbus::Brkdrvstatus24c_DrvstateType Brkdrvstatus24c::drvstate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.drvstate)
  return _internal_drvstate();
}
inline void Brkdrvstatus24c::_internal_set_drvstate(::apollo::canbus::Brkdrvstatus24c_DrvstateType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_DrvstateType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  drvstate_ = value;
}
inline void Brkdrvstatus24c::set_drvstate(::apollo::canbus::Brkdrvstatus24c_DrvstateType value) {
  _internal_set_drvstate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.drvstate)
}

// optional .apollo.canbus.Brkdrvstatus24c.BrkpedlstsType brkpedlsts = 10;
inline bool Brkdrvstatus24c::_internal_has_brkpedlsts() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_brkpedlsts() const {
  return _internal_has_brkpedlsts();
}
inline void Brkdrvstatus24c::clear_brkpedlsts() {
  brkpedlsts_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType Brkdrvstatus24c::_internal_brkpedlsts() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType >(brkpedlsts_);
}
inline ::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType Brkdrvstatus24c::brkpedlsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.brkpedlsts)
  return _internal_brkpedlsts();
}
inline void Brkdrvstatus24c::_internal_set_brkpedlsts(::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  brkpedlsts_ = value;
}
inline void Brkdrvstatus24c::set_brkpedlsts(::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType value) {
  _internal_set_brkpedlsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.brkpedlsts)
}

// optional .apollo.canbus.Brkdrvstatus24c.BrklistsType brklists = 11;
inline bool Brkdrvstatus24c::_internal_has_brklists() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_brklists() const {
  return _internal_has_brklists();
}
inline void Brkdrvstatus24c::clear_brklists() {
  brklists_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Brkdrvstatus24c_BrklistsType Brkdrvstatus24c::_internal_brklists() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_BrklistsType >(brklists_);
}
inline ::apollo::canbus::Brkdrvstatus24c_BrklistsType Brkdrvstatus24c::brklists() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.brklists)
  return _internal_brklists();
}
inline void Brkdrvstatus24c::_internal_set_brklists(::apollo::canbus::Brkdrvstatus24c_BrklistsType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_BrklistsType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  brklists_ = value;
}
inline void Brkdrvstatus24c::set_brklists(::apollo::canbus::Brkdrvstatus24c_BrklistsType value) {
  _internal_set_brklists(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.brklists)
}

// optional .apollo.canbus.Brkdrvstatus24c.EpbfaillampType epbfaillamp = 12;
inline bool Brkdrvstatus24c::_internal_has_epbfaillamp() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_epbfaillamp() const {
  return _internal_has_epbfaillamp();
}
inline void Brkdrvstatus24c::clear_epbfaillamp() {
  epbfaillamp_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::canbus::Brkdrvstatus24c_EpbfaillampType Brkdrvstatus24c::_internal_epbfaillamp() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_EpbfaillampType >(epbfaillamp_);
}
inline ::apollo::canbus::Brkdrvstatus24c_EpbfaillampType Brkdrvstatus24c::epbfaillamp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.epbfaillamp)
  return _internal_epbfaillamp();
}
inline void Brkdrvstatus24c::_internal_set_epbfaillamp(::apollo::canbus::Brkdrvstatus24c_EpbfaillampType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_EpbfaillampType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  epbfaillamp_ = value;
}
inline void Brkdrvstatus24c::set_epbfaillamp(::apollo::canbus::Brkdrvstatus24c_EpbfaillampType value) {
  _internal_set_epbfaillamp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.epbfaillamp)
}

// optional .apollo.canbus.Brkdrvstatus24c.EpbwarnlampType epbwarnlamp = 13;
inline bool Brkdrvstatus24c::_internal_has_epbwarnlamp() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Brkdrvstatus24c::has_epbwarnlamp() const {
  return _internal_has_epbwarnlamp();
}
inline void Brkdrvstatus24c::clear_epbwarnlamp() {
  epbwarnlamp_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType Brkdrvstatus24c::_internal_epbwarnlamp() const {
  return static_cast< ::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType >(epbwarnlamp_);
}
inline ::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType Brkdrvstatus24c::epbwarnlamp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Brkdrvstatus24c.epbwarnlamp)
  return _internal_epbwarnlamp();
}
inline void Brkdrvstatus24c::_internal_set_epbwarnlamp(::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType value) {
  assert(::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  epbwarnlamp_ = value;
}
inline void Brkdrvstatus24c::set_epbwarnlamp(::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType value) {
  _internal_set_epbwarnlamp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Brkdrvstatus24c.epbwarnlamp)
}

// -------------------------------------------------------------------

// Bodystatus24d

// optional .apollo.canbus.Bodystatus24d.DoorajarfrntlestsType doorajarfrntlests = 1;
inline bool Bodystatus24d::_internal_has_doorajarfrntlests() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bodystatus24d::has_doorajarfrntlests() const {
  return _internal_has_doorajarfrntlests();
}
inline void Bodystatus24d::clear_doorajarfrntlests() {
  doorajarfrntlests_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType Bodystatus24d::_internal_doorajarfrntlests() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType >(doorajarfrntlests_);
}
inline ::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType Bodystatus24d::doorajarfrntlests() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.doorajarfrntlests)
  return _internal_doorajarfrntlests();
}
inline void Bodystatus24d::_internal_set_doorajarfrntlests(::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType value) {
  assert(::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  doorajarfrntlests_ = value;
}
inline void Bodystatus24d::set_doorajarfrntlests(::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType value) {
  _internal_set_doorajarfrntlests(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.doorajarfrntlests)
}

// optional .apollo.canbus.Bodystatus24d.DoorajarfrntristsType doorajarfrntrists = 2;
inline bool Bodystatus24d::_internal_has_doorajarfrntrists() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bodystatus24d::has_doorajarfrntrists() const {
  return _internal_has_doorajarfrntrists();
}
inline void Bodystatus24d::clear_doorajarfrntrists() {
  doorajarfrntrists_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Bodystatus24d_DoorajarfrntristsType Bodystatus24d::_internal_doorajarfrntrists() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_DoorajarfrntristsType >(doorajarfrntrists_);
}
inline ::apollo::canbus::Bodystatus24d_DoorajarfrntristsType Bodystatus24d::doorajarfrntrists() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.doorajarfrntrists)
  return _internal_doorajarfrntrists();
}
inline void Bodystatus24d::_internal_set_doorajarfrntrists(::apollo::canbus::Bodystatus24d_DoorajarfrntristsType value) {
  assert(::apollo::canbus::Bodystatus24d_DoorajarfrntristsType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  doorajarfrntrists_ = value;
}
inline void Bodystatus24d::set_doorajarfrntrists(::apollo::canbus::Bodystatus24d_DoorajarfrntristsType value) {
  _internal_set_doorajarfrntrists(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.doorajarfrntrists)
}

// optional .apollo.canbus.Bodystatus24d.DoorajarrelestsType doorajarrelests = 3;
inline bool Bodystatus24d::_internal_has_doorajarrelests() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bodystatus24d::has_doorajarrelests() const {
  return _internal_has_doorajarrelests();
}
inline void Bodystatus24d::clear_doorajarrelests() {
  doorajarrelests_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Bodystatus24d_DoorajarrelestsType Bodystatus24d::_internal_doorajarrelests() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_DoorajarrelestsType >(doorajarrelests_);
}
inline ::apollo::canbus::Bodystatus24d_DoorajarrelestsType Bodystatus24d::doorajarrelests() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.doorajarrelests)
  return _internal_doorajarrelests();
}
inline void Bodystatus24d::_internal_set_doorajarrelests(::apollo::canbus::Bodystatus24d_DoorajarrelestsType value) {
  assert(::apollo::canbus::Bodystatus24d_DoorajarrelestsType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  doorajarrelests_ = value;
}
inline void Bodystatus24d::set_doorajarrelests(::apollo::canbus::Bodystatus24d_DoorajarrelestsType value) {
  _internal_set_doorajarrelests(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.doorajarrelests)
}

// optional int32 bcmclosurecrc = 4;
inline bool Bodystatus24d::_internal_has_bcmclosurecrc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Bodystatus24d::has_bcmclosurecrc() const {
  return _internal_has_bcmclosurecrc();
}
inline void Bodystatus24d::clear_bcmclosurecrc() {
  bcmclosurecrc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bodystatus24d::_internal_bcmclosurecrc() const {
  return bcmclosurecrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bodystatus24d::bcmclosurecrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.bcmclosurecrc)
  return _internal_bcmclosurecrc();
}
inline void Bodystatus24d::_internal_set_bcmclosurecrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  bcmclosurecrc_ = value;
}
inline void Bodystatus24d::set_bcmclosurecrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bcmclosurecrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.bcmclosurecrc)
}

// optional .apollo.canbus.Bodystatus24d.SeatoccpfrntlefailType seatoccpfrntlefail = 5;
inline bool Bodystatus24d::_internal_has_seatoccpfrntlefail() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Bodystatus24d::has_seatoccpfrntlefail() const {
  return _internal_has_seatoccpfrntlefail();
}
inline void Bodystatus24d::clear_seatoccpfrntlefail() {
  seatoccpfrntlefail_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType Bodystatus24d::_internal_seatoccpfrntlefail() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType >(seatoccpfrntlefail_);
}
inline ::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType Bodystatus24d::seatoccpfrntlefail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.seatoccpfrntlefail)
  return _internal_seatoccpfrntlefail();
}
inline void Bodystatus24d::_internal_set_seatoccpfrntlefail(::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType value) {
  assert(::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  seatoccpfrntlefail_ = value;
}
inline void Bodystatus24d::set_seatoccpfrntlefail(::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType value) {
  _internal_set_seatoccpfrntlefail(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.seatoccpfrntlefail)
}

// optional .apollo.canbus.Bodystatus24d.SteerwhlheatstsType steerwhlheatsts = 6;
inline bool Bodystatus24d::_internal_has_steerwhlheatsts() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Bodystatus24d::has_steerwhlheatsts() const {
  return _internal_has_steerwhlheatsts();
}
inline void Bodystatus24d::clear_steerwhlheatsts() {
  steerwhlheatsts_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Bodystatus24d_SteerwhlheatstsType Bodystatus24d::_internal_steerwhlheatsts() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_SteerwhlheatstsType >(steerwhlheatsts_);
}
inline ::apollo::canbus::Bodystatus24d_SteerwhlheatstsType Bodystatus24d::steerwhlheatsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.steerwhlheatsts)
  return _internal_steerwhlheatsts();
}
inline void Bodystatus24d::_internal_set_steerwhlheatsts(::apollo::canbus::Bodystatus24d_SteerwhlheatstsType value) {
  assert(::apollo::canbus::Bodystatus24d_SteerwhlheatstsType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  steerwhlheatsts_ = value;
}
inline void Bodystatus24d::set_steerwhlheatsts(::apollo::canbus::Bodystatus24d_SteerwhlheatstsType value) {
  _internal_set_steerwhlheatsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.steerwhlheatsts)
}

// optional int32 bcmclosuremsgcntr = 7;
inline bool Bodystatus24d::_internal_has_bcmclosuremsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Bodystatus24d::has_bcmclosuremsgcntr() const {
  return _internal_has_bcmclosuremsgcntr();
}
inline void Bodystatus24d::clear_bcmclosuremsgcntr() {
  bcmclosuremsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bodystatus24d::_internal_bcmclosuremsgcntr() const {
  return bcmclosuremsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bodystatus24d::bcmclosuremsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.bcmclosuremsgcntr)
  return _internal_bcmclosuremsgcntr();
}
inline void Bodystatus24d::_internal_set_bcmclosuremsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  bcmclosuremsgcntr_ = value;
}
inline void Bodystatus24d::set_bcmclosuremsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bcmclosuremsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.bcmclosuremsgcntr)
}

// optional .apollo.canbus.Bodystatus24d.TrajarstsType trajarsts = 8;
inline bool Bodystatus24d::_internal_has_trajarsts() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Bodystatus24d::has_trajarsts() const {
  return _internal_has_trajarsts();
}
inline void Bodystatus24d::clear_trajarsts() {
  trajarsts_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Bodystatus24d_TrajarstsType Bodystatus24d::_internal_trajarsts() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_TrajarstsType >(trajarsts_);
}
inline ::apollo::canbus::Bodystatus24d_TrajarstsType Bodystatus24d::trajarsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.trajarsts)
  return _internal_trajarsts();
}
inline void Bodystatus24d::_internal_set_trajarsts(::apollo::canbus::Bodystatus24d_TrajarstsType value) {
  assert(::apollo::canbus::Bodystatus24d_TrajarstsType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  trajarsts_ = value;
}
inline void Bodystatus24d::set_trajarsts(::apollo::canbus::Bodystatus24d_TrajarstsType value) {
  _internal_set_trajarsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.trajarsts)
}

// optional .apollo.canbus.Bodystatus24d.HoodajarstsType hoodajarsts = 9;
inline bool Bodystatus24d::_internal_has_hoodajarsts() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Bodystatus24d::has_hoodajarsts() const {
  return _internal_has_hoodajarsts();
}
inline void Bodystatus24d::clear_hoodajarsts() {
  hoodajarsts_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Bodystatus24d_HoodajarstsType Bodystatus24d::_internal_hoodajarsts() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_HoodajarstsType >(hoodajarsts_);
}
inline ::apollo::canbus::Bodystatus24d_HoodajarstsType Bodystatus24d::hoodajarsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.hoodajarsts)
  return _internal_hoodajarsts();
}
inline void Bodystatus24d::_internal_set_hoodajarsts(::apollo::canbus::Bodystatus24d_HoodajarstsType value) {
  assert(::apollo::canbus::Bodystatus24d_HoodajarstsType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  hoodajarsts_ = value;
}
inline void Bodystatus24d::set_hoodajarsts(::apollo::canbus::Bodystatus24d_HoodajarstsType value) {
  _internal_set_hoodajarsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.hoodajarsts)
}

// optional .apollo.canbus.Bodystatus24d.DoorajarreristsType doorajarrerists = 10;
inline bool Bodystatus24d::_internal_has_doorajarrerists() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Bodystatus24d::has_doorajarrerists() const {
  return _internal_has_doorajarrerists();
}
inline void Bodystatus24d::clear_doorajarrerists() {
  doorajarrerists_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Bodystatus24d_DoorajarreristsType Bodystatus24d::_internal_doorajarrerists() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_DoorajarreristsType >(doorajarrerists_);
}
inline ::apollo::canbus::Bodystatus24d_DoorajarreristsType Bodystatus24d::doorajarrerists() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.doorajarrerists)
  return _internal_doorajarrerists();
}
inline void Bodystatus24d::_internal_set_doorajarrerists(::apollo::canbus::Bodystatus24d_DoorajarreristsType value) {
  assert(::apollo::canbus::Bodystatus24d_DoorajarreristsType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  doorajarrerists_ = value;
}
inline void Bodystatus24d::set_doorajarrerists(::apollo::canbus::Bodystatus24d_DoorajarreristsType value) {
  _internal_set_doorajarrerists(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.doorajarrerists)
}

// optional .apollo.canbus.Bodystatus24d.SeatoccpfrntlestsType seatoccpfrntlests = 11;
inline bool Bodystatus24d::_internal_has_seatoccpfrntlests() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Bodystatus24d::has_seatoccpfrntlests() const {
  return _internal_has_seatoccpfrntlests();
}
inline void Bodystatus24d::clear_seatoccpfrntlests() {
  seatoccpfrntlests_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType Bodystatus24d::_internal_seatoccpfrntlests() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType >(seatoccpfrntlests_);
}
inline ::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType Bodystatus24d::seatoccpfrntlests() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.seatoccpfrntlests)
  return _internal_seatoccpfrntlests();
}
inline void Bodystatus24d::_internal_set_seatoccpfrntlests(::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType value) {
  assert(::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  seatoccpfrntlests_ = value;
}
inline void Bodystatus24d::set_seatoccpfrntlests(::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType value) {
  _internal_set_seatoccpfrntlests(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.seatoccpfrntlests)
}

// optional .apollo.canbus.Bodystatus24d.CooltlvllowwarnreqType cooltlvllowwarnreq = 12;
inline bool Bodystatus24d::_internal_has_cooltlvllowwarnreq() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Bodystatus24d::has_cooltlvllowwarnreq() const {
  return _internal_has_cooltlvllowwarnreq();
}
inline void Bodystatus24d::clear_cooltlvllowwarnreq() {
  cooltlvllowwarnreq_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType Bodystatus24d::_internal_cooltlvllowwarnreq() const {
  return static_cast< ::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType >(cooltlvllowwarnreq_);
}
inline ::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType Bodystatus24d::cooltlvllowwarnreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.cooltlvllowwarnreq)
  return _internal_cooltlvllowwarnreq();
}
inline void Bodystatus24d::_internal_set_cooltlvllowwarnreq(::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType value) {
  assert(::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  cooltlvllowwarnreq_ = value;
}
inline void Bodystatus24d::set_cooltlvllowwarnreq(::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType value) {
  _internal_set_cooltlvllowwarnreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.cooltlvllowwarnreq)
}

// optional double vehspd = 13;
inline bool Bodystatus24d::_internal_has_vehspd() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Bodystatus24d::has_vehspd() const {
  return _internal_has_vehspd();
}
inline void Bodystatus24d::clear_vehspd() {
  vehspd_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Bodystatus24d::_internal_vehspd() const {
  return vehspd_;
}
inline double Bodystatus24d::vehspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bodystatus24d.vehspd)
  return _internal_vehspd();
}
inline void Bodystatus24d::_internal_set_vehspd(double value) {
  _has_bits_[0] |= 0x00001000u;
  vehspd_ = value;
}
inline void Bodystatus24d::set_vehspd(double value) {
  _internal_set_vehspd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bodystatus24d.vehspd)
}

// -------------------------------------------------------------------

// Driverstatus24e

// optional .apollo.canbus.Driverstatus24e.EpbstsType epbsts = 1;
inline bool Driverstatus24e::_internal_has_epbsts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Driverstatus24e::has_epbsts() const {
  return _internal_has_epbsts();
}
inline void Driverstatus24e::clear_epbsts() {
  epbsts_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Driverstatus24e_EpbstsType Driverstatus24e::_internal_epbsts() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_EpbstsType >(epbsts_);
}
inline ::apollo::canbus::Driverstatus24e_EpbstsType Driverstatus24e::epbsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.epbsts)
  return _internal_epbsts();
}
inline void Driverstatus24e::_internal_set_epbsts(::apollo::canbus::Driverstatus24e_EpbstsType value) {
  assert(::apollo::canbus::Driverstatus24e_EpbstsType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  epbsts_ = value;
}
inline void Driverstatus24e::set_epbsts(::apollo::canbus::Driverstatus24e_EpbstsType value) {
  _internal_set_epbsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.epbsts)
}

// optional .apollo.canbus.Driverstatus24e.VcuaccrpedlovrdType vcuaccrpedlovrd = 2;
inline bool Driverstatus24e::_internal_has_vcuaccrpedlovrd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Driverstatus24e::has_vcuaccrpedlovrd() const {
  return _internal_has_vcuaccrpedlovrd();
}
inline void Driverstatus24e::clear_vcuaccrpedlovrd() {
  vcuaccrpedlovrd_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType Driverstatus24e::_internal_vcuaccrpedlovrd() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType >(vcuaccrpedlovrd_);
}
inline ::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType Driverstatus24e::vcuaccrpedlovrd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.vcuaccrpedlovrd)
  return _internal_vcuaccrpedlovrd();
}
inline void Driverstatus24e::_internal_set_vcuaccrpedlovrd(::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType value) {
  assert(::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  vcuaccrpedlovrd_ = value;
}
inline void Driverstatus24e::set_vcuaccrpedlovrd(::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType value) {
  _internal_set_vcuaccrpedlovrd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.vcuaccrpedlovrd)
}

// optional .apollo.canbus.Driverstatus24e.Ibesp2warningType ibesp2warning = 3;
inline bool Driverstatus24e::_internal_has_ibesp2warning() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Driverstatus24e::has_ibesp2warning() const {
  return _internal_has_ibesp2warning();
}
inline void Driverstatus24e::clear_ibesp2warning() {
  ibesp2warning_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Driverstatus24e_Ibesp2warningType Driverstatus24e::_internal_ibesp2warning() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_Ibesp2warningType >(ibesp2warning_);
}
inline ::apollo::canbus::Driverstatus24e_Ibesp2warningType Driverstatus24e::ibesp2warning() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.ibesp2warning)
  return _internal_ibesp2warning();
}
inline void Driverstatus24e::_internal_set_ibesp2warning(::apollo::canbus::Driverstatus24e_Ibesp2warningType value) {
  assert(::apollo::canbus::Driverstatus24e_Ibesp2warningType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ibesp2warning_ = value;
}
inline void Driverstatus24e::set_ibesp2warning(::apollo::canbus::Driverstatus24e_Ibesp2warningType value) {
  _internal_set_ibesp2warning(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.ibesp2warning)
}

// optional .apollo.canbus.Driverstatus24e.AirbwarnreqType airbwarnreq = 4;
inline bool Driverstatus24e::_internal_has_airbwarnreq() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Driverstatus24e::has_airbwarnreq() const {
  return _internal_has_airbwarnreq();
}
inline void Driverstatus24e::clear_airbwarnreq() {
  airbwarnreq_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Driverstatus24e_AirbwarnreqType Driverstatus24e::_internal_airbwarnreq() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_AirbwarnreqType >(airbwarnreq_);
}
inline ::apollo::canbus::Driverstatus24e_AirbwarnreqType Driverstatus24e::airbwarnreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.airbwarnreq)
  return _internal_airbwarnreq();
}
inline void Driverstatus24e::_internal_set_airbwarnreq(::apollo::canbus::Driverstatus24e_AirbwarnreqType value) {
  assert(::apollo::canbus::Driverstatus24e_AirbwarnreqType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  airbwarnreq_ = value;
}
inline void Driverstatus24e::set_airbwarnreq(::apollo::canbus::Driverstatus24e_AirbwarnreqType value) {
  _internal_set_airbwarnreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.airbwarnreq)
}

// optional int32 driverstsmsgcntr = 5;
inline bool Driverstatus24e::_internal_has_driverstsmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Driverstatus24e::has_driverstsmsgcntr() const {
  return _internal_has_driverstsmsgcntr();
}
inline void Driverstatus24e::clear_driverstsmsgcntr() {
  driverstsmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Driverstatus24e::_internal_driverstsmsgcntr() const {
  return driverstsmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Driverstatus24e::driverstsmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.driverstsmsgcntr)
  return _internal_driverstsmsgcntr();
}
inline void Driverstatus24e::_internal_set_driverstsmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  driverstsmsgcntr_ = value;
}
inline void Driverstatus24e::set_driverstsmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driverstsmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.driverstsmsgcntr)
}

// optional .apollo.canbus.Driverstatus24e.SeatbltmidrowristsType seatbltmidrowrists = 6;
inline bool Driverstatus24e::_internal_has_seatbltmidrowrists() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Driverstatus24e::has_seatbltmidrowrists() const {
  return _internal_has_seatbltmidrowrists();
}
inline void Driverstatus24e::clear_seatbltmidrowrists() {
  seatbltmidrowrists_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType Driverstatus24e::_internal_seatbltmidrowrists() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType >(seatbltmidrowrists_);
}
inline ::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType Driverstatus24e::seatbltmidrowrists() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.seatbltmidrowrists)
  return _internal_seatbltmidrowrists();
}
inline void Driverstatus24e::_internal_set_seatbltmidrowrists(::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType value) {
  assert(::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  seatbltmidrowrists_ = value;
}
inline void Driverstatus24e::set_seatbltmidrowrists(::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType value) {
  _internal_set_seatbltmidrowrists(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.seatbltmidrowrists)
}

// optional .apollo.canbus.Driverstatus24e.SeatbltmidrowmidstsType seatbltmidrowmidsts = 7;
inline bool Driverstatus24e::_internal_has_seatbltmidrowmidsts() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Driverstatus24e::has_seatbltmidrowmidsts() const {
  return _internal_has_seatbltmidrowmidsts();
}
inline void Driverstatus24e::clear_seatbltmidrowmidsts() {
  seatbltmidrowmidsts_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType Driverstatus24e::_internal_seatbltmidrowmidsts() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType >(seatbltmidrowmidsts_);
}
inline ::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType Driverstatus24e::seatbltmidrowmidsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.seatbltmidrowmidsts)
  return _internal_seatbltmidrowmidsts();
}
inline void Driverstatus24e::_internal_set_seatbltmidrowmidsts(::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType value) {
  assert(::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  seatbltmidrowmidsts_ = value;
}
inline void Driverstatus24e::set_seatbltmidrowmidsts(::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType value) {
  _internal_set_seatbltmidrowmidsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.seatbltmidrowmidsts)
}

// optional .apollo.canbus.Driverstatus24e.SeatbltfrntlestsType seatbltfrntlests = 8;
inline bool Driverstatus24e::_internal_has_seatbltfrntlests() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Driverstatus24e::has_seatbltfrntlests() const {
  return _internal_has_seatbltfrntlests();
}
inline void Driverstatus24e::clear_seatbltfrntlests() {
  seatbltfrntlests_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType Driverstatus24e::_internal_seatbltfrntlests() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType >(seatbltfrntlests_);
}
inline ::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType Driverstatus24e::seatbltfrntlests() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.seatbltfrntlests)
  return _internal_seatbltfrntlests();
}
inline void Driverstatus24e::_internal_set_seatbltfrntlests(::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType value) {
  assert(::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  seatbltfrntlests_ = value;
}
inline void Driverstatus24e::set_seatbltfrntlests(::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType value) {
  _internal_set_seatbltfrntlests(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.seatbltfrntlests)
}

// optional .apollo.canbus.Driverstatus24e.PassairbginhbnlampreqType passairbginhbnlampreq = 9;
inline bool Driverstatus24e::_internal_has_passairbginhbnlampreq() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Driverstatus24e::has_passairbginhbnlampreq() const {
  return _internal_has_passairbginhbnlampreq();
}
inline void Driverstatus24e::clear_passairbginhbnlampreq() {
  passairbginhbnlampreq_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType Driverstatus24e::_internal_passairbginhbnlampreq() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType >(passairbginhbnlampreq_);
}
inline ::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType Driverstatus24e::passairbginhbnlampreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.passairbginhbnlampreq)
  return _internal_passairbginhbnlampreq();
}
inline void Driverstatus24e::_internal_set_passairbginhbnlampreq(::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType value) {
  assert(::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  passairbginhbnlampreq_ = value;
}
inline void Driverstatus24e::set_passairbginhbnlampreq(::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType value) {
  _internal_set_passairbginhbnlampreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.passairbginhbnlampreq)
}

// optional .apollo.canbus.Driverstatus24e.SeatoccptfrntristsType seatoccptfrntrists = 10;
inline bool Driverstatus24e::_internal_has_seatoccptfrntrists() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Driverstatus24e::has_seatoccptfrntrists() const {
  return _internal_has_seatoccptfrntrists();
}
inline void Driverstatus24e::clear_seatoccptfrntrists() {
  seatoccptfrntrists_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType Driverstatus24e::_internal_seatoccptfrntrists() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType >(seatoccptfrntrists_);
}
inline ::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType Driverstatus24e::seatoccptfrntrists() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.seatoccptfrntrists)
  return _internal_seatoccptfrntrists();
}
inline void Driverstatus24e::_internal_set_seatoccptfrntrists(::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType value) {
  assert(::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  seatoccptfrntrists_ = value;
}
inline void Driverstatus24e::set_seatoccptfrntrists(::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType value) {
  _internal_set_seatoccptfrntrists(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.seatoccptfrntrists)
}

// optional .apollo.canbus.Driverstatus24e.CrashdetdType crashdetd = 11;
inline bool Driverstatus24e::_internal_has_crashdetd() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Driverstatus24e::has_crashdetd() const {
  return _internal_has_crashdetd();
}
inline void Driverstatus24e::clear_crashdetd() {
  crashdetd_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Driverstatus24e_CrashdetdType Driverstatus24e::_internal_crashdetd() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_CrashdetdType >(crashdetd_);
}
inline ::apollo::canbus::Driverstatus24e_CrashdetdType Driverstatus24e::crashdetd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.crashdetd)
  return _internal_crashdetd();
}
inline void Driverstatus24e::_internal_set_crashdetd(::apollo::canbus::Driverstatus24e_CrashdetdType value) {
  assert(::apollo::canbus::Driverstatus24e_CrashdetdType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  crashdetd_ = value;
}
inline void Driverstatus24e::set_crashdetd(::apollo::canbus::Driverstatus24e_CrashdetdType value) {
  _internal_set_crashdetd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.crashdetd)
}

// optional .apollo.canbus.Driverstatus24e.SeatbltfrntristsType seatbltfrntrists = 12;
inline bool Driverstatus24e::_internal_has_seatbltfrntrists() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Driverstatus24e::has_seatbltfrntrists() const {
  return _internal_has_seatbltfrntrists();
}
inline void Driverstatus24e::clear_seatbltfrntrists() {
  seatbltfrntrists_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::canbus::Driverstatus24e_SeatbltfrntristsType Driverstatus24e::_internal_seatbltfrntrists() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_SeatbltfrntristsType >(seatbltfrntrists_);
}
inline ::apollo::canbus::Driverstatus24e_SeatbltfrntristsType Driverstatus24e::seatbltfrntrists() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.seatbltfrntrists)
  return _internal_seatbltfrntrists();
}
inline void Driverstatus24e::_internal_set_seatbltfrntrists(::apollo::canbus::Driverstatus24e_SeatbltfrntristsType value) {
  assert(::apollo::canbus::Driverstatus24e_SeatbltfrntristsType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  seatbltfrntrists_ = value;
}
inline void Driverstatus24e::set_seatbltfrntrists(::apollo::canbus::Driverstatus24e_SeatbltfrntristsType value) {
  _internal_set_seatbltfrntrists(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.seatbltfrntrists)
}

// optional int32 driverstscrc = 13;
inline bool Driverstatus24e::_internal_has_driverstscrc() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Driverstatus24e::has_driverstscrc() const {
  return _internal_has_driverstscrc();
}
inline void Driverstatus24e::clear_driverstscrc() {
  driverstscrc_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Driverstatus24e::_internal_driverstscrc() const {
  return driverstscrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Driverstatus24e::driverstscrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.driverstscrc)
  return _internal_driverstscrc();
}
inline void Driverstatus24e::_internal_set_driverstscrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  driverstscrc_ = value;
}
inline void Driverstatus24e::set_driverstscrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driverstscrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.driverstscrc)
}

// optional .apollo.canbus.Driverstatus24e.SeatbltmidrowlestsType seatbltmidrowlests = 14;
inline bool Driverstatus24e::_internal_has_seatbltmidrowlests() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Driverstatus24e::has_seatbltmidrowlests() const {
  return _internal_has_seatbltmidrowlests();
}
inline void Driverstatus24e::clear_seatbltmidrowlests() {
  seatbltmidrowlests_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType Driverstatus24e::_internal_seatbltmidrowlests() const {
  return static_cast< ::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType >(seatbltmidrowlests_);
}
inline ::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType Driverstatus24e::seatbltmidrowlests() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.seatbltmidrowlests)
  return _internal_seatbltmidrowlests();
}
inline void Driverstatus24e::_internal_set_seatbltmidrowlests(::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType value) {
  assert(::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  seatbltmidrowlests_ = value;
}
inline void Driverstatus24e::set_seatbltmidrowlests(::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType value) {
  _internal_set_seatbltmidrowlests(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.seatbltmidrowlests)
}

// optional double bmssoc = 15;
inline bool Driverstatus24e::_internal_has_bmssoc() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Driverstatus24e::has_bmssoc() const {
  return _internal_has_bmssoc();
}
inline void Driverstatus24e::clear_bmssoc() {
  bmssoc_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Driverstatus24e::_internal_bmssoc() const {
  return bmssoc_;
}
inline double Driverstatus24e::bmssoc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Driverstatus24e.bmssoc)
  return _internal_bmssoc();
}
inline void Driverstatus24e::_internal_set_bmssoc(double value) {
  _has_bits_[0] |= 0x00004000u;
  bmssoc_ = value;
}
inline void Driverstatus24e::set_bmssoc(double value) {
  _internal_set_bmssoc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Driverstatus24e.bmssoc)
}

// -------------------------------------------------------------------

// Vehiclelights2c7

// optional .apollo.canbus.Vehiclelights2c7.FogfrntlightstsType fogfrntlightsts = 1;
inline bool Vehiclelights2c7::_internal_has_fogfrntlightsts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vehiclelights2c7::has_fogfrntlightsts() const {
  return _internal_has_fogfrntlightsts();
}
inline void Vehiclelights2c7::clear_fogfrntlightsts() {
  fogfrntlightsts_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType Vehiclelights2c7::_internal_fogfrntlightsts() const {
  return static_cast< ::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType >(fogfrntlightsts_);
}
inline ::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType Vehiclelights2c7::fogfrntlightsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehiclelights2c7.fogfrntlightsts)
  return _internal_fogfrntlightsts();
}
inline void Vehiclelights2c7::_internal_set_fogfrntlightsts(::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType value) {
  assert(::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  fogfrntlightsts_ = value;
}
inline void Vehiclelights2c7::set_fogfrntlightsts(::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType value) {
  _internal_set_fogfrntlightsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehiclelights2c7.fogfrntlightsts)
}

// optional .apollo.canbus.Vehiclelights2c7.LeftturnlightstsType leftturnlightsts = 2;
inline bool Vehiclelights2c7::_internal_has_leftturnlightsts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vehiclelights2c7::has_leftturnlightsts() const {
  return _internal_has_leftturnlightsts();
}
inline void Vehiclelights2c7::clear_leftturnlightsts() {
  leftturnlightsts_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType Vehiclelights2c7::_internal_leftturnlightsts() const {
  return static_cast< ::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType >(leftturnlightsts_);
}
inline ::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType Vehiclelights2c7::leftturnlightsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehiclelights2c7.leftturnlightsts)
  return _internal_leftturnlightsts();
}
inline void Vehiclelights2c7::_internal_set_leftturnlightsts(::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType value) {
  assert(::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  leftturnlightsts_ = value;
}
inline void Vehiclelights2c7::set_leftturnlightsts(::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType value) {
  _internal_set_leftturnlightsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehiclelights2c7.leftturnlightsts)
}

// optional .apollo.canbus.Vehiclelights2c7.RightturnlightstsType rightturnlightsts = 3;
inline bool Vehiclelights2c7::_internal_has_rightturnlightsts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vehiclelights2c7::has_rightturnlightsts() const {
  return _internal_has_rightturnlightsts();
}
inline void Vehiclelights2c7::clear_rightturnlightsts() {
  rightturnlightsts_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Vehiclelights2c7_RightturnlightstsType Vehiclelights2c7::_internal_rightturnlightsts() const {
  return static_cast< ::apollo::canbus::Vehiclelights2c7_RightturnlightstsType >(rightturnlightsts_);
}
inline ::apollo::canbus::Vehiclelights2c7_RightturnlightstsType Vehiclelights2c7::rightturnlightsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehiclelights2c7.rightturnlightsts)
  return _internal_rightturnlightsts();
}
inline void Vehiclelights2c7::_internal_set_rightturnlightsts(::apollo::canbus::Vehiclelights2c7_RightturnlightstsType value) {
  assert(::apollo::canbus::Vehiclelights2c7_RightturnlightstsType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  rightturnlightsts_ = value;
}
inline void Vehiclelights2c7::set_rightturnlightsts(::apollo::canbus::Vehiclelights2c7_RightturnlightstsType value) {
  _internal_set_rightturnlightsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehiclelights2c7.rightturnlightsts)
}

// optional .apollo.canbus.Vehiclelights2c7.LobeamlightstsType lobeamlightsts = 4;
inline bool Vehiclelights2c7::_internal_has_lobeamlightsts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Vehiclelights2c7::has_lobeamlightsts() const {
  return _internal_has_lobeamlightsts();
}
inline void Vehiclelights2c7::clear_lobeamlightsts() {
  lobeamlightsts_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Vehiclelights2c7_LobeamlightstsType Vehiclelights2c7::_internal_lobeamlightsts() const {
  return static_cast< ::apollo::canbus::Vehiclelights2c7_LobeamlightstsType >(lobeamlightsts_);
}
inline ::apollo::canbus::Vehiclelights2c7_LobeamlightstsType Vehiclelights2c7::lobeamlightsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehiclelights2c7.lobeamlightsts)
  return _internal_lobeamlightsts();
}
inline void Vehiclelights2c7::_internal_set_lobeamlightsts(::apollo::canbus::Vehiclelights2c7_LobeamlightstsType value) {
  assert(::apollo::canbus::Vehiclelights2c7_LobeamlightstsType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  lobeamlightsts_ = value;
}
inline void Vehiclelights2c7::set_lobeamlightsts(::apollo::canbus::Vehiclelights2c7_LobeamlightstsType value) {
  _internal_set_lobeamlightsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehiclelights2c7.lobeamlightsts)
}

// optional .apollo.canbus.Vehiclelights2c7.HibeamlightstsType hibeamlightsts = 5;
inline bool Vehiclelights2c7::_internal_has_hibeamlightsts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Vehiclelights2c7::has_hibeamlightsts() const {
  return _internal_has_hibeamlightsts();
}
inline void Vehiclelights2c7::clear_hibeamlightsts() {
  hibeamlightsts_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Vehiclelights2c7_HibeamlightstsType Vehiclelights2c7::_internal_hibeamlightsts() const {
  return static_cast< ::apollo::canbus::Vehiclelights2c7_HibeamlightstsType >(hibeamlightsts_);
}
inline ::apollo::canbus::Vehiclelights2c7_HibeamlightstsType Vehiclelights2c7::hibeamlightsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehiclelights2c7.hibeamlightsts)
  return _internal_hibeamlightsts();
}
inline void Vehiclelights2c7::_internal_set_hibeamlightsts(::apollo::canbus::Vehiclelights2c7_HibeamlightstsType value) {
  assert(::apollo::canbus::Vehiclelights2c7_HibeamlightstsType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  hibeamlightsts_ = value;
}
inline void Vehiclelights2c7::set_hibeamlightsts(::apollo::canbus::Vehiclelights2c7_HibeamlightstsType value) {
  _internal_set_hibeamlightsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehiclelights2c7.hibeamlightsts)
}

// optional .apollo.canbus.Vehiclelights2c7.EmergcylightstsType emergcylightsts = 6;
inline bool Vehiclelights2c7::_internal_has_emergcylightsts() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Vehiclelights2c7::has_emergcylightsts() const {
  return _internal_has_emergcylightsts();
}
inline void Vehiclelights2c7::clear_emergcylightsts() {
  emergcylightsts_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Vehiclelights2c7_EmergcylightstsType Vehiclelights2c7::_internal_emergcylightsts() const {
  return static_cast< ::apollo::canbus::Vehiclelights2c7_EmergcylightstsType >(emergcylightsts_);
}
inline ::apollo::canbus::Vehiclelights2c7_EmergcylightstsType Vehiclelights2c7::emergcylightsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehiclelights2c7.emergcylightsts)
  return _internal_emergcylightsts();
}
inline void Vehiclelights2c7::_internal_set_emergcylightsts(::apollo::canbus::Vehiclelights2c7_EmergcylightstsType value) {
  assert(::apollo::canbus::Vehiclelights2c7_EmergcylightstsType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  emergcylightsts_ = value;
}
inline void Vehiclelights2c7::set_emergcylightsts(::apollo::canbus::Vehiclelights2c7_EmergcylightstsType value) {
  _internal_set_emergcylightsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehiclelights2c7.emergcylightsts)
}

// optional .apollo.canbus.Vehiclelights2c7.FrntwiperstsType frntwipersts = 7;
inline bool Vehiclelights2c7::_internal_has_frntwipersts() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Vehiclelights2c7::has_frntwipersts() const {
  return _internal_has_frntwipersts();
}
inline void Vehiclelights2c7::clear_frntwipersts() {
  frntwipersts_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Vehiclelights2c7_FrntwiperstsType Vehiclelights2c7::_internal_frntwipersts() const {
  return static_cast< ::apollo::canbus::Vehiclelights2c7_FrntwiperstsType >(frntwipersts_);
}
inline ::apollo::canbus::Vehiclelights2c7_FrntwiperstsType Vehiclelights2c7::frntwipersts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Vehiclelights2c7.frntwipersts)
  return _internal_frntwipersts();
}
inline void Vehiclelights2c7::_internal_set_frntwipersts(::apollo::canbus::Vehiclelights2c7_FrntwiperstsType value) {
  assert(::apollo::canbus::Vehiclelights2c7_FrntwiperstsType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  frntwipersts_ = value;
}
inline void Vehiclelights2c7::set_frntwipersts(::apollo::canbus::Vehiclelights2c7_FrntwiperstsType value) {
  _internal_set_frntwipersts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Vehiclelights2c7.frntwipersts)
}

// -------------------------------------------------------------------

// Lightreq336

// optional .apollo.canbus.Lightreq336.BrklireqType brklireq = 1;
inline bool Lightreq336::_internal_has_brklireq() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Lightreq336::has_brklireq() const {
  return _internal_has_brklireq();
}
inline void Lightreq336::clear_brklireq() {
  brklireq_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Lightreq336_BrklireqType Lightreq336::_internal_brklireq() const {
  return static_cast< ::apollo::canbus::Lightreq336_BrklireqType >(brklireq_);
}
inline ::apollo::canbus::Lightreq336_BrklireqType Lightreq336::brklireq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lightreq336.brklireq)
  return _internal_brklireq();
}
inline void Lightreq336::_internal_set_brklireq(::apollo::canbus::Lightreq336_BrklireqType value) {
  assert(::apollo::canbus::Lightreq336_BrklireqType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  brklireq_ = value;
}
inline void Lightreq336::set_brklireq(::apollo::canbus::Lightreq336_BrklireqType value) {
  _internal_set_brklireq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lightreq336.brklireq)
}

// optional .apollo.canbus.Lightreq336.FrntwiprstsType frntwiprsts = 2;
inline bool Lightreq336::_internal_has_frntwiprsts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Lightreq336::has_frntwiprsts() const {
  return _internal_has_frntwiprsts();
}
inline void Lightreq336::clear_frntwiprsts() {
  frntwiprsts_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Lightreq336_FrntwiprstsType Lightreq336::_internal_frntwiprsts() const {
  return static_cast< ::apollo::canbus::Lightreq336_FrntwiprstsType >(frntwiprsts_);
}
inline ::apollo::canbus::Lightreq336_FrntwiprstsType Lightreq336::frntwiprsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lightreq336.frntwiprsts)
  return _internal_frntwiprsts();
}
inline void Lightreq336::_internal_set_frntwiprsts(::apollo::canbus::Lightreq336_FrntwiprstsType value) {
  assert(::apollo::canbus::Lightreq336_FrntwiprstsType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  frntwiprsts_ = value;
}
inline void Lightreq336::set_frntwiprsts(::apollo::canbus::Lightreq336_FrntwiprstsType value) {
  _internal_set_frntwiprsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lightreq336.frntwiprsts)
}

// optional .apollo.canbus.Lightreq336.TurnlightindType turnlightind = 3;
inline bool Lightreq336::_internal_has_turnlightind() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Lightreq336::has_turnlightind() const {
  return _internal_has_turnlightind();
}
inline void Lightreq336::clear_turnlightind() {
  turnlightind_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Lightreq336_TurnlightindType Lightreq336::_internal_turnlightind() const {
  return static_cast< ::apollo::canbus::Lightreq336_TurnlightindType >(turnlightind_);
}
inline ::apollo::canbus::Lightreq336_TurnlightindType Lightreq336::turnlightind() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lightreq336.turnlightind)
  return _internal_turnlightind();
}
inline void Lightreq336::_internal_set_turnlightind(::apollo::canbus::Lightreq336_TurnlightindType value) {
  assert(::apollo::canbus::Lightreq336_TurnlightindType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  turnlightind_ = value;
}
inline void Lightreq336::set_turnlightind(::apollo::canbus::Lightreq336_TurnlightindType value) {
  _internal_set_turnlightind(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lightreq336.turnlightind)
}

// optional .apollo.canbus.Lightreq336.BeamactivestsType beamactivests = 4;
inline bool Lightreq336::_internal_has_beamactivests() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Lightreq336::has_beamactivests() const {
  return _internal_has_beamactivests();
}
inline void Lightreq336::clear_beamactivests() {
  beamactivests_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Lightreq336_BeamactivestsType Lightreq336::_internal_beamactivests() const {
  return static_cast< ::apollo::canbus::Lightreq336_BeamactivestsType >(beamactivests_);
}
inline ::apollo::canbus::Lightreq336_BeamactivestsType Lightreq336::beamactivests() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lightreq336.beamactivests)
  return _internal_beamactivests();
}
inline void Lightreq336::_internal_set_beamactivests(::apollo::canbus::Lightreq336_BeamactivestsType value) {
  assert(::apollo::canbus::Lightreq336_BeamactivestsType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  beamactivests_ = value;
}
inline void Lightreq336::set_beamactivests(::apollo::canbus::Lightreq336_BeamactivestsType value) {
  _internal_set_beamactivests(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lightreq336.beamactivests)
}

// optional .apollo.canbus.Lightreq336.BeamlightreqType beamlightreq = 5;
inline bool Lightreq336::_internal_has_beamlightreq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Lightreq336::has_beamlightreq() const {
  return _internal_has_beamlightreq();
}
inline void Lightreq336::clear_beamlightreq() {
  beamlightreq_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Lightreq336_BeamlightreqType Lightreq336::_internal_beamlightreq() const {
  return static_cast< ::apollo::canbus::Lightreq336_BeamlightreqType >(beamlightreq_);
}
inline ::apollo::canbus::Lightreq336_BeamlightreqType Lightreq336::beamlightreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lightreq336.beamlightreq)
  return _internal_beamlightreq();
}
inline void Lightreq336::_internal_set_beamlightreq(::apollo::canbus::Lightreq336_BeamlightreqType value) {
  assert(::apollo::canbus::Lightreq336_BeamlightreqType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  beamlightreq_ = value;
}
inline void Lightreq336::set_beamlightreq(::apollo::canbus::Lightreq336_BeamlightreqType value) {
  _internal_set_beamlightreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lightreq336.beamlightreq)
}

// optional .apollo.canbus.Lightreq336.EmeglampreqType emeglampreq = 6;
inline bool Lightreq336::_internal_has_emeglampreq() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Lightreq336::has_emeglampreq() const {
  return _internal_has_emeglampreq();
}
inline void Lightreq336::clear_emeglampreq() {
  emeglampreq_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Lightreq336_EmeglampreqType Lightreq336::_internal_emeglampreq() const {
  return static_cast< ::apollo::canbus::Lightreq336_EmeglampreqType >(emeglampreq_);
}
inline ::apollo::canbus::Lightreq336_EmeglampreqType Lightreq336::emeglampreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Lightreq336.emeglampreq)
  return _internal_emeglampreq();
}
inline void Lightreq336::_internal_set_emeglampreq(::apollo::canbus::Lightreq336_EmeglampreqType value) {
  assert(::apollo::canbus::Lightreq336_EmeglampreqType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  emeglampreq_ = value;
}
inline void Lightreq336::set_emeglampreq(::apollo::canbus::Lightreq336_EmeglampreqType value) {
  _internal_set_emeglampreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Lightreq336.emeglampreq)
}

// -------------------------------------------------------------------

// Acmbody4a

// optional int32 acmmsgcntr = 1;
inline bool Acmbody4a::_internal_has_acmmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Acmbody4a::has_acmmsgcntr() const {
  return _internal_has_acmmsgcntr();
}
inline void Acmbody4a::clear_acmmsgcntr() {
  acmmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acmbody4a::_internal_acmmsgcntr() const {
  return acmmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acmbody4a::acmmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Acmbody4a.acmmsgcntr)
  return _internal_acmmsgcntr();
}
inline void Acmbody4a::_internal_set_acmmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  acmmsgcntr_ = value;
}
inline void Acmbody4a::set_acmmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acmmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Acmbody4a.acmmsgcntr)
}

// optional int32 acmcrc = 2;
inline bool Acmbody4a::_internal_has_acmcrc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Acmbody4a::has_acmcrc() const {
  return _internal_has_acmcrc();
}
inline void Acmbody4a::clear_acmcrc() {
  acmcrc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acmbody4a::_internal_acmcrc() const {
  return acmcrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acmbody4a::acmcrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Acmbody4a.acmcrc)
  return _internal_acmcrc();
}
inline void Acmbody4a::_internal_set_acmcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  acmcrc_ = value;
}
inline void Acmbody4a::set_acmcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acmcrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Acmbody4a.acmcrc)
}

// optional double latitudea = 3;
inline bool Acmbody4a::_internal_has_latitudea() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Acmbody4a::has_latitudea() const {
  return _internal_has_latitudea();
}
inline void Acmbody4a::clear_latitudea() {
  latitudea_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Acmbody4a::_internal_latitudea() const {
  return latitudea_;
}
inline double Acmbody4a::latitudea() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Acmbody4a.latitudea)
  return _internal_latitudea();
}
inline void Acmbody4a::_internal_set_latitudea(double value) {
  _has_bits_[0] |= 0x00000004u;
  latitudea_ = value;
}
inline void Acmbody4a::set_latitudea(double value) {
  _internal_set_latitudea(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Acmbody4a.latitudea)
}

// optional double yawrate = 4;
inline bool Acmbody4a::_internal_has_yawrate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Acmbody4a::has_yawrate() const {
  return _internal_has_yawrate();
}
inline void Acmbody4a::clear_yawrate() {
  yawrate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Acmbody4a::_internal_yawrate() const {
  return yawrate_;
}
inline double Acmbody4a::yawrate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Acmbody4a.yawrate)
  return _internal_yawrate();
}
inline void Acmbody4a::_internal_set_yawrate(double value) {
  _has_bits_[0] |= 0x00000008u;
  yawrate_ = value;
}
inline void Acmbody4a::set_yawrate(double value) {
  _internal_set_yawrate(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Acmbody4a.yawrate)
}

// optional bool seatoccptfrntlests = 5;
inline bool Acmbody4a::_internal_has_seatoccptfrntlests() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Acmbody4a::has_seatoccptfrntlests() const {
  return _internal_has_seatoccptfrntlests();
}
inline void Acmbody4a::clear_seatoccptfrntlests() {
  seatoccptfrntlests_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Acmbody4a::_internal_seatoccptfrntlests() const {
  return seatoccptfrntlests_;
}
inline bool Acmbody4a::seatoccptfrntlests() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Acmbody4a.seatoccptfrntlests)
  return _internal_seatoccptfrntlests();
}
inline void Acmbody4a::_internal_set_seatoccptfrntlests(bool value) {
  _has_bits_[0] |= 0x00000010u;
  seatoccptfrntlests_ = value;
}
inline void Acmbody4a::set_seatoccptfrntlests(bool value) {
  _internal_set_seatoccptfrntlests(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Acmbody4a.seatoccptfrntlests)
}

// -------------------------------------------------------------------

// Whlspdfront51

// optional int32 wfmsgcntr = 1;
inline bool Whlspdfront51::_internal_has_wfmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Whlspdfront51::has_wfmsgcntr() const {
  return _internal_has_wfmsgcntr();
}
inline void Whlspdfront51::clear_wfmsgcntr() {
  wfmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Whlspdfront51::_internal_wfmsgcntr() const {
  return wfmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Whlspdfront51::wfmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdfront51.wfmsgcntr)
  return _internal_wfmsgcntr();
}
inline void Whlspdfront51::_internal_set_wfmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  wfmsgcntr_ = value;
}
inline void Whlspdfront51::set_wfmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wfmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdfront51.wfmsgcntr)
}

// optional int32 wfcrc = 2;
inline bool Whlspdfront51::_internal_has_wfcrc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Whlspdfront51::has_wfcrc() const {
  return _internal_has_wfcrc();
}
inline void Whlspdfront51::clear_wfcrc() {
  wfcrc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Whlspdfront51::_internal_wfcrc() const {
  return wfcrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Whlspdfront51::wfcrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdfront51.wfcrc)
  return _internal_wfcrc();
}
inline void Whlspdfront51::_internal_set_wfcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  wfcrc_ = value;
}
inline void Whlspdfront51::set_wfcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wfcrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdfront51.wfcrc)
}

// optional .apollo.canbus.Whlspdfront51.WhlspdfrstsType whlspdfrsts = 3;
inline bool Whlspdfront51::_internal_has_whlspdfrsts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Whlspdfront51::has_whlspdfrsts() const {
  return _internal_has_whlspdfrsts();
}
inline void Whlspdfront51::clear_whlspdfrsts() {
  whlspdfrsts_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Whlspdfront51_WhlspdfrstsType Whlspdfront51::_internal_whlspdfrsts() const {
  return static_cast< ::apollo::canbus::Whlspdfront51_WhlspdfrstsType >(whlspdfrsts_);
}
inline ::apollo::canbus::Whlspdfront51_WhlspdfrstsType Whlspdfront51::whlspdfrsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdfront51.whlspdfrsts)
  return _internal_whlspdfrsts();
}
inline void Whlspdfront51::_internal_set_whlspdfrsts(::apollo::canbus::Whlspdfront51_WhlspdfrstsType value) {
  assert(::apollo::canbus::Whlspdfront51_WhlspdfrstsType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  whlspdfrsts_ = value;
}
inline void Whlspdfront51::set_whlspdfrsts(::apollo::canbus::Whlspdfront51_WhlspdfrstsType value) {
  _internal_set_whlspdfrsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdfront51.whlspdfrsts)
}

// optional .apollo.canbus.Whlspdfront51.WhlspdfrdirType whlspdfrdir = 4;
inline bool Whlspdfront51::_internal_has_whlspdfrdir() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Whlspdfront51::has_whlspdfrdir() const {
  return _internal_has_whlspdfrdir();
}
inline void Whlspdfront51::clear_whlspdfrdir() {
  whlspdfrdir_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Whlspdfront51_WhlspdfrdirType Whlspdfront51::_internal_whlspdfrdir() const {
  return static_cast< ::apollo::canbus::Whlspdfront51_WhlspdfrdirType >(whlspdfrdir_);
}
inline ::apollo::canbus::Whlspdfront51_WhlspdfrdirType Whlspdfront51::whlspdfrdir() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdfront51.whlspdfrdir)
  return _internal_whlspdfrdir();
}
inline void Whlspdfront51::_internal_set_whlspdfrdir(::apollo::canbus::Whlspdfront51_WhlspdfrdirType value) {
  assert(::apollo::canbus::Whlspdfront51_WhlspdfrdirType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  whlspdfrdir_ = value;
}
inline void Whlspdfront51::set_whlspdfrdir(::apollo::canbus::Whlspdfront51_WhlspdfrdirType value) {
  _internal_set_whlspdfrdir(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdfront51.whlspdfrdir)
}

// optional double whlspdfr = 5;
inline bool Whlspdfront51::_internal_has_whlspdfr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Whlspdfront51::has_whlspdfr() const {
  return _internal_has_whlspdfr();
}
inline void Whlspdfront51::clear_whlspdfr() {
  whlspdfr_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Whlspdfront51::_internal_whlspdfr() const {
  return whlspdfr_;
}
inline double Whlspdfront51::whlspdfr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdfront51.whlspdfr)
  return _internal_whlspdfr();
}
inline void Whlspdfront51::_internal_set_whlspdfr(double value) {
  _has_bits_[0] |= 0x00000010u;
  whlspdfr_ = value;
}
inline void Whlspdfront51::set_whlspdfr(double value) {
  _internal_set_whlspdfr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdfront51.whlspdfr)
}

// optional .apollo.canbus.Whlspdfront51.WhlspdflstsType whlspdflsts = 6;
inline bool Whlspdfront51::_internal_has_whlspdflsts() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Whlspdfront51::has_whlspdflsts() const {
  return _internal_has_whlspdflsts();
}
inline void Whlspdfront51::clear_whlspdflsts() {
  whlspdflsts_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Whlspdfront51_WhlspdflstsType Whlspdfront51::_internal_whlspdflsts() const {
  return static_cast< ::apollo::canbus::Whlspdfront51_WhlspdflstsType >(whlspdflsts_);
}
inline ::apollo::canbus::Whlspdfront51_WhlspdflstsType Whlspdfront51::whlspdflsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdfront51.whlspdflsts)
  return _internal_whlspdflsts();
}
inline void Whlspdfront51::_internal_set_whlspdflsts(::apollo::canbus::Whlspdfront51_WhlspdflstsType value) {
  assert(::apollo::canbus::Whlspdfront51_WhlspdflstsType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  whlspdflsts_ = value;
}
inline void Whlspdfront51::set_whlspdflsts(::apollo::canbus::Whlspdfront51_WhlspdflstsType value) {
  _internal_set_whlspdflsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdfront51.whlspdflsts)
}

// optional .apollo.canbus.Whlspdfront51.WhlspdfldirType whlspdfldir = 7;
inline bool Whlspdfront51::_internal_has_whlspdfldir() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Whlspdfront51::has_whlspdfldir() const {
  return _internal_has_whlspdfldir();
}
inline void Whlspdfront51::clear_whlspdfldir() {
  whlspdfldir_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Whlspdfront51_WhlspdfldirType Whlspdfront51::_internal_whlspdfldir() const {
  return static_cast< ::apollo::canbus::Whlspdfront51_WhlspdfldirType >(whlspdfldir_);
}
inline ::apollo::canbus::Whlspdfront51_WhlspdfldirType Whlspdfront51::whlspdfldir() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdfront51.whlspdfldir)
  return _internal_whlspdfldir();
}
inline void Whlspdfront51::_internal_set_whlspdfldir(::apollo::canbus::Whlspdfront51_WhlspdfldirType value) {
  assert(::apollo::canbus::Whlspdfront51_WhlspdfldirType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  whlspdfldir_ = value;
}
inline void Whlspdfront51::set_whlspdfldir(::apollo::canbus::Whlspdfront51_WhlspdfldirType value) {
  _internal_set_whlspdfldir(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdfront51.whlspdfldir)
}

// optional double whlspdfl = 8;
inline bool Whlspdfront51::_internal_has_whlspdfl() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Whlspdfront51::has_whlspdfl() const {
  return _internal_has_whlspdfl();
}
inline void Whlspdfront51::clear_whlspdfl() {
  whlspdfl_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Whlspdfront51::_internal_whlspdfl() const {
  return whlspdfl_;
}
inline double Whlspdfront51::whlspdfl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdfront51.whlspdfl)
  return _internal_whlspdfl();
}
inline void Whlspdfront51::_internal_set_whlspdfl(double value) {
  _has_bits_[0] |= 0x00000080u;
  whlspdfl_ = value;
}
inline void Whlspdfront51::set_whlspdfl(double value) {
  _internal_set_whlspdfl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdfront51.whlspdfl)
}

// -------------------------------------------------------------------

// Whlspdrear52

// optional int32 wrcrc = 1;
inline bool Whlspdrear52::_internal_has_wrcrc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Whlspdrear52::has_wrcrc() const {
  return _internal_has_wrcrc();
}
inline void Whlspdrear52::clear_wrcrc() {
  wrcrc_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Whlspdrear52::_internal_wrcrc() const {
  return wrcrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Whlspdrear52::wrcrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdrear52.wrcrc)
  return _internal_wrcrc();
}
inline void Whlspdrear52::_internal_set_wrcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  wrcrc_ = value;
}
inline void Whlspdrear52::set_wrcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrcrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdrear52.wrcrc)
}

// optional int32 wrmsgcntr = 2;
inline bool Whlspdrear52::_internal_has_wrmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Whlspdrear52::has_wrmsgcntr() const {
  return _internal_has_wrmsgcntr();
}
inline void Whlspdrear52::clear_wrmsgcntr() {
  wrmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Whlspdrear52::_internal_wrmsgcntr() const {
  return wrmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Whlspdrear52::wrmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdrear52.wrmsgcntr)
  return _internal_wrmsgcntr();
}
inline void Whlspdrear52::_internal_set_wrmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  wrmsgcntr_ = value;
}
inline void Whlspdrear52::set_wrmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wrmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdrear52.wrmsgcntr)
}

// optional .apollo.canbus.Whlspdrear52.WhlspdrrstsType whlspdrrsts = 3;
inline bool Whlspdrear52::_internal_has_whlspdrrsts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Whlspdrear52::has_whlspdrrsts() const {
  return _internal_has_whlspdrrsts();
}
inline void Whlspdrear52::clear_whlspdrrsts() {
  whlspdrrsts_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Whlspdrear52_WhlspdrrstsType Whlspdrear52::_internal_whlspdrrsts() const {
  return static_cast< ::apollo::canbus::Whlspdrear52_WhlspdrrstsType >(whlspdrrsts_);
}
inline ::apollo::canbus::Whlspdrear52_WhlspdrrstsType Whlspdrear52::whlspdrrsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdrear52.whlspdrrsts)
  return _internal_whlspdrrsts();
}
inline void Whlspdrear52::_internal_set_whlspdrrsts(::apollo::canbus::Whlspdrear52_WhlspdrrstsType value) {
  assert(::apollo::canbus::Whlspdrear52_WhlspdrrstsType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  whlspdrrsts_ = value;
}
inline void Whlspdrear52::set_whlspdrrsts(::apollo::canbus::Whlspdrear52_WhlspdrrstsType value) {
  _internal_set_whlspdrrsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdrear52.whlspdrrsts)
}

// optional .apollo.canbus.Whlspdrear52.WhlspdrrdirType whlspdrrdir = 4;
inline bool Whlspdrear52::_internal_has_whlspdrrdir() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Whlspdrear52::has_whlspdrrdir() const {
  return _internal_has_whlspdrrdir();
}
inline void Whlspdrear52::clear_whlspdrrdir() {
  whlspdrrdir_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Whlspdrear52_WhlspdrrdirType Whlspdrear52::_internal_whlspdrrdir() const {
  return static_cast< ::apollo::canbus::Whlspdrear52_WhlspdrrdirType >(whlspdrrdir_);
}
inline ::apollo::canbus::Whlspdrear52_WhlspdrrdirType Whlspdrear52::whlspdrrdir() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdrear52.whlspdrrdir)
  return _internal_whlspdrrdir();
}
inline void Whlspdrear52::_internal_set_whlspdrrdir(::apollo::canbus::Whlspdrear52_WhlspdrrdirType value) {
  assert(::apollo::canbus::Whlspdrear52_WhlspdrrdirType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  whlspdrrdir_ = value;
}
inline void Whlspdrear52::set_whlspdrrdir(::apollo::canbus::Whlspdrear52_WhlspdrrdirType value) {
  _internal_set_whlspdrrdir(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdrear52.whlspdrrdir)
}

// optional double whlspdrr = 5;
inline bool Whlspdrear52::_internal_has_whlspdrr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Whlspdrear52::has_whlspdrr() const {
  return _internal_has_whlspdrr();
}
inline void Whlspdrear52::clear_whlspdrr() {
  whlspdrr_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Whlspdrear52::_internal_whlspdrr() const {
  return whlspdrr_;
}
inline double Whlspdrear52::whlspdrr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdrear52.whlspdrr)
  return _internal_whlspdrr();
}
inline void Whlspdrear52::_internal_set_whlspdrr(double value) {
  _has_bits_[0] |= 0x00000010u;
  whlspdrr_ = value;
}
inline void Whlspdrear52::set_whlspdrr(double value) {
  _internal_set_whlspdrr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdrear52.whlspdrr)
}

// optional .apollo.canbus.Whlspdrear52.WhlspdrlstsType whlspdrlsts = 6;
inline bool Whlspdrear52::_internal_has_whlspdrlsts() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Whlspdrear52::has_whlspdrlsts() const {
  return _internal_has_whlspdrlsts();
}
inline void Whlspdrear52::clear_whlspdrlsts() {
  whlspdrlsts_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Whlspdrear52_WhlspdrlstsType Whlspdrear52::_internal_whlspdrlsts() const {
  return static_cast< ::apollo::canbus::Whlspdrear52_WhlspdrlstsType >(whlspdrlsts_);
}
inline ::apollo::canbus::Whlspdrear52_WhlspdrlstsType Whlspdrear52::whlspdrlsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdrear52.whlspdrlsts)
  return _internal_whlspdrlsts();
}
inline void Whlspdrear52::_internal_set_whlspdrlsts(::apollo::canbus::Whlspdrear52_WhlspdrlstsType value) {
  assert(::apollo::canbus::Whlspdrear52_WhlspdrlstsType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  whlspdrlsts_ = value;
}
inline void Whlspdrear52::set_whlspdrlsts(::apollo::canbus::Whlspdrear52_WhlspdrlstsType value) {
  _internal_set_whlspdrlsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdrear52.whlspdrlsts)
}

// optional .apollo.canbus.Whlspdrear52.WhlspdrldirType whlspdrldir = 7;
inline bool Whlspdrear52::_internal_has_whlspdrldir() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Whlspdrear52::has_whlspdrldir() const {
  return _internal_has_whlspdrldir();
}
inline void Whlspdrear52::clear_whlspdrldir() {
  whlspdrldir_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Whlspdrear52_WhlspdrldirType Whlspdrear52::_internal_whlspdrldir() const {
  return static_cast< ::apollo::canbus::Whlspdrear52_WhlspdrldirType >(whlspdrldir_);
}
inline ::apollo::canbus::Whlspdrear52_WhlspdrldirType Whlspdrear52::whlspdrldir() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdrear52.whlspdrldir)
  return _internal_whlspdrldir();
}
inline void Whlspdrear52::_internal_set_whlspdrldir(::apollo::canbus::Whlspdrear52_WhlspdrldirType value) {
  assert(::apollo::canbus::Whlspdrear52_WhlspdrldirType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  whlspdrldir_ = value;
}
inline void Whlspdrear52::set_whlspdrldir(::apollo::canbus::Whlspdrear52_WhlspdrldirType value) {
  _internal_set_whlspdrldir(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdrear52.whlspdrldir)
}

// optional double whlspdrl = 8;
inline bool Whlspdrear52::_internal_has_whlspdrl() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Whlspdrear52::has_whlspdrl() const {
  return _internal_has_whlspdrl();
}
inline void Whlspdrear52::clear_whlspdrl() {
  whlspdrl_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Whlspdrear52::_internal_whlspdrl() const {
  return whlspdrl_;
}
inline double Whlspdrear52::whlspdrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Whlspdrear52.whlspdrl)
  return _internal_whlspdrl();
}
inline void Whlspdrear52::_internal_set_whlspdrl(double value) {
  _has_bits_[0] |= 0x00000080u;
  whlspdrl_ = value;
}
inline void Whlspdrear52::set_whlspdrl(double value) {
  _internal_set_whlspdrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Whlspdrear52.whlspdrl)
}

// -------------------------------------------------------------------

// Bcusts5e

// optional .apollo.canbus.Bcusts5e.TcsactvType tcsactv = 1;
inline bool Bcusts5e::_internal_has_tcsactv() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bcusts5e::has_tcsactv() const {
  return _internal_has_tcsactv();
}
inline void Bcusts5e::clear_tcsactv() {
  tcsactv_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Bcusts5e_TcsactvType Bcusts5e::_internal_tcsactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_TcsactvType >(tcsactv_);
}
inline ::apollo::canbus::Bcusts5e_TcsactvType Bcusts5e::tcsactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.tcsactv)
  return _internal_tcsactv();
}
inline void Bcusts5e::_internal_set_tcsactv(::apollo::canbus::Bcusts5e_TcsactvType value) {
  assert(::apollo::canbus::Bcusts5e_TcsactvType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  tcsactv_ = value;
}
inline void Bcusts5e::set_tcsactv(::apollo::canbus::Bcusts5e_TcsactvType value) {
  _internal_set_tcsactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.tcsactv)
}

// optional .apollo.canbus.Bcusts5e.ScmavlType scmavl = 2;
inline bool Bcusts5e::_internal_has_scmavl() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bcusts5e::has_scmavl() const {
  return _internal_has_scmavl();
}
inline void Bcusts5e::clear_scmavl() {
  scmavl_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Bcusts5e_ScmavlType Bcusts5e::_internal_scmavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_ScmavlType >(scmavl_);
}
inline ::apollo::canbus::Bcusts5e_ScmavlType Bcusts5e::scmavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.scmavl)
  return _internal_scmavl();
}
inline void Bcusts5e::_internal_set_scmavl(::apollo::canbus::Bcusts5e_ScmavlType value) {
  assert(::apollo::canbus::Bcusts5e_ScmavlType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  scmavl_ = value;
}
inline void Bcusts5e::set_scmavl(::apollo::canbus::Bcusts5e_ScmavlType value) {
  _internal_set_scmavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.scmavl)
}

// optional .apollo.canbus.Bcusts5e.HfcactvType hfcactv = 3;
inline bool Bcusts5e::_internal_has_hfcactv() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bcusts5e::has_hfcactv() const {
  return _internal_has_hfcactv();
}
inline void Bcusts5e::clear_hfcactv() {
  hfcactv_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Bcusts5e_HfcactvType Bcusts5e::_internal_hfcactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_HfcactvType >(hfcactv_);
}
inline ::apollo::canbus::Bcusts5e_HfcactvType Bcusts5e::hfcactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.hfcactv)
  return _internal_hfcactv();
}
inline void Bcusts5e::_internal_set_hfcactv(::apollo::canbus::Bcusts5e_HfcactvType value) {
  assert(::apollo::canbus::Bcusts5e_HfcactvType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  hfcactv_ = value;
}
inline void Bcusts5e::set_hfcactv(::apollo::canbus::Bcusts5e_HfcactvType value) {
  _internal_set_hfcactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.hfcactv)
}

// optional .apollo.canbus.Bcusts5e.VdcactvType vdcactv = 4;
inline bool Bcusts5e::_internal_has_vdcactv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Bcusts5e::has_vdcactv() const {
  return _internal_has_vdcactv();
}
inline void Bcusts5e::clear_vdcactv() {
  vdcactv_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Bcusts5e_VdcactvType Bcusts5e::_internal_vdcactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_VdcactvType >(vdcactv_);
}
inline ::apollo::canbus::Bcusts5e_VdcactvType Bcusts5e::vdcactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.vdcactv)
  return _internal_vdcactv();
}
inline void Bcusts5e::_internal_set_vdcactv(::apollo::canbus::Bcusts5e_VdcactvType value) {
  assert(::apollo::canbus::Bcusts5e_VdcactvType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  vdcactv_ = value;
}
inline void Bcusts5e::set_vdcactv(::apollo::canbus::Bcusts5e_VdcactvType value) {
  _internal_set_vdcactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.vdcactv)
}

// optional .apollo.canbus.Bcusts5e.AvhstsType avhsts = 5;
inline bool Bcusts5e::_internal_has_avhsts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Bcusts5e::has_avhsts() const {
  return _internal_has_avhsts();
}
inline void Bcusts5e::clear_avhsts() {
  avhsts_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Bcusts5e_AvhstsType Bcusts5e::_internal_avhsts() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AvhstsType >(avhsts_);
}
inline ::apollo::canbus::Bcusts5e_AvhstsType Bcusts5e::avhsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.avhsts)
  return _internal_avhsts();
}
inline void Bcusts5e::_internal_set_avhsts(::apollo::canbus::Bcusts5e_AvhstsType value) {
  assert(::apollo::canbus::Bcusts5e_AvhstsType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  avhsts_ = value;
}
inline void Bcusts5e::set_avhsts(::apollo::canbus::Bcusts5e_AvhstsType value) {
  _internal_set_avhsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.avhsts)
}

// optional .apollo.canbus.Bcusts5e.AutobrkgactvType autobrkgactv = 6;
inline bool Bcusts5e::_internal_has_autobrkgactv() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Bcusts5e::has_autobrkgactv() const {
  return _internal_has_autobrkgactv();
}
inline void Bcusts5e::clear_autobrkgactv() {
  autobrkgactv_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Bcusts5e_AutobrkgactvType Bcusts5e::_internal_autobrkgactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AutobrkgactvType >(autobrkgactv_);
}
inline ::apollo::canbus::Bcusts5e_AutobrkgactvType Bcusts5e::autobrkgactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.autobrkgactv)
  return _internal_autobrkgactv();
}
inline void Bcusts5e::_internal_set_autobrkgactv(::apollo::canbus::Bcusts5e_AutobrkgactvType value) {
  assert(::apollo::canbus::Bcusts5e_AutobrkgactvType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  autobrkgactv_ = value;
}
inline void Bcusts5e::set_autobrkgactv(::apollo::canbus::Bcusts5e_AutobrkgactvType value) {
  _internal_set_autobrkgactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.autobrkgactv)
}

// optional .apollo.canbus.Bcusts5e.VdcdeactvType vdcdeactv = 7;
inline bool Bcusts5e::_internal_has_vdcdeactv() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Bcusts5e::has_vdcdeactv() const {
  return _internal_has_vdcdeactv();
}
inline void Bcusts5e::clear_vdcdeactv() {
  vdcdeactv_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Bcusts5e_VdcdeactvType Bcusts5e::_internal_vdcdeactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_VdcdeactvType >(vdcdeactv_);
}
inline ::apollo::canbus::Bcusts5e_VdcdeactvType Bcusts5e::vdcdeactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.vdcdeactv)
  return _internal_vdcdeactv();
}
inline void Bcusts5e::_internal_set_vdcdeactv(::apollo::canbus::Bcusts5e_VdcdeactvType value) {
  assert(::apollo::canbus::Bcusts5e_VdcdeactvType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  vdcdeactv_ = value;
}
inline void Bcusts5e::set_vdcdeactv(::apollo::canbus::Bcusts5e_VdcdeactvType value) {
  _internal_set_vdcdeactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.vdcdeactv)
}

// optional .apollo.canbus.Bcusts5e.AbaactvType abaactv = 8;
inline bool Bcusts5e::_internal_has_abaactv() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Bcusts5e::has_abaactv() const {
  return _internal_has_abaactv();
}
inline void Bcusts5e::clear_abaactv() {
  abaactv_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Bcusts5e_AbaactvType Bcusts5e::_internal_abaactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AbaactvType >(abaactv_);
}
inline ::apollo::canbus::Bcusts5e_AbaactvType Bcusts5e::abaactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.abaactv)
  return _internal_abaactv();
}
inline void Bcusts5e::_internal_set_abaactv(::apollo::canbus::Bcusts5e_AbaactvType value) {
  assert(::apollo::canbus::Bcusts5e_AbaactvType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  abaactv_ = value;
}
inline void Bcusts5e::set_abaactv(::apollo::canbus::Bcusts5e_AbaactvType value) {
  _internal_set_abaactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.abaactv)
}

// optional .apollo.canbus.Bcusts5e.AutobrkgavlType autobrkgavl = 9;
inline bool Bcusts5e::_internal_has_autobrkgavl() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Bcusts5e::has_autobrkgavl() const {
  return _internal_has_autobrkgavl();
}
inline void Bcusts5e::clear_autobrkgavl() {
  autobrkgavl_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Bcusts5e_AutobrkgavlType Bcusts5e::_internal_autobrkgavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AutobrkgavlType >(autobrkgavl_);
}
inline ::apollo::canbus::Bcusts5e_AutobrkgavlType Bcusts5e::autobrkgavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.autobrkgavl)
  return _internal_autobrkgavl();
}
inline void Bcusts5e::_internal_set_autobrkgavl(::apollo::canbus::Bcusts5e_AutobrkgavlType value) {
  assert(::apollo::canbus::Bcusts5e_AutobrkgavlType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  autobrkgavl_ = value;
}
inline void Bcusts5e::set_autobrkgavl(::apollo::canbus::Bcusts5e_AutobrkgavlType value) {
  _internal_set_autobrkgavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.autobrkgavl)
}

// optional .apollo.canbus.Bcusts5e.HbaactvType hbaactv = 10;
inline bool Bcusts5e::_internal_has_hbaactv() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Bcusts5e::has_hbaactv() const {
  return _internal_has_hbaactv();
}
inline void Bcusts5e::clear_hbaactv() {
  hbaactv_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Bcusts5e_HbaactvType Bcusts5e::_internal_hbaactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_HbaactvType >(hbaactv_);
}
inline ::apollo::canbus::Bcusts5e_HbaactvType Bcusts5e::hbaactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.hbaactv)
  return _internal_hbaactv();
}
inline void Bcusts5e::_internal_set_hbaactv(::apollo::canbus::Bcusts5e_HbaactvType value) {
  assert(::apollo::canbus::Bcusts5e_HbaactvType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  hbaactv_ = value;
}
inline void Bcusts5e::set_hbaactv(::apollo::canbus::Bcusts5e_HbaactvType value) {
  _internal_set_hbaactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.hbaactv)
}

// optional .apollo.canbus.Bcusts5e.AebavlType aebavl = 11;
inline bool Bcusts5e::_internal_has_aebavl() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Bcusts5e::has_aebavl() const {
  return _internal_has_aebavl();
}
inline void Bcusts5e::clear_aebavl() {
  aebavl_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Bcusts5e_AebavlType Bcusts5e::_internal_aebavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AebavlType >(aebavl_);
}
inline ::apollo::canbus::Bcusts5e_AebavlType Bcusts5e::aebavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.aebavl)
  return _internal_aebavl();
}
inline void Bcusts5e::_internal_set_aebavl(::apollo::canbus::Bcusts5e_AebavlType value) {
  assert(::apollo::canbus::Bcusts5e_AebavlType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  aebavl_ = value;
}
inline void Bcusts5e::set_aebavl(::apollo::canbus::Bcusts5e_AebavlType value) {
  _internal_set_aebavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.aebavl)
}

// optional .apollo.canbus.Bcusts5e.AebactvType aebactv = 12;
inline bool Bcusts5e::_internal_has_aebactv() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Bcusts5e::has_aebactv() const {
  return _internal_has_aebactv();
}
inline void Bcusts5e::clear_aebactv() {
  aebactv_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::canbus::Bcusts5e_AebactvType Bcusts5e::_internal_aebactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AebactvType >(aebactv_);
}
inline ::apollo::canbus::Bcusts5e_AebactvType Bcusts5e::aebactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.aebactv)
  return _internal_aebactv();
}
inline void Bcusts5e::_internal_set_aebactv(::apollo::canbus::Bcusts5e_AebactvType value) {
  assert(::apollo::canbus::Bcusts5e_AebactvType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  aebactv_ = value;
}
inline void Bcusts5e::set_aebactv(::apollo::canbus::Bcusts5e_AebactvType value) {
  _internal_set_aebactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.aebactv)
}

// optional .apollo.canbus.Bcusts5e.CdpavailType cdpavail = 13;
inline bool Bcusts5e::_internal_has_cdpavail() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Bcusts5e::has_cdpavail() const {
  return _internal_has_cdpavail();
}
inline void Bcusts5e::clear_cdpavail() {
  cdpavail_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::apollo::canbus::Bcusts5e_CdpavailType Bcusts5e::_internal_cdpavail() const {
  return static_cast< ::apollo::canbus::Bcusts5e_CdpavailType >(cdpavail_);
}
inline ::apollo::canbus::Bcusts5e_CdpavailType Bcusts5e::cdpavail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.cdpavail)
  return _internal_cdpavail();
}
inline void Bcusts5e::_internal_set_cdpavail(::apollo::canbus::Bcusts5e_CdpavailType value) {
  assert(::apollo::canbus::Bcusts5e_CdpavailType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  cdpavail_ = value;
}
inline void Bcusts5e::set_cdpavail(::apollo::canbus::Bcusts5e_CdpavailType value) {
  _internal_set_cdpavail(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.cdpavail)
}

// optional .apollo.canbus.Bcusts5e.AbaavlType abaavl = 14;
inline bool Bcusts5e::_internal_has_abaavl() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Bcusts5e::has_abaavl() const {
  return _internal_has_abaavl();
}
inline void Bcusts5e::clear_abaavl() {
  abaavl_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::canbus::Bcusts5e_AbaavlType Bcusts5e::_internal_abaavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AbaavlType >(abaavl_);
}
inline ::apollo::canbus::Bcusts5e_AbaavlType Bcusts5e::abaavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.abaavl)
  return _internal_abaavl();
}
inline void Bcusts5e::_internal_set_abaavl(::apollo::canbus::Bcusts5e_AbaavlType value) {
  assert(::apollo::canbus::Bcusts5e_AbaavlType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  abaavl_ = value;
}
inline void Bcusts5e::set_abaavl(::apollo::canbus::Bcusts5e_AbaavlType value) {
  _internal_set_abaavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.abaavl)
}

// optional .apollo.canbus.Bcusts5e.HdcstsType hdcsts = 15;
inline bool Bcusts5e::_internal_has_hdcsts() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Bcusts5e::has_hdcsts() const {
  return _internal_has_hdcsts();
}
inline void Bcusts5e::clear_hdcsts() {
  hdcsts_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::apollo::canbus::Bcusts5e_HdcstsType Bcusts5e::_internal_hdcsts() const {
  return static_cast< ::apollo::canbus::Bcusts5e_HdcstsType >(hdcsts_);
}
inline ::apollo::canbus::Bcusts5e_HdcstsType Bcusts5e::hdcsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.hdcsts)
  return _internal_hdcsts();
}
inline void Bcusts5e::_internal_set_hdcsts(::apollo::canbus::Bcusts5e_HdcstsType value) {
  assert(::apollo::canbus::Bcusts5e_HdcstsType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  hdcsts_ = value;
}
inline void Bcusts5e::set_hdcsts(::apollo::canbus::Bcusts5e_HdcstsType value) {
  _internal_set_hdcsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.hdcsts)
}

// optional .apollo.canbus.Bcusts5e.TcsdeactvType tcsdeactv = 16;
inline bool Bcusts5e::_internal_has_tcsdeactv() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Bcusts5e::has_tcsdeactv() const {
  return _internal_has_tcsdeactv();
}
inline void Bcusts5e::clear_tcsdeactv() {
  tcsdeactv_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::apollo::canbus::Bcusts5e_TcsdeactvType Bcusts5e::_internal_tcsdeactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_TcsdeactvType >(tcsdeactv_);
}
inline ::apollo::canbus::Bcusts5e_TcsdeactvType Bcusts5e::tcsdeactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.tcsdeactv)
  return _internal_tcsdeactv();
}
inline void Bcusts5e::_internal_set_tcsdeactv(::apollo::canbus::Bcusts5e_TcsdeactvType value) {
  assert(::apollo::canbus::Bcusts5e_TcsdeactvType_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  tcsdeactv_ = value;
}
inline void Bcusts5e::set_tcsdeactv(::apollo::canbus::Bcusts5e_TcsdeactvType value) {
  _internal_set_tcsdeactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.tcsdeactv)
}

// optional .apollo.canbus.Bcusts5e.AwbavlType awbavl = 17;
inline bool Bcusts5e::_internal_has_awbavl() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Bcusts5e::has_awbavl() const {
  return _internal_has_awbavl();
}
inline void Bcusts5e::clear_awbavl() {
  awbavl_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::apollo::canbus::Bcusts5e_AwbavlType Bcusts5e::_internal_awbavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AwbavlType >(awbavl_);
}
inline ::apollo::canbus::Bcusts5e_AwbavlType Bcusts5e::awbavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.awbavl)
  return _internal_awbavl();
}
inline void Bcusts5e::_internal_set_awbavl(::apollo::canbus::Bcusts5e_AwbavlType value) {
  assert(::apollo::canbus::Bcusts5e_AwbavlType_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  awbavl_ = value;
}
inline void Bcusts5e::set_awbavl(::apollo::canbus::Bcusts5e_AwbavlType value) {
  _internal_set_awbavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.awbavl)
}

// optional .apollo.canbus.Bcusts5e.AbpavlType abpavl = 18;
inline bool Bcusts5e::_internal_has_abpavl() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Bcusts5e::has_abpavl() const {
  return _internal_has_abpavl();
}
inline void Bcusts5e::clear_abpavl() {
  abpavl_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::apollo::canbus::Bcusts5e_AbpavlType Bcusts5e::_internal_abpavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AbpavlType >(abpavl_);
}
inline ::apollo::canbus::Bcusts5e_AbpavlType Bcusts5e::abpavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.abpavl)
  return _internal_abpavl();
}
inline void Bcusts5e::_internal_set_abpavl(::apollo::canbus::Bcusts5e_AbpavlType value) {
  assert(::apollo::canbus::Bcusts5e_AbpavlType_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  abpavl_ = value;
}
inline void Bcusts5e::set_abpavl(::apollo::canbus::Bcusts5e_AbpavlType value) {
  _internal_set_abpavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.abpavl)
}

// optional .apollo.canbus.Bcusts5e.AwbactvType awbactv = 19;
inline bool Bcusts5e::_internal_has_awbactv() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Bcusts5e::has_awbactv() const {
  return _internal_has_awbactv();
}
inline void Bcusts5e::clear_awbactv() {
  awbactv_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::apollo::canbus::Bcusts5e_AwbactvType Bcusts5e::_internal_awbactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AwbactvType >(awbactv_);
}
inline ::apollo::canbus::Bcusts5e_AwbactvType Bcusts5e::awbactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.awbactv)
  return _internal_awbactv();
}
inline void Bcusts5e::_internal_set_awbactv(::apollo::canbus::Bcusts5e_AwbactvType value) {
  assert(::apollo::canbus::Bcusts5e_AwbactvType_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  awbactv_ = value;
}
inline void Bcusts5e::set_awbactv(::apollo::canbus::Bcusts5e_AwbactvType value) {
  _internal_set_awbactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.awbactv)
}

// optional .apollo.canbus.Bcusts5e.EbaavlType ebaavl = 20;
inline bool Bcusts5e::_internal_has_ebaavl() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Bcusts5e::has_ebaavl() const {
  return _internal_has_ebaavl();
}
inline void Bcusts5e::clear_ebaavl() {
  ebaavl_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::apollo::canbus::Bcusts5e_EbaavlType Bcusts5e::_internal_ebaavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_EbaavlType >(ebaavl_);
}
inline ::apollo::canbus::Bcusts5e_EbaavlType Bcusts5e::ebaavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.ebaavl)
  return _internal_ebaavl();
}
inline void Bcusts5e::_internal_set_ebaavl(::apollo::canbus::Bcusts5e_EbaavlType value) {
  assert(::apollo::canbus::Bcusts5e_EbaavlType_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  ebaavl_ = value;
}
inline void Bcusts5e::set_ebaavl(::apollo::canbus::Bcusts5e_EbaavlType value) {
  _internal_set_ebaavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.ebaavl)
}

// optional .apollo.canbus.Bcusts5e.QdcaccfailType qdcaccfail = 21;
inline bool Bcusts5e::_internal_has_qdcaccfail() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Bcusts5e::has_qdcaccfail() const {
  return _internal_has_qdcaccfail();
}
inline void Bcusts5e::clear_qdcaccfail() {
  qdcaccfail_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::apollo::canbus::Bcusts5e_QdcaccfailType Bcusts5e::_internal_qdcaccfail() const {
  return static_cast< ::apollo::canbus::Bcusts5e_QdcaccfailType >(qdcaccfail_);
}
inline ::apollo::canbus::Bcusts5e_QdcaccfailType Bcusts5e::qdcaccfail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.qdcaccfail)
  return _internal_qdcaccfail();
}
inline void Bcusts5e::_internal_set_qdcaccfail(::apollo::canbus::Bcusts5e_QdcaccfailType value) {
  assert(::apollo::canbus::Bcusts5e_QdcaccfailType_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  qdcaccfail_ = value;
}
inline void Bcusts5e::set_qdcaccfail(::apollo::canbus::Bcusts5e_QdcaccfailType value) {
  _internal_set_qdcaccfail(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.qdcaccfail)
}

// optional .apollo.canbus.Bcusts5e.AbpactvType abpactv = 22;
inline bool Bcusts5e::_internal_has_abpactv() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Bcusts5e::has_abpactv() const {
  return _internal_has_abpactv();
}
inline void Bcusts5e::clear_abpactv() {
  abpactv_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::apollo::canbus::Bcusts5e_AbpactvType Bcusts5e::_internal_abpactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AbpactvType >(abpactv_);
}
inline ::apollo::canbus::Bcusts5e_AbpactvType Bcusts5e::abpactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.abpactv)
  return _internal_abpactv();
}
inline void Bcusts5e::_internal_set_abpactv(::apollo::canbus::Bcusts5e_AbpactvType value) {
  assert(::apollo::canbus::Bcusts5e_AbpactvType_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  abpactv_ = value;
}
inline void Bcusts5e::set_abpactv(::apollo::canbus::Bcusts5e_AbpactvType value) {
  _internal_set_abpactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.abpactv)
}

// optional .apollo.canbus.Bcusts5e.PedpavlType pedpavl = 23;
inline bool Bcusts5e::_internal_has_pedpavl() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Bcusts5e::has_pedpavl() const {
  return _internal_has_pedpavl();
}
inline void Bcusts5e::clear_pedpavl() {
  pedpavl_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::apollo::canbus::Bcusts5e_PedpavlType Bcusts5e::_internal_pedpavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_PedpavlType >(pedpavl_);
}
inline ::apollo::canbus::Bcusts5e_PedpavlType Bcusts5e::pedpavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.pedpavl)
  return _internal_pedpavl();
}
inline void Bcusts5e::_internal_set_pedpavl(::apollo::canbus::Bcusts5e_PedpavlType value) {
  assert(::apollo::canbus::Bcusts5e_PedpavlType_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  pedpavl_ = value;
}
inline void Bcusts5e::set_pedpavl(::apollo::canbus::Bcusts5e_PedpavlType value) {
  _internal_set_pedpavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.pedpavl)
}

// optional .apollo.canbus.Bcusts5e.CddsavlType cddsavl = 24;
inline bool Bcusts5e::_internal_has_cddsavl() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Bcusts5e::has_cddsavl() const {
  return _internal_has_cddsavl();
}
inline void Bcusts5e::clear_cddsavl() {
  cddsavl_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::apollo::canbus::Bcusts5e_CddsavlType Bcusts5e::_internal_cddsavl() const {
  return static_cast< ::apollo::canbus::Bcusts5e_CddsavlType >(cddsavl_);
}
inline ::apollo::canbus::Bcusts5e_CddsavlType Bcusts5e::cddsavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.cddsavl)
  return _internal_cddsavl();
}
inline void Bcusts5e::_internal_set_cddsavl(::apollo::canbus::Bcusts5e_CddsavlType value) {
  assert(::apollo::canbus::Bcusts5e_CddsavlType_IsValid(value));
  _has_bits_[0] |= 0x00800000u;
  cddsavl_ = value;
}
inline void Bcusts5e::set_cddsavl(::apollo::canbus::Bcusts5e_CddsavlType value) {
  _internal_set_cddsavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.cddsavl)
}

// optional .apollo.canbus.Bcusts5e.StandstillstsType standstillsts = 25;
inline bool Bcusts5e::_internal_has_standstillsts() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Bcusts5e::has_standstillsts() const {
  return _internal_has_standstillsts();
}
inline void Bcusts5e::clear_standstillsts() {
  standstillsts_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::apollo::canbus::Bcusts5e_StandstillstsType Bcusts5e::_internal_standstillsts() const {
  return static_cast< ::apollo::canbus::Bcusts5e_StandstillstsType >(standstillsts_);
}
inline ::apollo::canbus::Bcusts5e_StandstillstsType Bcusts5e::standstillsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.standstillsts)
  return _internal_standstillsts();
}
inline void Bcusts5e::_internal_set_standstillsts(::apollo::canbus::Bcusts5e_StandstillstsType value) {
  assert(::apollo::canbus::Bcusts5e_StandstillstsType_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  standstillsts_ = value;
}
inline void Bcusts5e::set_standstillsts(::apollo::canbus::Bcusts5e_StandstillstsType value) {
  _internal_set_standstillsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.standstillsts)
}

// optional .apollo.canbus.Bcusts5e.HhcavailType hhcavail = 26;
inline bool Bcusts5e::_internal_has_hhcavail() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Bcusts5e::has_hhcavail() const {
  return _internal_has_hhcavail();
}
inline void Bcusts5e::clear_hhcavail() {
  hhcavail_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::apollo::canbus::Bcusts5e_HhcavailType Bcusts5e::_internal_hhcavail() const {
  return static_cast< ::apollo::canbus::Bcusts5e_HhcavailType >(hhcavail_);
}
inline ::apollo::canbus::Bcusts5e_HhcavailType Bcusts5e::hhcavail() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.hhcavail)
  return _internal_hhcavail();
}
inline void Bcusts5e::_internal_set_hhcavail(::apollo::canbus::Bcusts5e_HhcavailType value) {
  assert(::apollo::canbus::Bcusts5e_HhcavailType_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  hhcavail_ = value;
}
inline void Bcusts5e::set_hhcavail(::apollo::canbus::Bcusts5e_HhcavailType value) {
  _internal_set_hhcavail(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.hhcavail)
}

// optional .apollo.canbus.Bcusts5e.AbsactvType absactv = 27;
inline bool Bcusts5e::_internal_has_absactv() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Bcusts5e::has_absactv() const {
  return _internal_has_absactv();
}
inline void Bcusts5e::clear_absactv() {
  absactv_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::apollo::canbus::Bcusts5e_AbsactvType Bcusts5e::_internal_absactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_AbsactvType >(absactv_);
}
inline ::apollo::canbus::Bcusts5e_AbsactvType Bcusts5e::absactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.absactv)
  return _internal_absactv();
}
inline void Bcusts5e::_internal_set_absactv(::apollo::canbus::Bcusts5e_AbsactvType value) {
  assert(::apollo::canbus::Bcusts5e_AbsactvType_IsValid(value));
  _has_bits_[0] |= 0x04000000u;
  absactv_ = value;
}
inline void Bcusts5e::set_absactv(::apollo::canbus::Bcusts5e_AbsactvType value) {
  _internal_set_absactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.absactv)
}

// optional .apollo.canbus.Bcusts5e.PedpactvType pedpactv = 28;
inline bool Bcusts5e::_internal_has_pedpactv() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Bcusts5e::has_pedpactv() const {
  return _internal_has_pedpactv();
}
inline void Bcusts5e::clear_pedpactv() {
  pedpactv_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::apollo::canbus::Bcusts5e_PedpactvType Bcusts5e::_internal_pedpactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_PedpactvType >(pedpactv_);
}
inline ::apollo::canbus::Bcusts5e_PedpactvType Bcusts5e::pedpactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.pedpactv)
  return _internal_pedpactv();
}
inline void Bcusts5e::_internal_set_pedpactv(::apollo::canbus::Bcusts5e_PedpactvType value) {
  assert(::apollo::canbus::Bcusts5e_PedpactvType_IsValid(value));
  _has_bits_[0] |= 0x08000000u;
  pedpactv_ = value;
}
inline void Bcusts5e::set_pedpactv(::apollo::canbus::Bcusts5e_PedpactvType value) {
  _internal_set_pedpactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.pedpactv)
}

// optional .apollo.canbus.Bcusts5e.EbaactvType ebaactv = 29;
inline bool Bcusts5e::_internal_has_ebaactv() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool Bcusts5e::has_ebaactv() const {
  return _internal_has_ebaactv();
}
inline void Bcusts5e::clear_ebaactv() {
  ebaactv_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::apollo::canbus::Bcusts5e_EbaactvType Bcusts5e::_internal_ebaactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_EbaactvType >(ebaactv_);
}
inline ::apollo::canbus::Bcusts5e_EbaactvType Bcusts5e::ebaactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.ebaactv)
  return _internal_ebaactv();
}
inline void Bcusts5e::_internal_set_ebaactv(::apollo::canbus::Bcusts5e_EbaactvType value) {
  assert(::apollo::canbus::Bcusts5e_EbaactvType_IsValid(value));
  _has_bits_[0] |= 0x10000000u;
  ebaactv_ = value;
}
inline void Bcusts5e::set_ebaactv(::apollo::canbus::Bcusts5e_EbaactvType value) {
  _internal_set_ebaactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.ebaactv)
}

// optional .apollo.canbus.Bcusts5e.CdpactvType cdpactv = 30;
inline bool Bcusts5e::_internal_has_cdpactv() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool Bcusts5e::has_cdpactv() const {
  return _internal_has_cdpactv();
}
inline void Bcusts5e::clear_cdpactv() {
  cdpactv_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::apollo::canbus::Bcusts5e_CdpactvType Bcusts5e::_internal_cdpactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_CdpactvType >(cdpactv_);
}
inline ::apollo::canbus::Bcusts5e_CdpactvType Bcusts5e::cdpactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.cdpactv)
  return _internal_cdpactv();
}
inline void Bcusts5e::_internal_set_cdpactv(::apollo::canbus::Bcusts5e_CdpactvType value) {
  assert(::apollo::canbus::Bcusts5e_CdpactvType_IsValid(value));
  _has_bits_[0] |= 0x20000000u;
  cdpactv_ = value;
}
inline void Bcusts5e::set_cdpactv(::apollo::canbus::Bcusts5e_CdpactvType value) {
  _internal_set_cdpactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.cdpactv)
}

// optional .apollo.canbus.Bcusts5e.EbdactvType ebdactv = 31;
inline bool Bcusts5e::_internal_has_ebdactv() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool Bcusts5e::has_ebdactv() const {
  return _internal_has_ebdactv();
}
inline void Bcusts5e::clear_ebdactv() {
  ebdactv_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::apollo::canbus::Bcusts5e_EbdactvType Bcusts5e::_internal_ebdactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_EbdactvType >(ebdactv_);
}
inline ::apollo::canbus::Bcusts5e_EbdactvType Bcusts5e::ebdactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.ebdactv)
  return _internal_ebdactv();
}
inline void Bcusts5e::_internal_set_ebdactv(::apollo::canbus::Bcusts5e_EbdactvType value) {
  assert(::apollo::canbus::Bcusts5e_EbdactvType_IsValid(value));
  _has_bits_[0] |= 0x40000000u;
  ebdactv_ = value;
}
inline void Bcusts5e::set_ebdactv(::apollo::canbus::Bcusts5e_EbdactvType value) {
  _internal_set_ebdactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.ebdactv)
}

// optional .apollo.canbus.Bcusts5e.ScmactvType scmactv = 32;
inline bool Bcusts5e::_internal_has_scmactv() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool Bcusts5e::has_scmactv() const {
  return _internal_has_scmactv();
}
inline void Bcusts5e::clear_scmactv() {
  scmactv_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::apollo::canbus::Bcusts5e_ScmactvType Bcusts5e::_internal_scmactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_ScmactvType >(scmactv_);
}
inline ::apollo::canbus::Bcusts5e_ScmactvType Bcusts5e::scmactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.scmactv)
  return _internal_scmactv();
}
inline void Bcusts5e::_internal_set_scmactv(::apollo::canbus::Bcusts5e_ScmactvType value) {
  assert(::apollo::canbus::Bcusts5e_ScmactvType_IsValid(value));
  _has_bits_[0] |= 0x80000000u;
  scmactv_ = value;
}
inline void Bcusts5e::set_scmactv(::apollo::canbus::Bcusts5e_ScmactvType value) {
  _internal_set_scmactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.scmactv)
}

// optional .apollo.canbus.Bcusts5e.DtcactvType dtcactv = 33;
inline bool Bcusts5e::_internal_has_dtcactv() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool Bcusts5e::has_dtcactv() const {
  return _internal_has_dtcactv();
}
inline void Bcusts5e::clear_dtcactv() {
  dtcactv_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::apollo::canbus::Bcusts5e_DtcactvType Bcusts5e::_internal_dtcactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_DtcactvType >(dtcactv_);
}
inline ::apollo::canbus::Bcusts5e_DtcactvType Bcusts5e::dtcactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.dtcactv)
  return _internal_dtcactv();
}
inline void Bcusts5e::_internal_set_dtcactv(::apollo::canbus::Bcusts5e_DtcactvType value) {
  assert(::apollo::canbus::Bcusts5e_DtcactvType_IsValid(value));
  _has_bits_[1] |= 0x00000001u;
  dtcactv_ = value;
}
inline void Bcusts5e::set_dtcactv(::apollo::canbus::Bcusts5e_DtcactvType value) {
  _internal_set_dtcactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.dtcactv)
}

// optional .apollo.canbus.Bcusts5e.HrbactvType hrbactv = 34;
inline bool Bcusts5e::_internal_has_hrbactv() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool Bcusts5e::has_hrbactv() const {
  return _internal_has_hrbactv();
}
inline void Bcusts5e::clear_hrbactv() {
  hrbactv_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::apollo::canbus::Bcusts5e_HrbactvType Bcusts5e::_internal_hrbactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_HrbactvType >(hrbactv_);
}
inline ::apollo::canbus::Bcusts5e_HrbactvType Bcusts5e::hrbactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.hrbactv)
  return _internal_hrbactv();
}
inline void Bcusts5e::_internal_set_hrbactv(::apollo::canbus::Bcusts5e_HrbactvType value) {
  assert(::apollo::canbus::Bcusts5e_HrbactvType_IsValid(value));
  _has_bits_[1] |= 0x00000002u;
  hrbactv_ = value;
}
inline void Bcusts5e::set_hrbactv(::apollo::canbus::Bcusts5e_HrbactvType value) {
  _internal_set_hrbactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.hrbactv)
}

// optional .apollo.canbus.Bcusts5e.EcdttempoffsType ecdttempoffs = 35;
inline bool Bcusts5e::_internal_has_ecdttempoffs() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool Bcusts5e::has_ecdttempoffs() const {
  return _internal_has_ecdttempoffs();
}
inline void Bcusts5e::clear_ecdttempoffs() {
  ecdttempoffs_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::apollo::canbus::Bcusts5e_EcdttempoffsType Bcusts5e::_internal_ecdttempoffs() const {
  return static_cast< ::apollo::canbus::Bcusts5e_EcdttempoffsType >(ecdttempoffs_);
}
inline ::apollo::canbus::Bcusts5e_EcdttempoffsType Bcusts5e::ecdttempoffs() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.ecdttempoffs)
  return _internal_ecdttempoffs();
}
inline void Bcusts5e::_internal_set_ecdttempoffs(::apollo::canbus::Bcusts5e_EcdttempoffsType value) {
  assert(::apollo::canbus::Bcusts5e_EcdttempoffsType_IsValid(value));
  _has_bits_[1] |= 0x00000004u;
  ecdttempoffs_ = value;
}
inline void Bcusts5e::set_ecdttempoffs(::apollo::canbus::Bcusts5e_EcdttempoffsType value) {
  _internal_set_ecdttempoffs(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.ecdttempoffs)
}

// optional .apollo.canbus.Bcusts5e.CddsactvType cddsactv = 36;
inline bool Bcusts5e::_internal_has_cddsactv() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool Bcusts5e::has_cddsactv() const {
  return _internal_has_cddsactv();
}
inline void Bcusts5e::clear_cddsactv() {
  cddsactv_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::apollo::canbus::Bcusts5e_CddsactvType Bcusts5e::_internal_cddsactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_CddsactvType >(cddsactv_);
}
inline ::apollo::canbus::Bcusts5e_CddsactvType Bcusts5e::cddsactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.cddsactv)
  return _internal_cddsactv();
}
inline void Bcusts5e::_internal_set_cddsactv(::apollo::canbus::Bcusts5e_CddsactvType value) {
  assert(::apollo::canbus::Bcusts5e_CddsactvType_IsValid(value));
  _has_bits_[1] |= 0x00000008u;
  cddsactv_ = value;
}
inline void Bcusts5e::set_cddsactv(::apollo::canbus::Bcusts5e_CddsactvType value) {
  _internal_set_cddsactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.cddsactv)
}

// optional .apollo.canbus.Bcusts5e.HhcactvType hhcactv = 37;
inline bool Bcusts5e::_internal_has_hhcactv() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool Bcusts5e::has_hhcactv() const {
  return _internal_has_hhcactv();
}
inline void Bcusts5e::clear_hhcactv() {
  hhcactv_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::apollo::canbus::Bcusts5e_HhcactvType Bcusts5e::_internal_hhcactv() const {
  return static_cast< ::apollo::canbus::Bcusts5e_HhcactvType >(hhcactv_);
}
inline ::apollo::canbus::Bcusts5e_HhcactvType Bcusts5e::hhcactv() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Bcusts5e.hhcactv)
  return _internal_hhcactv();
}
inline void Bcusts5e::_internal_set_hhcactv(::apollo::canbus::Bcusts5e_HhcactvType value) {
  assert(::apollo::canbus::Bcusts5e_HhcactvType_IsValid(value));
  _has_bits_[1] |= 0x00000010u;
  hhcactv_ = value;
}
inline void Bcusts5e::set_hhcactv(::apollo::canbus::Bcusts5e_HhcactvType value) {
  _internal_set_hhcactv(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Bcusts5e.hhcactv)
}

// -------------------------------------------------------------------

// Pulsecnt65

// optional .apollo.canbus.Pulsecnt65.WhlplscntrrvldType whlplscntrrvld = 1;
inline bool Pulsecnt65::_internal_has_whlplscntrrvld() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pulsecnt65::has_whlplscntrrvld() const {
  return _internal_has_whlplscntrrvld();
}
inline void Pulsecnt65::clear_whlplscntrrvld() {
  whlplscntrrvld_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Pulsecnt65_WhlplscntrrvldType Pulsecnt65::_internal_whlplscntrrvld() const {
  return static_cast< ::apollo::canbus::Pulsecnt65_WhlplscntrrvldType >(whlplscntrrvld_);
}
inline ::apollo::canbus::Pulsecnt65_WhlplscntrrvldType Pulsecnt65::whlplscntrrvld() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pulsecnt65.whlplscntrrvld)
  return _internal_whlplscntrrvld();
}
inline void Pulsecnt65::_internal_set_whlplscntrrvld(::apollo::canbus::Pulsecnt65_WhlplscntrrvldType value) {
  assert(::apollo::canbus::Pulsecnt65_WhlplscntrrvldType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  whlplscntrrvld_ = value;
}
inline void Pulsecnt65::set_whlplscntrrvld(::apollo::canbus::Pulsecnt65_WhlplscntrrvldType value) {
  _internal_set_whlplscntrrvld(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pulsecnt65.whlplscntrrvld)
}

// optional int32 whlplscntrr = 2;
inline bool Pulsecnt65::_internal_has_whlplscntrr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pulsecnt65::has_whlplscntrr() const {
  return _internal_has_whlplscntrr();
}
inline void Pulsecnt65::clear_whlplscntrr() {
  whlplscntrr_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pulsecnt65::_internal_whlplscntrr() const {
  return whlplscntrr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pulsecnt65::whlplscntrr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pulsecnt65.whlplscntrr)
  return _internal_whlplscntrr();
}
inline void Pulsecnt65::_internal_set_whlplscntrr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  whlplscntrr_ = value;
}
inline void Pulsecnt65::set_whlplscntrr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_whlplscntrr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pulsecnt65.whlplscntrr)
}

// optional .apollo.canbus.Pulsecnt65.WhlplscntrlvldType whlplscntrlvld = 3;
inline bool Pulsecnt65::_internal_has_whlplscntrlvld() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pulsecnt65::has_whlplscntrlvld() const {
  return _internal_has_whlplscntrlvld();
}
inline void Pulsecnt65::clear_whlplscntrlvld() {
  whlplscntrlvld_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Pulsecnt65_WhlplscntrlvldType Pulsecnt65::_internal_whlplscntrlvld() const {
  return static_cast< ::apollo::canbus::Pulsecnt65_WhlplscntrlvldType >(whlplscntrlvld_);
}
inline ::apollo::canbus::Pulsecnt65_WhlplscntrlvldType Pulsecnt65::whlplscntrlvld() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pulsecnt65.whlplscntrlvld)
  return _internal_whlplscntrlvld();
}
inline void Pulsecnt65::_internal_set_whlplscntrlvld(::apollo::canbus::Pulsecnt65_WhlplscntrlvldType value) {
  assert(::apollo::canbus::Pulsecnt65_WhlplscntrlvldType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  whlplscntrlvld_ = value;
}
inline void Pulsecnt65::set_whlplscntrlvld(::apollo::canbus::Pulsecnt65_WhlplscntrlvldType value) {
  _internal_set_whlplscntrlvld(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pulsecnt65.whlplscntrlvld)
}

// optional int32 whlplscntrl = 4;
inline bool Pulsecnt65::_internal_has_whlplscntrl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pulsecnt65::has_whlplscntrl() const {
  return _internal_has_whlplscntrl();
}
inline void Pulsecnt65::clear_whlplscntrl() {
  whlplscntrl_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pulsecnt65::_internal_whlplscntrl() const {
  return whlplscntrl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pulsecnt65::whlplscntrl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pulsecnt65.whlplscntrl)
  return _internal_whlplscntrl();
}
inline void Pulsecnt65::_internal_set_whlplscntrl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  whlplscntrl_ = value;
}
inline void Pulsecnt65::set_whlplscntrl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_whlplscntrl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pulsecnt65.whlplscntrl)
}

// optional .apollo.canbus.Pulsecnt65.WhlplscntfrvldType whlplscntfrvld = 5;
inline bool Pulsecnt65::_internal_has_whlplscntfrvld() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Pulsecnt65::has_whlplscntfrvld() const {
  return _internal_has_whlplscntfrvld();
}
inline void Pulsecnt65::clear_whlplscntfrvld() {
  whlplscntfrvld_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Pulsecnt65_WhlplscntfrvldType Pulsecnt65::_internal_whlplscntfrvld() const {
  return static_cast< ::apollo::canbus::Pulsecnt65_WhlplscntfrvldType >(whlplscntfrvld_);
}
inline ::apollo::canbus::Pulsecnt65_WhlplscntfrvldType Pulsecnt65::whlplscntfrvld() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pulsecnt65.whlplscntfrvld)
  return _internal_whlplscntfrvld();
}
inline void Pulsecnt65::_internal_set_whlplscntfrvld(::apollo::canbus::Pulsecnt65_WhlplscntfrvldType value) {
  assert(::apollo::canbus::Pulsecnt65_WhlplscntfrvldType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  whlplscntfrvld_ = value;
}
inline void Pulsecnt65::set_whlplscntfrvld(::apollo::canbus::Pulsecnt65_WhlplscntfrvldType value) {
  _internal_set_whlplscntfrvld(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pulsecnt65.whlplscntfrvld)
}

// optional int32 whlplscntfr = 6;
inline bool Pulsecnt65::_internal_has_whlplscntfr() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Pulsecnt65::has_whlplscntfr() const {
  return _internal_has_whlplscntfr();
}
inline void Pulsecnt65::clear_whlplscntfr() {
  whlplscntfr_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pulsecnt65::_internal_whlplscntfr() const {
  return whlplscntfr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pulsecnt65::whlplscntfr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pulsecnt65.whlplscntfr)
  return _internal_whlplscntfr();
}
inline void Pulsecnt65::_internal_set_whlplscntfr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  whlplscntfr_ = value;
}
inline void Pulsecnt65::set_whlplscntfr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_whlplscntfr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pulsecnt65.whlplscntfr)
}

// optional .apollo.canbus.Pulsecnt65.WhlplscntflvldType whlplscntflvld = 7;
inline bool Pulsecnt65::_internal_has_whlplscntflvld() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Pulsecnt65::has_whlplscntflvld() const {
  return _internal_has_whlplscntflvld();
}
inline void Pulsecnt65::clear_whlplscntflvld() {
  whlplscntflvld_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Pulsecnt65_WhlplscntflvldType Pulsecnt65::_internal_whlplscntflvld() const {
  return static_cast< ::apollo::canbus::Pulsecnt65_WhlplscntflvldType >(whlplscntflvld_);
}
inline ::apollo::canbus::Pulsecnt65_WhlplscntflvldType Pulsecnt65::whlplscntflvld() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pulsecnt65.whlplscntflvld)
  return _internal_whlplscntflvld();
}
inline void Pulsecnt65::_internal_set_whlplscntflvld(::apollo::canbus::Pulsecnt65_WhlplscntflvldType value) {
  assert(::apollo::canbus::Pulsecnt65_WhlplscntflvldType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  whlplscntflvld_ = value;
}
inline void Pulsecnt65::set_whlplscntflvld(::apollo::canbus::Pulsecnt65_WhlplscntflvldType value) {
  _internal_set_whlplscntflvld(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pulsecnt65.whlplscntflvld)
}

// optional int32 whlplscntfl = 8;
inline bool Pulsecnt65::_internal_has_whlplscntfl() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Pulsecnt65::has_whlplscntfl() const {
  return _internal_has_whlplscntfl();
}
inline void Pulsecnt65::clear_whlplscntfl() {
  whlplscntfl_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pulsecnt65::_internal_whlplscntfl() const {
  return whlplscntfl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pulsecnt65::whlplscntfl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pulsecnt65.whlplscntfl)
  return _internal_whlplscntfl();
}
inline void Pulsecnt65::_internal_set_whlplscntfl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  whlplscntfl_ = value;
}
inline void Pulsecnt65::set_whlplscntfl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_whlplscntfl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Pulsecnt65.whlplscntfl)
}

// -------------------------------------------------------------------

// Aebreq79

// optional double aebtardecel = 1;
inline bool Aebreq79::_internal_has_aebtardecel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Aebreq79::has_aebtardecel() const {
  return _internal_has_aebtardecel();
}
inline void Aebreq79::clear_aebtardecel() {
  aebtardecel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Aebreq79::_internal_aebtardecel() const {
  return aebtardecel_;
}
inline double Aebreq79::aebtardecel() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.aebtardecel)
  return _internal_aebtardecel();
}
inline void Aebreq79::_internal_set_aebtardecel(double value) {
  _has_bits_[0] |= 0x00000001u;
  aebtardecel_ = value;
}
inline void Aebreq79::set_aebtardecel(double value) {
  _internal_set_aebtardecel(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.aebtardecel)
}

// optional .apollo.canbus.Aebreq79.AbareqType abareq = 2;
inline bool Aebreq79::_internal_has_abareq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Aebreq79::has_abareq() const {
  return _internal_has_abareq();
}
inline void Aebreq79::clear_abareq() {
  abareq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Aebreq79_AbareqType Aebreq79::_internal_abareq() const {
  return static_cast< ::apollo::canbus::Aebreq79_AbareqType >(abareq_);
}
inline ::apollo::canbus::Aebreq79_AbareqType Aebreq79::abareq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.abareq)
  return _internal_abareq();
}
inline void Aebreq79::_internal_set_abareq(::apollo::canbus::Aebreq79_AbareqType value) {
  assert(::apollo::canbus::Aebreq79_AbareqType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  abareq_ = value;
}
inline void Aebreq79::set_abareq(::apollo::canbus::Aebreq79_AbareqType value) {
  _internal_set_abareq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.abareq)
}

// optional .apollo.canbus.Aebreq79.AbasnvtylvlType abasnvtylvl = 3;
inline bool Aebreq79::_internal_has_abasnvtylvl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Aebreq79::has_abasnvtylvl() const {
  return _internal_has_abasnvtylvl();
}
inline void Aebreq79::clear_abasnvtylvl() {
  abasnvtylvl_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Aebreq79_AbasnvtylvlType Aebreq79::_internal_abasnvtylvl() const {
  return static_cast< ::apollo::canbus::Aebreq79_AbasnvtylvlType >(abasnvtylvl_);
}
inline ::apollo::canbus::Aebreq79_AbasnvtylvlType Aebreq79::abasnvtylvl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.abasnvtylvl)
  return _internal_abasnvtylvl();
}
inline void Aebreq79::_internal_set_abasnvtylvl(::apollo::canbus::Aebreq79_AbasnvtylvlType value) {
  assert(::apollo::canbus::Aebreq79_AbasnvtylvlType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  abasnvtylvl_ = value;
}
inline void Aebreq79::set_abasnvtylvl(::apollo::canbus::Aebreq79_AbasnvtylvlType value) {
  _internal_set_abasnvtylvl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.abasnvtylvl)
}

// optional .apollo.canbus.Aebreq79.AwbsnvtylvlType awbsnvtylvl = 4;
inline bool Aebreq79::_internal_has_awbsnvtylvl() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Aebreq79::has_awbsnvtylvl() const {
  return _internal_has_awbsnvtylvl();
}
inline void Aebreq79::clear_awbsnvtylvl() {
  awbsnvtylvl_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Aebreq79_AwbsnvtylvlType Aebreq79::_internal_awbsnvtylvl() const {
  return static_cast< ::apollo::canbus::Aebreq79_AwbsnvtylvlType >(awbsnvtylvl_);
}
inline ::apollo::canbus::Aebreq79_AwbsnvtylvlType Aebreq79::awbsnvtylvl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.awbsnvtylvl)
  return _internal_awbsnvtylvl();
}
inline void Aebreq79::_internal_set_awbsnvtylvl(::apollo::canbus::Aebreq79_AwbsnvtylvlType value) {
  assert(::apollo::canbus::Aebreq79_AwbsnvtylvlType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  awbsnvtylvl_ = value;
}
inline void Aebreq79::set_awbsnvtylvl(::apollo::canbus::Aebreq79_AwbsnvtylvlType value) {
  _internal_set_awbsnvtylvl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.awbsnvtylvl)
}

// optional .apollo.canbus.Aebreq79.AwbreqType awbreq = 5;
inline bool Aebreq79::_internal_has_awbreq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Aebreq79::has_awbreq() const {
  return _internal_has_awbreq();
}
inline void Aebreq79::clear_awbreq() {
  awbreq_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Aebreq79_AwbreqType Aebreq79::_internal_awbreq() const {
  return static_cast< ::apollo::canbus::Aebreq79_AwbreqType >(awbreq_);
}
inline ::apollo::canbus::Aebreq79_AwbreqType Aebreq79::awbreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.awbreq)
  return _internal_awbreq();
}
inline void Aebreq79::_internal_set_awbreq(::apollo::canbus::Aebreq79_AwbreqType value) {
  assert(::apollo::canbus::Aebreq79_AwbreqType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  awbreq_ = value;
}
inline void Aebreq79::set_awbreq(::apollo::canbus::Aebreq79_AwbreqType value) {
  _internal_set_awbreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.awbreq)
}

// optional .apollo.canbus.Aebreq79.ScmdecelreqType scmdecelreq = 6;
inline bool Aebreq79::_internal_has_scmdecelreq() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Aebreq79::has_scmdecelreq() const {
  return _internal_has_scmdecelreq();
}
inline void Aebreq79::clear_scmdecelreq() {
  scmdecelreq_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Aebreq79_ScmdecelreqType Aebreq79::_internal_scmdecelreq() const {
  return static_cast< ::apollo::canbus::Aebreq79_ScmdecelreqType >(scmdecelreq_);
}
inline ::apollo::canbus::Aebreq79_ScmdecelreqType Aebreq79::scmdecelreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.scmdecelreq)
  return _internal_scmdecelreq();
}
inline void Aebreq79::_internal_set_scmdecelreq(::apollo::canbus::Aebreq79_ScmdecelreqType value) {
  assert(::apollo::canbus::Aebreq79_ScmdecelreqType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  scmdecelreq_ = value;
}
inline void Aebreq79::set_scmdecelreq(::apollo::canbus::Aebreq79_ScmdecelreqType value) {
  _internal_set_scmdecelreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.scmdecelreq)
}

// optional int32 aebmsgcntr = 7;
inline bool Aebreq79::_internal_has_aebmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Aebreq79::has_aebmsgcntr() const {
  return _internal_has_aebmsgcntr();
}
inline void Aebreq79::clear_aebmsgcntr() {
  aebmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aebreq79::_internal_aebmsgcntr() const {
  return aebmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aebreq79::aebmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.aebmsgcntr)
  return _internal_aebmsgcntr();
}
inline void Aebreq79::_internal_set_aebmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  aebmsgcntr_ = value;
}
inline void Aebreq79::set_aebmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aebmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.aebmsgcntr)
}

// optional .apollo.canbus.Aebreq79.AebdecelreqType aebdecelreq = 8;
inline bool Aebreq79::_internal_has_aebdecelreq() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Aebreq79::has_aebdecelreq() const {
  return _internal_has_aebdecelreq();
}
inline void Aebreq79::clear_aebdecelreq() {
  aebdecelreq_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Aebreq79_AebdecelreqType Aebreq79::_internal_aebdecelreq() const {
  return static_cast< ::apollo::canbus::Aebreq79_AebdecelreqType >(aebdecelreq_);
}
inline ::apollo::canbus::Aebreq79_AebdecelreqType Aebreq79::aebdecelreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.aebdecelreq)
  return _internal_aebdecelreq();
}
inline void Aebreq79::_internal_set_aebdecelreq(::apollo::canbus::Aebreq79_AebdecelreqType value) {
  assert(::apollo::canbus::Aebreq79_AebdecelreqType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  aebdecelreq_ = value;
}
inline void Aebreq79::set_aebdecelreq(::apollo::canbus::Aebreq79_AebdecelreqType value) {
  _internal_set_aebdecelreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.aebdecelreq)
}

// optional .apollo.canbus.Aebreq79.EbadecelreqType ebadecelreq = 9;
inline bool Aebreq79::_internal_has_ebadecelreq() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Aebreq79::has_ebadecelreq() const {
  return _internal_has_ebadecelreq();
}
inline void Aebreq79::clear_ebadecelreq() {
  ebadecelreq_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Aebreq79_EbadecelreqType Aebreq79::_internal_ebadecelreq() const {
  return static_cast< ::apollo::canbus::Aebreq79_EbadecelreqType >(ebadecelreq_);
}
inline ::apollo::canbus::Aebreq79_EbadecelreqType Aebreq79::ebadecelreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.ebadecelreq)
  return _internal_ebadecelreq();
}
inline void Aebreq79::_internal_set_ebadecelreq(::apollo::canbus::Aebreq79_EbadecelreqType value) {
  assert(::apollo::canbus::Aebreq79_EbadecelreqType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  ebadecelreq_ = value;
}
inline void Aebreq79::set_ebadecelreq(::apollo::canbus::Aebreq79_EbadecelreqType value) {
  _internal_set_ebadecelreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.ebadecelreq)
}

// optional .apollo.canbus.Aebreq79.AbpreqType abpreq = 10;
inline bool Aebreq79::_internal_has_abpreq() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Aebreq79::has_abpreq() const {
  return _internal_has_abpreq();
}
inline void Aebreq79::clear_abpreq() {
  abpreq_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Aebreq79_AbpreqType Aebreq79::_internal_abpreq() const {
  return static_cast< ::apollo::canbus::Aebreq79_AbpreqType >(abpreq_);
}
inline ::apollo::canbus::Aebreq79_AbpreqType Aebreq79::abpreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.abpreq)
  return _internal_abpreq();
}
inline void Aebreq79::_internal_set_abpreq(::apollo::canbus::Aebreq79_AbpreqType value) {
  assert(::apollo::canbus::Aebreq79_AbpreqType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  abpreq_ = value;
}
inline void Aebreq79::set_abpreq(::apollo::canbus::Aebreq79_AbpreqType value) {
  _internal_set_abpreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.abpreq)
}

// optional .apollo.canbus.Aebreq79.PedpdecreqType pedpdecreq = 11;
inline bool Aebreq79::_internal_has_pedpdecreq() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Aebreq79::has_pedpdecreq() const {
  return _internal_has_pedpdecreq();
}
inline void Aebreq79::clear_pedpdecreq() {
  pedpdecreq_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Aebreq79_PedpdecreqType Aebreq79::_internal_pedpdecreq() const {
  return static_cast< ::apollo::canbus::Aebreq79_PedpdecreqType >(pedpdecreq_);
}
inline ::apollo::canbus::Aebreq79_PedpdecreqType Aebreq79::pedpdecreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.pedpdecreq)
  return _internal_pedpdecreq();
}
inline void Aebreq79::_internal_set_pedpdecreq(::apollo::canbus::Aebreq79_PedpdecreqType value) {
  assert(::apollo::canbus::Aebreq79_PedpdecreqType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  pedpdecreq_ = value;
}
inline void Aebreq79::set_pedpdecreq(::apollo::canbus::Aebreq79_PedpdecreqType value) {
  _internal_set_pedpdecreq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.pedpdecreq)
}

// optional int32 aebcrc = 12;
inline bool Aebreq79::_internal_has_aebcrc() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Aebreq79::has_aebcrc() const {
  return _internal_has_aebcrc();
}
inline void Aebreq79::clear_aebcrc() {
  aebcrc_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aebreq79::_internal_aebcrc() const {
  return aebcrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Aebreq79::aebcrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Aebreq79.aebcrc)
  return _internal_aebcrc();
}
inline void Aebreq79::_internal_set_aebcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  aebcrc_ = value;
}
inline void Aebreq79::set_aebcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aebcrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Aebreq79.aebcrc)
}

// -------------------------------------------------------------------

// Scmsts7b

// optional .apollo.canbus.Scmsts7b.ScmfailstsType scmfailsts = 1;
inline bool Scmsts7b::_internal_has_scmfailsts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Scmsts7b::has_scmfailsts() const {
  return _internal_has_scmfailsts();
}
inline void Scmsts7b::clear_scmfailsts() {
  scmfailsts_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Scmsts7b_ScmfailstsType Scmsts7b::_internal_scmfailsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_ScmfailstsType >(scmfailsts_);
}
inline ::apollo::canbus::Scmsts7b_ScmfailstsType Scmsts7b::scmfailsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.scmfailsts)
  return _internal_scmfailsts();
}
inline void Scmsts7b::_internal_set_scmfailsts(::apollo::canbus::Scmsts7b_ScmfailstsType value) {
  assert(::apollo::canbus::Scmsts7b_ScmfailstsType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  scmfailsts_ = value;
}
inline void Scmsts7b::set_scmfailsts(::apollo::canbus::Scmsts7b_ScmfailstsType value) {
  _internal_set_scmfailsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.scmfailsts)
}

// optional .apollo.canbus.Scmsts7b.HilowbeampushswtstsType hilowbeampushswtsts = 2;
inline bool Scmsts7b::_internal_has_hilowbeampushswtsts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Scmsts7b::has_hilowbeampushswtsts() const {
  return _internal_has_hilowbeampushswtsts();
}
inline void Scmsts7b::clear_hilowbeampushswtsts() {
  hilowbeampushswtsts_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Scmsts7b_HilowbeampushswtstsType Scmsts7b::_internal_hilowbeampushswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_HilowbeampushswtstsType >(hilowbeampushswtsts_);
}
inline ::apollo::canbus::Scmsts7b_HilowbeampushswtstsType Scmsts7b::hilowbeampushswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.hilowbeampushswtsts)
  return _internal_hilowbeampushswtsts();
}
inline void Scmsts7b::_internal_set_hilowbeampushswtsts(::apollo::canbus::Scmsts7b_HilowbeampushswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_HilowbeampushswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  hilowbeampushswtsts_ = value;
}
inline void Scmsts7b::set_hilowbeampushswtsts(::apollo::canbus::Scmsts7b_HilowbeampushswtstsType value) {
  _internal_set_hilowbeampushswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.hilowbeampushswtsts)
}

// optional .apollo.canbus.Scmsts7b.FrntwiprswtstsType frntwiprswtsts = 3;
inline bool Scmsts7b::_internal_has_frntwiprswtsts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Scmsts7b::has_frntwiprswtsts() const {
  return _internal_has_frntwiprswtsts();
}
inline void Scmsts7b::clear_frntwiprswtsts() {
  frntwiprswtsts_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::canbus::Scmsts7b_FrntwiprswtstsType Scmsts7b::_internal_frntwiprswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_FrntwiprswtstsType >(frntwiprswtsts_);
}
inline ::apollo::canbus::Scmsts7b_FrntwiprswtstsType Scmsts7b::frntwiprswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.frntwiprswtsts)
  return _internal_frntwiprswtsts();
}
inline void Scmsts7b::_internal_set_frntwiprswtsts(::apollo::canbus::Scmsts7b_FrntwiprswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_FrntwiprswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  frntwiprswtsts_ = value;
}
inline void Scmsts7b::set_frntwiprswtsts(::apollo::canbus::Scmsts7b_FrntwiprswtstsType value) {
  _internal_set_frntwiprswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.frntwiprswtsts)
}

// optional .apollo.canbus.Scmsts7b.TurnindcrswtstsType turnindcrswtsts = 4;
inline bool Scmsts7b::_internal_has_turnindcrswtsts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Scmsts7b::has_turnindcrswtsts() const {
  return _internal_has_turnindcrswtsts();
}
inline void Scmsts7b::clear_turnindcrswtsts() {
  turnindcrswtsts_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Scmsts7b_TurnindcrswtstsType Scmsts7b::_internal_turnindcrswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_TurnindcrswtstsType >(turnindcrswtsts_);
}
inline ::apollo::canbus::Scmsts7b_TurnindcrswtstsType Scmsts7b::turnindcrswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.turnindcrswtsts)
  return _internal_turnindcrswtsts();
}
inline void Scmsts7b::_internal_set_turnindcrswtsts(::apollo::canbus::Scmsts7b_TurnindcrswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_TurnindcrswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  turnindcrswtsts_ = value;
}
inline void Scmsts7b::set_turnindcrswtsts(::apollo::canbus::Scmsts7b_TurnindcrswtstsType value) {
  _internal_set_turnindcrswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.turnindcrswtsts)
}

// optional .apollo.canbus.Scmsts7b.FoglipushswtstsType foglipushswtsts = 5;
inline bool Scmsts7b::_internal_has_foglipushswtsts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Scmsts7b::has_foglipushswtsts() const {
  return _internal_has_foglipushswtsts();
}
inline void Scmsts7b::clear_foglipushswtsts() {
  foglipushswtsts_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Scmsts7b_FoglipushswtstsType Scmsts7b::_internal_foglipushswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_FoglipushswtstsType >(foglipushswtsts_);
}
inline ::apollo::canbus::Scmsts7b_FoglipushswtstsType Scmsts7b::foglipushswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.foglipushswtsts)
  return _internal_foglipushswtsts();
}
inline void Scmsts7b::_internal_set_foglipushswtsts(::apollo::canbus::Scmsts7b_FoglipushswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_FoglipushswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  foglipushswtsts_ = value;
}
inline void Scmsts7b::set_foglipushswtsts(::apollo::canbus::Scmsts7b_FoglipushswtstsType value) {
  _internal_set_foglipushswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.foglipushswtsts)
}

// optional .apollo.canbus.Scmsts7b.FrntwiprinterspdType frntwiprinterspd = 6;
inline bool Scmsts7b::_internal_has_frntwiprinterspd() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Scmsts7b::has_frntwiprinterspd() const {
  return _internal_has_frntwiprinterspd();
}
inline void Scmsts7b::clear_frntwiprinterspd() {
  frntwiprinterspd_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Scmsts7b_FrntwiprinterspdType Scmsts7b::_internal_frntwiprinterspd() const {
  return static_cast< ::apollo::canbus::Scmsts7b_FrntwiprinterspdType >(frntwiprinterspd_);
}
inline ::apollo::canbus::Scmsts7b_FrntwiprinterspdType Scmsts7b::frntwiprinterspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.frntwiprinterspd)
  return _internal_frntwiprinterspd();
}
inline void Scmsts7b::_internal_set_frntwiprinterspd(::apollo::canbus::Scmsts7b_FrntwiprinterspdType value) {
  assert(::apollo::canbus::Scmsts7b_FrntwiprinterspdType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  frntwiprinterspd_ = value;
}
inline void Scmsts7b::set_frntwiprinterspd(::apollo::canbus::Scmsts7b_FrntwiprinterspdType value) {
  _internal_set_frntwiprinterspd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.frntwiprinterspd)
}

// optional .apollo.canbus.Scmsts7b.MenuorvoldwnpushswtstsType menuorvoldwnpushswtsts = 7;
inline bool Scmsts7b::_internal_has_menuorvoldwnpushswtsts() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Scmsts7b::has_menuorvoldwnpushswtsts() const {
  return _internal_has_menuorvoldwnpushswtsts();
}
inline void Scmsts7b::clear_menuorvoldwnpushswtsts() {
  menuorvoldwnpushswtsts_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType Scmsts7b::_internal_menuorvoldwnpushswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType >(menuorvoldwnpushswtsts_);
}
inline ::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType Scmsts7b::menuorvoldwnpushswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.menuorvoldwnpushswtsts)
  return _internal_menuorvoldwnpushswtsts();
}
inline void Scmsts7b::_internal_set_menuorvoldwnpushswtsts(::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  menuorvoldwnpushswtsts_ = value;
}
inline void Scmsts7b::set_menuorvoldwnpushswtsts(::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType value) {
  _internal_set_menuorvoldwnpushswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.menuorvoldwnpushswtsts)
}

// optional .apollo.canbus.Scmsts7b.AccspdincorresuswtstsType accspdincorresuswtsts = 8;
inline bool Scmsts7b::_internal_has_accspdincorresuswtsts() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Scmsts7b::has_accspdincorresuswtsts() const {
  return _internal_has_accspdincorresuswtsts();
}
inline void Scmsts7b::clear_accspdincorresuswtsts() {
  accspdincorresuswtsts_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType Scmsts7b::_internal_accspdincorresuswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType >(accspdincorresuswtsts_);
}
inline ::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType Scmsts7b::accspdincorresuswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.accspdincorresuswtsts)
  return _internal_accspdincorresuswtsts();
}
inline void Scmsts7b::_internal_set_accspdincorresuswtsts(::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  accspdincorresuswtsts_ = value;
}
inline void Scmsts7b::set_accspdincorresuswtsts(::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType value) {
  _internal_set_accspdincorresuswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.accspdincorresuswtsts)
}

// optional .apollo.canbus.Scmsts7b.AcctimegapincswtstsType acctimegapincswtsts = 9;
inline bool Scmsts7b::_internal_has_acctimegapincswtsts() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Scmsts7b::has_acctimegapincswtsts() const {
  return _internal_has_acctimegapincswtsts();
}
inline void Scmsts7b::clear_acctimegapincswtsts() {
  acctimegapincswtsts_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Scmsts7b_AcctimegapincswtstsType Scmsts7b::_internal_acctimegapincswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_AcctimegapincswtstsType >(acctimegapincswtsts_);
}
inline ::apollo::canbus::Scmsts7b_AcctimegapincswtstsType Scmsts7b::acctimegapincswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.acctimegapincswtsts)
  return _internal_acctimegapincswtsts();
}
inline void Scmsts7b::_internal_set_acctimegapincswtsts(::apollo::canbus::Scmsts7b_AcctimegapincswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_AcctimegapincswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  acctimegapincswtsts_ = value;
}
inline void Scmsts7b::set_acctimegapincswtsts(::apollo::canbus::Scmsts7b_AcctimegapincswtstsType value) {
  _internal_set_acctimegapincswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.acctimegapincswtsts)
}

// optional .apollo.canbus.Scmsts7b.SelnpushswtstsType selnpushswtsts = 10;
inline bool Scmsts7b::_internal_has_selnpushswtsts() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Scmsts7b::has_selnpushswtsts() const {
  return _internal_has_selnpushswtsts();
}
inline void Scmsts7b::clear_selnpushswtsts() {
  selnpushswtsts_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Scmsts7b_SelnpushswtstsType Scmsts7b::_internal_selnpushswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_SelnpushswtstsType >(selnpushswtsts_);
}
inline ::apollo::canbus::Scmsts7b_SelnpushswtstsType Scmsts7b::selnpushswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.selnpushswtsts)
  return _internal_selnpushswtsts();
}
inline void Scmsts7b::_internal_set_selnpushswtsts(::apollo::canbus::Scmsts7b_SelnpushswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_SelnpushswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  selnpushswtsts_ = value;
}
inline void Scmsts7b::set_selnpushswtsts(::apollo::canbus::Scmsts7b_SelnpushswtstsType value) {
  _internal_set_selnpushswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.selnpushswtsts)
}

// optional .apollo.canbus.Scmsts7b.ModetogdecswtstsType modetogdecswtsts = 11;
inline bool Scmsts7b::_internal_has_modetogdecswtsts() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Scmsts7b::has_modetogdecswtsts() const {
  return _internal_has_modetogdecswtsts();
}
inline void Scmsts7b::clear_modetogdecswtsts() {
  modetogdecswtsts_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::apollo::canbus::Scmsts7b_ModetogdecswtstsType Scmsts7b::_internal_modetogdecswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_ModetogdecswtstsType >(modetogdecswtsts_);
}
inline ::apollo::canbus::Scmsts7b_ModetogdecswtstsType Scmsts7b::modetogdecswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.modetogdecswtsts)
  return _internal_modetogdecswtsts();
}
inline void Scmsts7b::_internal_set_modetogdecswtsts(::apollo::canbus::Scmsts7b_ModetogdecswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_ModetogdecswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  modetogdecswtsts_ = value;
}
inline void Scmsts7b::set_modetogdecswtsts(::apollo::canbus::Scmsts7b_ModetogdecswtstsType value) {
  _internal_set_modetogdecswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.modetogdecswtsts)
}

// optional .apollo.canbus.Scmsts7b.ModetogincswtstsType modetogincswtsts = 12;
inline bool Scmsts7b::_internal_has_modetogincswtsts() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Scmsts7b::has_modetogincswtsts() const {
  return _internal_has_modetogincswtsts();
}
inline void Scmsts7b::clear_modetogincswtsts() {
  modetogincswtsts_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::canbus::Scmsts7b_ModetogincswtstsType Scmsts7b::_internal_modetogincswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_ModetogincswtstsType >(modetogincswtsts_);
}
inline ::apollo::canbus::Scmsts7b_ModetogincswtstsType Scmsts7b::modetogincswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.modetogincswtsts)
  return _internal_modetogincswtsts();
}
inline void Scmsts7b::_internal_set_modetogincswtsts(::apollo::canbus::Scmsts7b_ModetogincswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_ModetogincswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  modetogincswtsts_ = value;
}
inline void Scmsts7b::set_modetogincswtsts(::apollo::canbus::Scmsts7b_ModetogincswtstsType value) {
  _internal_set_modetogincswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.modetogincswtsts)
}

// optional .apollo.canbus.Scmsts7b.MenupushswtstsType menupushswtsts = 13;
inline bool Scmsts7b::_internal_has_menupushswtsts() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Scmsts7b::has_menupushswtsts() const {
  return _internal_has_menupushswtsts();
}
inline void Scmsts7b::clear_menupushswtsts() {
  menupushswtsts_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::apollo::canbus::Scmsts7b_MenupushswtstsType Scmsts7b::_internal_menupushswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_MenupushswtstsType >(menupushswtsts_);
}
inline ::apollo::canbus::Scmsts7b_MenupushswtstsType Scmsts7b::menupushswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.menupushswtsts)
  return _internal_menupushswtsts();
}
inline void Scmsts7b::_internal_set_menupushswtsts(::apollo::canbus::Scmsts7b_MenupushswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_MenupushswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  menupushswtsts_ = value;
}
inline void Scmsts7b::set_menupushswtsts(::apollo::canbus::Scmsts7b_MenupushswtstsType value) {
  _internal_set_menupushswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.menupushswtsts)
}

// optional .apollo.canbus.Scmsts7b.SwcfailstsType swcfailsts = 14;
inline bool Scmsts7b::_internal_has_swcfailsts() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Scmsts7b::has_swcfailsts() const {
  return _internal_has_swcfailsts();
}
inline void Scmsts7b::clear_swcfailsts() {
  swcfailsts_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::canbus::Scmsts7b_SwcfailstsType Scmsts7b::_internal_swcfailsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_SwcfailstsType >(swcfailsts_);
}
inline ::apollo::canbus::Scmsts7b_SwcfailstsType Scmsts7b::swcfailsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.swcfailsts)
  return _internal_swcfailsts();
}
inline void Scmsts7b::_internal_set_swcfailsts(::apollo::canbus::Scmsts7b_SwcfailstsType value) {
  assert(::apollo::canbus::Scmsts7b_SwcfailstsType_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  swcfailsts_ = value;
}
inline void Scmsts7b::set_swcfailsts(::apollo::canbus::Scmsts7b_SwcfailstsType value) {
  _internal_set_swcfailsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.swcfailsts)
}

// optional .apollo.canbus.Scmsts7b.AccspddecswtstsType accspddecswtsts = 15;
inline bool Scmsts7b::_internal_has_accspddecswtsts() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Scmsts7b::has_accspddecswtsts() const {
  return _internal_has_accspddecswtsts();
}
inline void Scmsts7b::clear_accspddecswtsts() {
  accspddecswtsts_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::apollo::canbus::Scmsts7b_AccspddecswtstsType Scmsts7b::_internal_accspddecswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_AccspddecswtstsType >(accspddecswtsts_);
}
inline ::apollo::canbus::Scmsts7b_AccspddecswtstsType Scmsts7b::accspddecswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.accspddecswtsts)
  return _internal_accspddecswtsts();
}
inline void Scmsts7b::_internal_set_accspddecswtsts(::apollo::canbus::Scmsts7b_AccspddecswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_AccspddecswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  accspddecswtsts_ = value;
}
inline void Scmsts7b::set_accspddecswtsts(::apollo::canbus::Scmsts7b_AccspddecswtstsType value) {
  _internal_set_accspddecswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.accspddecswtsts)
}

// optional int32 scmcrc = 16;
inline bool Scmsts7b::_internal_has_scmcrc() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Scmsts7b::has_scmcrc() const {
  return _internal_has_scmcrc();
}
inline void Scmsts7b::clear_scmcrc() {
  scmcrc_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scmsts7b::_internal_scmcrc() const {
  return scmcrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scmsts7b::scmcrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.scmcrc)
  return _internal_scmcrc();
}
inline void Scmsts7b::_internal_set_scmcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  scmcrc_ = value;
}
inline void Scmsts7b::set_scmcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scmcrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.scmcrc)
}

// optional .apollo.canbus.Scmsts7b.MenulepushswtstsType menulepushswtsts = 17;
inline bool Scmsts7b::_internal_has_menulepushswtsts() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Scmsts7b::has_menulepushswtsts() const {
  return _internal_has_menulepushswtsts();
}
inline void Scmsts7b::clear_menulepushswtsts() {
  menulepushswtsts_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::apollo::canbus::Scmsts7b_MenulepushswtstsType Scmsts7b::_internal_menulepushswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_MenulepushswtstsType >(menulepushswtsts_);
}
inline ::apollo::canbus::Scmsts7b_MenulepushswtstsType Scmsts7b::menulepushswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.menulepushswtsts)
  return _internal_menulepushswtsts();
}
inline void Scmsts7b::_internal_set_menulepushswtsts(::apollo::canbus::Scmsts7b_MenulepushswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_MenulepushswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  menulepushswtsts_ = value;
}
inline void Scmsts7b::set_menulepushswtsts(::apollo::canbus::Scmsts7b_MenulepushswtstsType value) {
  _internal_set_menulepushswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.menulepushswtsts)
}

// optional .apollo.canbus.Scmsts7b.MenuorvoluppushswtstsType menuorvoluppushswtsts = 18;
inline bool Scmsts7b::_internal_has_menuorvoluppushswtsts() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Scmsts7b::has_menuorvoluppushswtsts() const {
  return _internal_has_menuorvoluppushswtsts();
}
inline void Scmsts7b::clear_menuorvoluppushswtsts() {
  menuorvoluppushswtsts_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType Scmsts7b::_internal_menuorvoluppushswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType >(menuorvoluppushswtsts_);
}
inline ::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType Scmsts7b::menuorvoluppushswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.menuorvoluppushswtsts)
  return _internal_menuorvoluppushswtsts();
}
inline void Scmsts7b::_internal_set_menuorvoluppushswtsts(::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  menuorvoluppushswtsts_ = value;
}
inline void Scmsts7b::set_menuorvoluppushswtsts(::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType value) {
  _internal_set_menuorvoluppushswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.menuorvoluppushswtsts)
}

// optional int32 scmmsgcntr = 19;
inline bool Scmsts7b::_internal_has_scmmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Scmsts7b::has_scmmsgcntr() const {
  return _internal_has_scmmsgcntr();
}
inline void Scmsts7b::clear_scmmsgcntr() {
  scmmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scmsts7b::_internal_scmmsgcntr() const {
  return scmmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Scmsts7b::scmmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.scmmsgcntr)
  return _internal_scmmsgcntr();
}
inline void Scmsts7b::_internal_set_scmmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  scmmsgcntr_ = value;
}
inline void Scmsts7b::set_scmmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scmmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.scmmsgcntr)
}

// optional .apollo.canbus.Scmsts7b.AcctimegapdecswtstsType acctimegapdecswtsts = 20;
inline bool Scmsts7b::_internal_has_acctimegapdecswtsts() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Scmsts7b::has_acctimegapdecswtsts() const {
  return _internal_has_acctimegapdecswtsts();
}
inline void Scmsts7b::clear_acctimegapdecswtsts() {
  acctimegapdecswtsts_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType Scmsts7b::_internal_acctimegapdecswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType >(acctimegapdecswtsts_);
}
inline ::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType Scmsts7b::acctimegapdecswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.acctimegapdecswtsts)
  return _internal_acctimegapdecswtsts();
}
inline void Scmsts7b::_internal_set_acctimegapdecswtsts(::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  acctimegapdecswtsts_ = value;
}
inline void Scmsts7b::set_acctimegapdecswtsts(::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType value) {
  _internal_set_acctimegapdecswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.acctimegapdecswtsts)
}

// optional .apollo.canbus.Scmsts7b.MenuripushswtstsType menuripushswtsts = 21;
inline bool Scmsts7b::_internal_has_menuripushswtsts() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Scmsts7b::has_menuripushswtsts() const {
  return _internal_has_menuripushswtsts();
}
inline void Scmsts7b::clear_menuripushswtsts() {
  menuripushswtsts_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::apollo::canbus::Scmsts7b_MenuripushswtstsType Scmsts7b::_internal_menuripushswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_MenuripushswtstsType >(menuripushswtsts_);
}
inline ::apollo::canbus::Scmsts7b_MenuripushswtstsType Scmsts7b::menuripushswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.menuripushswtsts)
  return _internal_menuripushswtsts();
}
inline void Scmsts7b::_internal_set_menuripushswtsts(::apollo::canbus::Scmsts7b_MenuripushswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_MenuripushswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  menuripushswtsts_ = value;
}
inline void Scmsts7b::set_menuripushswtsts(::apollo::canbus::Scmsts7b_MenuripushswtstsType value) {
  _internal_set_menuripushswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.menuripushswtsts)
}

// optional .apollo.canbus.Scmsts7b.AccsetswtstsType accsetswtsts = 22;
inline bool Scmsts7b::_internal_has_accsetswtsts() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Scmsts7b::has_accsetswtsts() const {
  return _internal_has_accsetswtsts();
}
inline void Scmsts7b::clear_accsetswtsts() {
  accsetswtsts_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::apollo::canbus::Scmsts7b_AccsetswtstsType Scmsts7b::_internal_accsetswtsts() const {
  return static_cast< ::apollo::canbus::Scmsts7b_AccsetswtstsType >(accsetswtsts_);
}
inline ::apollo::canbus::Scmsts7b_AccsetswtstsType Scmsts7b::accsetswtsts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scmsts7b.accsetswtsts)
  return _internal_accsetswtsts();
}
inline void Scmsts7b::_internal_set_accsetswtsts(::apollo::canbus::Scmsts7b_AccsetswtstsType value) {
  assert(::apollo::canbus::Scmsts7b_AccsetswtstsType_IsValid(value));
  _has_bits_[0] |= 0x00200000u;
  accsetswtsts_ = value;
}
inline void Scmsts7b::set_accsetswtsts(::apollo::canbus::Scmsts7b_AccsetswtstsType value) {
  _internal_set_accsetswtsts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Scmsts7b.accsetswtsts)
}

// -------------------------------------------------------------------

// Accreq7f

// optional .apollo.canbus.Accreq7f.AccdrvoffType accdrvoff = 1;
inline bool Accreq7f::_internal_has_accdrvoff() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Accreq7f::has_accdrvoff() const {
  return _internal_has_accdrvoff();
}
inline void Accreq7f::clear_accdrvoff() {
  accdrvoff_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Accreq7f_AccdrvoffType Accreq7f::_internal_accdrvoff() const {
  return static_cast< ::apollo::canbus::Accreq7f_AccdrvoffType >(accdrvoff_);
}
inline ::apollo::canbus::Accreq7f_AccdrvoffType Accreq7f::accdrvoff() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.accdrvoff)
  return _internal_accdrvoff();
}
inline void Accreq7f::_internal_set_accdrvoff(::apollo::canbus::Accreq7f_AccdrvoffType value) {
  assert(::apollo::canbus::Accreq7f_AccdrvoffType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  accdrvoff_ = value;
}
inline void Accreq7f::set_accdrvoff(::apollo::canbus::Accreq7f_AccdrvoffType value) {
  _internal_set_accdrvoff(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.accdrvoff)
}

// optional .apollo.canbus.Accreq7f.AccdestopType accdestop = 2;
inline bool Accreq7f::_internal_has_accdestop() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Accreq7f::has_accdestop() const {
  return _internal_has_accdestop();
}
inline void Accreq7f::clear_accdestop() {
  accdestop_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Accreq7f_AccdestopType Accreq7f::_internal_accdestop() const {
  return static_cast< ::apollo::canbus::Accreq7f_AccdestopType >(accdestop_);
}
inline ::apollo::canbus::Accreq7f_AccdestopType Accreq7f::accdestop() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.accdestop)
  return _internal_accdestop();
}
inline void Accreq7f::_internal_set_accdestop(::apollo::canbus::Accreq7f_AccdestopType value) {
  assert(::apollo::canbus::Accreq7f_AccdestopType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  accdestop_ = value;
}
inline void Accreq7f::set_accdestop(::apollo::canbus::Accreq7f_AccdestopType value) {
  _internal_set_accdestop(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.accdestop)
}

// optional double accmaxjerk = 3;
inline bool Accreq7f::_internal_has_accmaxjerk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Accreq7f::has_accmaxjerk() const {
  return _internal_has_accmaxjerk();
}
inline void Accreq7f::clear_accmaxjerk() {
  accmaxjerk_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Accreq7f::_internal_accmaxjerk() const {
  return accmaxjerk_;
}
inline double Accreq7f::accmaxjerk() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.accmaxjerk)
  return _internal_accmaxjerk();
}
inline void Accreq7f::_internal_set_accmaxjerk(double value) {
  _has_bits_[0] |= 0x00000004u;
  accmaxjerk_ = value;
}
inline void Accreq7f::set_accmaxjerk(double value) {
  _internal_set_accmaxjerk(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.accmaxjerk)
}

// optional double accminjerk = 4;
inline bool Accreq7f::_internal_has_accminjerk() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Accreq7f::has_accminjerk() const {
  return _internal_has_accminjerk();
}
inline void Accreq7f::clear_accminjerk() {
  accminjerk_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Accreq7f::_internal_accminjerk() const {
  return accminjerk_;
}
inline double Accreq7f::accminjerk() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.accminjerk)
  return _internal_accminjerk();
}
inline void Accreq7f::_internal_set_accminjerk(double value) {
  _has_bits_[0] |= 0x00000008u;
  accminjerk_ = value;
}
inline void Accreq7f::set_accminjerk(double value) {
  _internal_set_accminjerk(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.accminjerk)
}

// optional .apollo.canbus.Accreq7f.AccmodeType accmode = 5;
inline bool Accreq7f::_internal_has_accmode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Accreq7f::has_accmode() const {
  return _internal_has_accmode();
}
inline void Accreq7f::clear_accmode() {
  accmode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Accreq7f_AccmodeType Accreq7f::_internal_accmode() const {
  return static_cast< ::apollo::canbus::Accreq7f_AccmodeType >(accmode_);
}
inline ::apollo::canbus::Accreq7f_AccmodeType Accreq7f::accmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.accmode)
  return _internal_accmode();
}
inline void Accreq7f::_internal_set_accmode(::apollo::canbus::Accreq7f_AccmodeType value) {
  assert(::apollo::canbus::Accreq7f_AccmodeType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  accmode_ = value;
}
inline void Accreq7f::set_accmode(::apollo::canbus::Accreq7f_AccmodeType value) {
  _internal_set_accmode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.accmode)
}

// optional double acccomforlow = 6;
inline bool Accreq7f::_internal_has_acccomforlow() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Accreq7f::has_acccomforlow() const {
  return _internal_has_acccomforlow();
}
inline void Accreq7f::clear_acccomforlow() {
  acccomforlow_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Accreq7f::_internal_acccomforlow() const {
  return acccomforlow_;
}
inline double Accreq7f::acccomforlow() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.acccomforlow)
  return _internal_acccomforlow();
}
inline void Accreq7f::_internal_set_acccomforlow(double value) {
  _has_bits_[0] |= 0x00000010u;
  acccomforlow_ = value;
}
inline void Accreq7f::set_acccomforlow(double value) {
  _internal_set_acccomforlow(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.acccomforlow)
}

// optional double acccomforup = 7;
inline bool Accreq7f::_internal_has_acccomforup() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Accreq7f::has_acccomforup() const {
  return _internal_has_acccomforup();
}
inline void Accreq7f::clear_acccomforup() {
  acccomforup_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Accreq7f::_internal_acccomforup() const {
  return acccomforup_;
}
inline double Accreq7f::acccomforup() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.acccomforup)
  return _internal_acccomforup();
}
inline void Accreq7f::_internal_set_acccomforup(double value) {
  _has_bits_[0] |= 0x00000080u;
  acccomforup_ = value;
}
inline void Accreq7f::set_acccomforup(double value) {
  _internal_set_acccomforup(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.acccomforup)
}

// optional .apollo.canbus.Accreq7f.AcchvydecelType acchvydecel = 8;
inline bool Accreq7f::_internal_has_acchvydecel() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Accreq7f::has_acchvydecel() const {
  return _internal_has_acchvydecel();
}
inline void Accreq7f::clear_acchvydecel() {
  acchvydecel_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Accreq7f_AcchvydecelType Accreq7f::_internal_acchvydecel() const {
  return static_cast< ::apollo::canbus::Accreq7f_AcchvydecelType >(acchvydecel_);
}
inline ::apollo::canbus::Accreq7f_AcchvydecelType Accreq7f::acchvydecel() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.acchvydecel)
  return _internal_acchvydecel();
}
inline void Accreq7f::_internal_set_acchvydecel(::apollo::canbus::Accreq7f_AcchvydecelType value) {
  assert(::apollo::canbus::Accreq7f_AcchvydecelType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  acchvydecel_ = value;
}
inline void Accreq7f::set_acchvydecel(::apollo::canbus::Accreq7f_AcchvydecelType value) {
  _internal_set_acchvydecel(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.acchvydecel)
}

// optional .apollo.canbus.Accreq7f.AccheavymodeType accheavymode = 9;
inline bool Accreq7f::_internal_has_accheavymode() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Accreq7f::has_accheavymode() const {
  return _internal_has_accheavymode();
}
inline void Accreq7f::clear_accheavymode() {
  accheavymode_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Accreq7f_AccheavymodeType Accreq7f::_internal_accheavymode() const {
  return static_cast< ::apollo::canbus::Accreq7f_AccheavymodeType >(accheavymode_);
}
inline ::apollo::canbus::Accreq7f_AccheavymodeType Accreq7f::accheavymode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.accheavymode)
  return _internal_accheavymode();
}
inline void Accreq7f::_internal_set_accheavymode(::apollo::canbus::Accreq7f_AccheavymodeType value) {
  assert(::apollo::canbus::Accreq7f_AccheavymodeType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  accheavymode_ = value;
}
inline void Accreq7f::set_accheavymode(::apollo::canbus::Accreq7f_AccheavymodeType value) {
  _internal_set_accheavymode(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.accheavymode)
}

// optional double acctara = 10;
inline bool Accreq7f::_internal_has_acctara() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Accreq7f::has_acctara() const {
  return _internal_has_acctara();
}
inline void Accreq7f::clear_acctara() {
  acctara_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Accreq7f::_internal_acctara() const {
  return acctara_;
}
inline double Accreq7f::acctara() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.acctara)
  return _internal_acctara();
}
inline void Accreq7f::_internal_set_acctara(double value) {
  _has_bits_[0] |= 0x00000100u;
  acctara_ = value;
}
inline void Accreq7f::set_acctara(double value) {
  _internal_set_acctara(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.acctara)
}

// optional int32 accmsgcntr = 11;
inline bool Accreq7f::_internal_has_accmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Accreq7f::has_accmsgcntr() const {
  return _internal_has_accmsgcntr();
}
inline void Accreq7f::clear_accmsgcntr() {
  accmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Accreq7f::_internal_accmsgcntr() const {
  return accmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Accreq7f::accmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.accmsgcntr)
  return _internal_accmsgcntr();
}
inline void Accreq7f::_internal_set_accmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  accmsgcntr_ = value;
}
inline void Accreq7f::set_accmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.accmsgcntr)
}

// optional int32 acccrc = 12;
inline bool Accreq7f::_internal_has_acccrc() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Accreq7f::has_acccrc() const {
  return _internal_has_acccrc();
}
inline void Accreq7f::clear_acccrc() {
  acccrc_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Accreq7f::_internal_acccrc() const {
  return acccrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Accreq7f::acccrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Accreq7f.acccrc)
  return _internal_acccrc();
}
inline void Accreq7f::_internal_set_acccrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  acccrc_ = value;
}
inline void Accreq7f::set_acccrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_acccrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Accreq7f.acccrc)
}

// -------------------------------------------------------------------

// Motorsts0286

// optional int32 motor02msgcntr = 1;
inline bool Motorsts0286::_internal_has_motor02msgcntr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Motorsts0286::has_motor02msgcntr() const {
  return _internal_has_motor02msgcntr();
}
inline void Motorsts0286::clear_motor02msgcntr() {
  motor02msgcntr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts0286::_internal_motor02msgcntr() const {
  return motor02msgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts0286::motor02msgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts0286.motor02msgcntr)
  return _internal_motor02msgcntr();
}
inline void Motorsts0286::_internal_set_motor02msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  motor02msgcntr_ = value;
}
inline void Motorsts0286::set_motor02msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_motor02msgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts0286.motor02msgcntr)
}

// optional int32 motor02crc = 2;
inline bool Motorsts0286::_internal_has_motor02crc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Motorsts0286::has_motor02crc() const {
  return _internal_has_motor02crc();
}
inline void Motorsts0286::clear_motor02crc() {
  motor02crc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts0286::_internal_motor02crc() const {
  return motor02crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts0286::motor02crc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts0286.motor02crc)
  return _internal_motor02crc();
}
inline void Motorsts0286::_internal_set_motor02crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  motor02crc_ = value;
}
inline void Motorsts0286::set_motor02crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_motor02crc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts0286.motor02crc)
}

// optional .apollo.canbus.Motorsts0286.FrntmottqvalidType frntmottqvalid = 3;
inline bool Motorsts0286::_internal_has_frntmottqvalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Motorsts0286::has_frntmottqvalid() const {
  return _internal_has_frntmottqvalid();
}
inline void Motorsts0286::clear_frntmottqvalid() {
  frntmottqvalid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Motorsts0286_FrntmottqvalidType Motorsts0286::_internal_frntmottqvalid() const {
  return static_cast< ::apollo::canbus::Motorsts0286_FrntmottqvalidType >(frntmottqvalid_);
}
inline ::apollo::canbus::Motorsts0286_FrntmottqvalidType Motorsts0286::frntmottqvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts0286.frntmottqvalid)
  return _internal_frntmottqvalid();
}
inline void Motorsts0286::_internal_set_frntmottqvalid(::apollo::canbus::Motorsts0286_FrntmottqvalidType value) {
  assert(::apollo::canbus::Motorsts0286_FrntmottqvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  frntmottqvalid_ = value;
}
inline void Motorsts0286::set_frntmottqvalid(::apollo::canbus::Motorsts0286_FrntmottqvalidType value) {
  _internal_set_frntmottqvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts0286.frntmottqvalid)
}

// optional double frntmottq = 4;
inline bool Motorsts0286::_internal_has_frntmottq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Motorsts0286::has_frntmottq() const {
  return _internal_has_frntmottq();
}
inline void Motorsts0286::clear_frntmottq() {
  frntmottq_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Motorsts0286::_internal_frntmottq() const {
  return frntmottq_;
}
inline double Motorsts0286::frntmottq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts0286.frntmottq)
  return _internal_frntmottq();
}
inline void Motorsts0286::_internal_set_frntmottq(double value) {
  _has_bits_[0] |= 0x00000004u;
  frntmottq_ = value;
}
inline void Motorsts0286::set_frntmottq(double value) {
  _internal_set_frntmottq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts0286.frntmottq)
}

// optional .apollo.canbus.Motorsts0286.FrntmotspdvalidType frntmotspdvalid = 5;
inline bool Motorsts0286::_internal_has_frntmotspdvalid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Motorsts0286::has_frntmotspdvalid() const {
  return _internal_has_frntmotspdvalid();
}
inline void Motorsts0286::clear_frntmotspdvalid() {
  frntmotspdvalid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Motorsts0286_FrntmotspdvalidType Motorsts0286::_internal_frntmotspdvalid() const {
  return static_cast< ::apollo::canbus::Motorsts0286_FrntmotspdvalidType >(frntmotspdvalid_);
}
inline ::apollo::canbus::Motorsts0286_FrntmotspdvalidType Motorsts0286::frntmotspdvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts0286.frntmotspdvalid)
  return _internal_frntmotspdvalid();
}
inline void Motorsts0286::_internal_set_frntmotspdvalid(::apollo::canbus::Motorsts0286_FrntmotspdvalidType value) {
  assert(::apollo::canbus::Motorsts0286_FrntmotspdvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  frntmotspdvalid_ = value;
}
inline void Motorsts0286::set_frntmotspdvalid(::apollo::canbus::Motorsts0286_FrntmotspdvalidType value) {
  _internal_set_frntmotspdvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts0286.frntmotspdvalid)
}

// optional int32 frntmotspd = 6;
inline bool Motorsts0286::_internal_has_frntmotspd() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Motorsts0286::has_frntmotspd() const {
  return _internal_has_frntmotspd();
}
inline void Motorsts0286::clear_frntmotspd() {
  frntmotspd_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts0286::_internal_frntmotspd() const {
  return frntmotspd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts0286::frntmotspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts0286.frntmotspd)
  return _internal_frntmotspd();
}
inline void Motorsts0286::_internal_set_frntmotspd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  frntmotspd_ = value;
}
inline void Motorsts0286::set_frntmotspd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frntmotspd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts0286.frntmotspd)
}

// -------------------------------------------------------------------

// Motorsts018e

// optional int32 motor01msgcntr = 1;
inline bool Motorsts018e::_internal_has_motor01msgcntr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Motorsts018e::has_motor01msgcntr() const {
  return _internal_has_motor01msgcntr();
}
inline void Motorsts018e::clear_motor01msgcntr() {
  motor01msgcntr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts018e::_internal_motor01msgcntr() const {
  return motor01msgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts018e::motor01msgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts018e.motor01msgcntr)
  return _internal_motor01msgcntr();
}
inline void Motorsts018e::_internal_set_motor01msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  motor01msgcntr_ = value;
}
inline void Motorsts018e::set_motor01msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_motor01msgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts018e.motor01msgcntr)
}

// optional int32 motor01crc = 2;
inline bool Motorsts018e::_internal_has_motor01crc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Motorsts018e::has_motor01crc() const {
  return _internal_has_motor01crc();
}
inline void Motorsts018e::clear_motor01crc() {
  motor01crc_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts018e::_internal_motor01crc() const {
  return motor01crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts018e::motor01crc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts018e.motor01crc)
  return _internal_motor01crc();
}
inline void Motorsts018e::_internal_set_motor01crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  motor01crc_ = value;
}
inline void Motorsts018e::set_motor01crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_motor01crc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts018e.motor01crc)
}

// optional .apollo.canbus.Motorsts018e.RearmottqvalidType rearmottqvalid = 3;
inline bool Motorsts018e::_internal_has_rearmottqvalid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Motorsts018e::has_rearmottqvalid() const {
  return _internal_has_rearmottqvalid();
}
inline void Motorsts018e::clear_rearmottqvalid() {
  rearmottqvalid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Motorsts018e_RearmottqvalidType Motorsts018e::_internal_rearmottqvalid() const {
  return static_cast< ::apollo::canbus::Motorsts018e_RearmottqvalidType >(rearmottqvalid_);
}
inline ::apollo::canbus::Motorsts018e_RearmottqvalidType Motorsts018e::rearmottqvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts018e.rearmottqvalid)
  return _internal_rearmottqvalid();
}
inline void Motorsts018e::_internal_set_rearmottqvalid(::apollo::canbus::Motorsts018e_RearmottqvalidType value) {
  assert(::apollo::canbus::Motorsts018e_RearmottqvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  rearmottqvalid_ = value;
}
inline void Motorsts018e::set_rearmottqvalid(::apollo::canbus::Motorsts018e_RearmottqvalidType value) {
  _internal_set_rearmottqvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts018e.rearmottqvalid)
}

// optional double rearmottq = 4;
inline bool Motorsts018e::_internal_has_rearmottq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Motorsts018e::has_rearmottq() const {
  return _internal_has_rearmottq();
}
inline void Motorsts018e::clear_rearmottq() {
  rearmottq_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Motorsts018e::_internal_rearmottq() const {
  return rearmottq_;
}
inline double Motorsts018e::rearmottq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts018e.rearmottq)
  return _internal_rearmottq();
}
inline void Motorsts018e::_internal_set_rearmottq(double value) {
  _has_bits_[0] |= 0x00000004u;
  rearmottq_ = value;
}
inline void Motorsts018e::set_rearmottq(double value) {
  _internal_set_rearmottq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts018e.rearmottq)
}

// optional .apollo.canbus.Motorsts018e.RearmotspdvalidType rearmotspdvalid = 5;
inline bool Motorsts018e::_internal_has_rearmotspdvalid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Motorsts018e::has_rearmotspdvalid() const {
  return _internal_has_rearmotspdvalid();
}
inline void Motorsts018e::clear_rearmotspdvalid() {
  rearmotspdvalid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Motorsts018e_RearmotspdvalidType Motorsts018e::_internal_rearmotspdvalid() const {
  return static_cast< ::apollo::canbus::Motorsts018e_RearmotspdvalidType >(rearmotspdvalid_);
}
inline ::apollo::canbus::Motorsts018e_RearmotspdvalidType Motorsts018e::rearmotspdvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts018e.rearmotspdvalid)
  return _internal_rearmotspdvalid();
}
inline void Motorsts018e::_internal_set_rearmotspdvalid(::apollo::canbus::Motorsts018e_RearmotspdvalidType value) {
  assert(::apollo::canbus::Motorsts018e_RearmotspdvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  rearmotspdvalid_ = value;
}
inline void Motorsts018e::set_rearmotspdvalid(::apollo::canbus::Motorsts018e_RearmotspdvalidType value) {
  _internal_set_rearmotspdvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts018e.rearmotspdvalid)
}

// optional int32 rearmotspd = 6;
inline bool Motorsts018e::_internal_has_rearmotspd() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Motorsts018e::has_rearmotspd() const {
  return _internal_has_rearmotspd();
}
inline void Motorsts018e::clear_rearmotspd() {
  rearmotspd_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts018e::_internal_rearmotspd() const {
  return rearmotspd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Motorsts018e::rearmotspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Motorsts018e.rearmotspd)
  return _internal_rearmotspd();
}
inline void Motorsts018e::_internal_set_rearmotspd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  rearmotspd_ = value;
}
inline void Motorsts018e::set_rearmotspd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rearmotspd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Motorsts018e.rearmotspd)
}

// -------------------------------------------------------------------

// Epsreqc6

// optional double epspaireq = 1;
inline bool Epsreqc6::_internal_has_epspaireq() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Epsreqc6::has_epspaireq() const {
  return _internal_has_epspaireq();
}
inline void Epsreqc6::clear_epspaireq() {
  epspaireq_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Epsreqc6::_internal_epspaireq() const {
  return epspaireq_;
}
inline double Epsreqc6::epspaireq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.epspaireq)
  return _internal_epspaireq();
}
inline void Epsreqc6::_internal_set_epspaireq(double value) {
  _has_bits_[0] |= 0x00000001u;
  epspaireq_ = value;
}
inline void Epsreqc6::set_epspaireq(double value) {
  _internal_set_epspaireq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.epspaireq)
}

// optional double epsdaireq = 2;
inline bool Epsreqc6::_internal_has_epsdaireq() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Epsreqc6::has_epsdaireq() const {
  return _internal_has_epsdaireq();
}
inline void Epsreqc6::clear_epsdaireq() {
  epsdaireq_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Epsreqc6::_internal_epsdaireq() const {
  return epsdaireq_;
}
inline double Epsreqc6::epsdaireq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.epsdaireq)
  return _internal_epsdaireq();
}
inline void Epsreqc6::_internal_set_epsdaireq(double value) {
  _has_bits_[0] |= 0x00000002u;
  epsdaireq_ = value;
}
inline void Epsreqc6::set_epsdaireq(double value) {
  _internal_set_epsdaireq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.epsdaireq)
}

// optional double epstoireq = 3;
inline bool Epsreqc6::_internal_has_epstoireq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Epsreqc6::has_epstoireq() const {
  return _internal_has_epstoireq();
}
inline void Epsreqc6::clear_epstoireq() {
  epstoireq_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Epsreqc6::_internal_epstoireq() const {
  return epstoireq_;
}
inline double Epsreqc6::epstoireq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.epstoireq)
  return _internal_epstoireq();
}
inline void Epsreqc6::_internal_set_epstoireq(double value) {
  _has_bits_[0] |= 0x00000004u;
  epstoireq_ = value;
}
inline void Epsreqc6::set_epstoireq(double value) {
  _internal_set_epstoireq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.epstoireq)
}

// optional .apollo.canbus.Epsreqc6.EpsreqtypType epsreqtyp = 4;
inline bool Epsreqc6::_internal_has_epsreqtyp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Epsreqc6::has_epsreqtyp() const {
  return _internal_has_epsreqtyp();
}
inline void Epsreqc6::clear_epsreqtyp() {
  epsreqtyp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Epsreqc6_EpsreqtypType Epsreqc6::_internal_epsreqtyp() const {
  return static_cast< ::apollo::canbus::Epsreqc6_EpsreqtypType >(epsreqtyp_);
}
inline ::apollo::canbus::Epsreqc6_EpsreqtypType Epsreqc6::epsreqtyp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.epsreqtyp)
  return _internal_epsreqtyp();
}
inline void Epsreqc6::_internal_set_epsreqtyp(::apollo::canbus::Epsreqc6_EpsreqtypType value) {
  assert(::apollo::canbus::Epsreqc6_EpsreqtypType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  epsreqtyp_ = value;
}
inline void Epsreqc6::set_epsreqtyp(::apollo::canbus::Epsreqc6_EpsreqtypType value) {
  _internal_set_epsreqtyp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.epsreqtyp)
}

// optional .apollo.canbus.Epsreqc6.SysvalidType sysvalid = 5;
inline bool Epsreqc6::_internal_has_sysvalid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Epsreqc6::has_sysvalid() const {
  return _internal_has_sysvalid();
}
inline void Epsreqc6::clear_sysvalid() {
  sysvalid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Epsreqc6_SysvalidType Epsreqc6::_internal_sysvalid() const {
  return static_cast< ::apollo::canbus::Epsreqc6_SysvalidType >(sysvalid_);
}
inline ::apollo::canbus::Epsreqc6_SysvalidType Epsreqc6::sysvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.sysvalid)
  return _internal_sysvalid();
}
inline void Epsreqc6::_internal_set_sysvalid(::apollo::canbus::Epsreqc6_SysvalidType value) {
  assert(::apollo::canbus::Epsreqc6_SysvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  sysvalid_ = value;
}
inline void Epsreqc6::set_sysvalid(::apollo::canbus::Epsreqc6_SysvalidType value) {
  _internal_set_sysvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.sysvalid)
}

// optional .apollo.canbus.Epsreqc6.PilotsymType pilotsym = 6;
inline bool Epsreqc6::_internal_has_pilotsym() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Epsreqc6::has_pilotsym() const {
  return _internal_has_pilotsym();
}
inline void Epsreqc6::clear_pilotsym() {
  pilotsym_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Epsreqc6_PilotsymType Epsreqc6::_internal_pilotsym() const {
  return static_cast< ::apollo::canbus::Epsreqc6_PilotsymType >(pilotsym_);
}
inline ::apollo::canbus::Epsreqc6_PilotsymType Epsreqc6::pilotsym() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.pilotsym)
  return _internal_pilotsym();
}
inline void Epsreqc6::_internal_set_pilotsym(::apollo::canbus::Epsreqc6_PilotsymType value) {
  assert(::apollo::canbus::Epsreqc6_PilotsymType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  pilotsym_ = value;
}
inline void Epsreqc6::set_pilotsym(::apollo::canbus::Epsreqc6_PilotsymType value) {
  _internal_set_pilotsym(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.pilotsym)
}

// optional int32 epscrc = 7;
inline bool Epsreqc6::_internal_has_epscrc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Epsreqc6::has_epscrc() const {
  return _internal_has_epscrc();
}
inline void Epsreqc6::clear_epscrc() {
  epscrc_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsreqc6::_internal_epscrc() const {
  return epscrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsreqc6::epscrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.epscrc)
  return _internal_epscrc();
}
inline void Epsreqc6::_internal_set_epscrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  epscrc_ = value;
}
inline void Epsreqc6::set_epscrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epscrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.epscrc)
}

// optional int32 epsmsgcntr = 8;
inline bool Epsreqc6::_internal_has_epsmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Epsreqc6::has_epsmsgcntr() const {
  return _internal_has_epsmsgcntr();
}
inline void Epsreqc6::clear_epsmsgcntr() {
  epsmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsreqc6::_internal_epsmsgcntr() const {
  return epsmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsreqc6::epsmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.epsmsgcntr)
  return _internal_epsmsgcntr();
}
inline void Epsreqc6::_internal_set_epsmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  epsmsgcntr_ = value;
}
inline void Epsreqc6::set_epsmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epsmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.epsmsgcntr)
}

// optional .apollo.canbus.Epsreqc6.AdcaccsymType adcaccsym = 9;
inline bool Epsreqc6::_internal_has_adcaccsym() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Epsreqc6::has_adcaccsym() const {
  return _internal_has_adcaccsym();
}
inline void Epsreqc6::clear_adcaccsym() {
  adcaccsym_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::apollo::canbus::Epsreqc6_AdcaccsymType Epsreqc6::_internal_adcaccsym() const {
  return static_cast< ::apollo::canbus::Epsreqc6_AdcaccsymType >(adcaccsym_);
}
inline ::apollo::canbus::Epsreqc6_AdcaccsymType Epsreqc6::adcaccsym() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsreqc6.adcaccsym)
  return _internal_adcaccsym();
}
inline void Epsreqc6::_internal_set_adcaccsym(::apollo::canbus::Epsreqc6_AdcaccsymType value) {
  assert(::apollo::canbus::Epsreqc6_AdcaccsymType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  adcaccsym_ = value;
}
inline void Epsreqc6::set_adcaccsym(::apollo::canbus::Epsreqc6_AdcaccsymType value) {
  _internal_set_adcaccsym(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsreqc6.adcaccsym)
}

// -------------------------------------------------------------------

// Epsstatus01d5

// optional .apollo.canbus.Epsstatus01d5.EpswarnlampType epswarnlamp = 1;
inline bool Epsstatus01d5::_internal_has_epswarnlamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_epswarnlamp() const {
  return _internal_has_epswarnlamp();
}
inline void Epsstatus01d5::clear_epswarnlamp() {
  epswarnlamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Epsstatus01d5_EpswarnlampType Epsstatus01d5::_internal_epswarnlamp() const {
  return static_cast< ::apollo::canbus::Epsstatus01d5_EpswarnlampType >(epswarnlamp_);
}
inline ::apollo::canbus::Epsstatus01d5_EpswarnlampType Epsstatus01d5::epswarnlamp() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.epswarnlamp)
  return _internal_epswarnlamp();
}
inline void Epsstatus01d5::_internal_set_epswarnlamp(::apollo::canbus::Epsstatus01d5_EpswarnlampType value) {
  assert(::apollo::canbus::Epsstatus01d5_EpswarnlampType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  epswarnlamp_ = value;
}
inline void Epsstatus01d5::set_epswarnlamp(::apollo::canbus::Epsstatus01d5_EpswarnlampType value) {
  _internal_set_epswarnlamp(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.epswarnlamp)
}

// optional .apollo.canbus.Epsstatus01d5.AbsagreqavlType absagreqavl = 2;
inline bool Epsstatus01d5::_internal_has_absagreqavl() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_absagreqavl() const {
  return _internal_has_absagreqavl();
}
inline void Epsstatus01d5::clear_absagreqavl() {
  absagreqavl_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Epsstatus01d5_AbsagreqavlType Epsstatus01d5::_internal_absagreqavl() const {
  return static_cast< ::apollo::canbus::Epsstatus01d5_AbsagreqavlType >(absagreqavl_);
}
inline ::apollo::canbus::Epsstatus01d5_AbsagreqavlType Epsstatus01d5::absagreqavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.absagreqavl)
  return _internal_absagreqavl();
}
inline void Epsstatus01d5::_internal_set_absagreqavl(::apollo::canbus::Epsstatus01d5_AbsagreqavlType value) {
  assert(::apollo::canbus::Epsstatus01d5_AbsagreqavlType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  absagreqavl_ = value;
}
inline void Epsstatus01d5::set_absagreqavl(::apollo::canbus::Epsstatus01d5_AbsagreqavlType value) {
  _internal_set_absagreqavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.absagreqavl)
}

// optional double torsbartq = 3;
inline bool Epsstatus01d5::_internal_has_torsbartq() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_torsbartq() const {
  return _internal_has_torsbartq();
}
inline void Epsstatus01d5::clear_torsbartq() {
  torsbartq_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Epsstatus01d5::_internal_torsbartq() const {
  return torsbartq_;
}
inline double Epsstatus01d5::torsbartq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.torsbartq)
  return _internal_torsbartq();
}
inline void Epsstatus01d5::_internal_set_torsbartq(double value) {
  _has_bits_[0] |= 0x00000004u;
  torsbartq_ = value;
}
inline void Epsstatus01d5::set_torsbartq(double value) {
  _internal_set_torsbartq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.torsbartq)
}

// optional .apollo.canbus.Epsstatus01d5.EpsstsType epssts = 4;
inline bool Epsstatus01d5::_internal_has_epssts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_epssts() const {
  return _internal_has_epssts();
}
inline void Epsstatus01d5::clear_epssts() {
  epssts_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Epsstatus01d5_EpsstsType Epsstatus01d5::_internal_epssts() const {
  return static_cast< ::apollo::canbus::Epsstatus01d5_EpsstsType >(epssts_);
}
inline ::apollo::canbus::Epsstatus01d5_EpsstsType Epsstatus01d5::epssts() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.epssts)
  return _internal_epssts();
}
inline void Epsstatus01d5::_internal_set_epssts(::apollo::canbus::Epsstatus01d5_EpsstsType value) {
  assert(::apollo::canbus::Epsstatus01d5_EpsstsType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  epssts_ = value;
}
inline void Epsstatus01d5::set_epssts(::apollo::canbus::Epsstatus01d5_EpsstsType value) {
  _internal_set_epssts(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.epssts)
}

// optional .apollo.canbus.Epsstatus01d5.EpsmodType epsmod = 5;
inline bool Epsstatus01d5::_internal_has_epsmod() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_epsmod() const {
  return _internal_has_epsmod();
}
inline void Epsstatus01d5::clear_epsmod() {
  epsmod_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::canbus::Epsstatus01d5_EpsmodType Epsstatus01d5::_internal_epsmod() const {
  return static_cast< ::apollo::canbus::Epsstatus01d5_EpsmodType >(epsmod_);
}
inline ::apollo::canbus::Epsstatus01d5_EpsmodType Epsstatus01d5::epsmod() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.epsmod)
  return _internal_epsmod();
}
inline void Epsstatus01d5::_internal_set_epsmod(::apollo::canbus::Epsstatus01d5_EpsmodType value) {
  assert(::apollo::canbus::Epsstatus01d5_EpsmodType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  epsmod_ = value;
}
inline void Epsstatus01d5::set_epsmod(::apollo::canbus::Epsstatus01d5_EpsmodType value) {
  _internal_set_epsmod(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.epsmod)
}

// optional .apollo.canbus.Epsstatus01d5.SteeragspddirType steeragspddir = 6;
inline bool Epsstatus01d5::_internal_has_steeragspddir() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_steeragspddir() const {
  return _internal_has_steeragspddir();
}
inline void Epsstatus01d5::clear_steeragspddir() {
  steeragspddir_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Epsstatus01d5_SteeragspddirType Epsstatus01d5::_internal_steeragspddir() const {
  return static_cast< ::apollo::canbus::Epsstatus01d5_SteeragspddirType >(steeragspddir_);
}
inline ::apollo::canbus::Epsstatus01d5_SteeragspddirType Epsstatus01d5::steeragspddir() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.steeragspddir)
  return _internal_steeragspddir();
}
inline void Epsstatus01d5::_internal_set_steeragspddir(::apollo::canbus::Epsstatus01d5_SteeragspddirType value) {
  assert(::apollo::canbus::Epsstatus01d5_SteeragspddirType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  steeragspddir_ = value;
}
inline void Epsstatus01d5::set_steeragspddir(::apollo::canbus::Epsstatus01d5_SteeragspddirType value) {
  _internal_set_steeragspddir(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.steeragspddir)
}

// optional double steeragspd = 7;
inline bool Epsstatus01d5::_internal_has_steeragspd() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_steeragspd() const {
  return _internal_has_steeragspd();
}
inline void Epsstatus01d5::clear_steeragspd() {
  steeragspd_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Epsstatus01d5::_internal_steeragspd() const {
  return steeragspd_;
}
inline double Epsstatus01d5::steeragspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.steeragspd)
  return _internal_steeragspd();
}
inline void Epsstatus01d5::_internal_set_steeragspd(double value) {
  _has_bits_[0] |= 0x00000020u;
  steeragspd_ = value;
}
inline void Epsstatus01d5::set_steeragspd(double value) {
  _internal_set_steeragspd(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.steeragspd)
}

// optional .apollo.canbus.Epsstatus01d5.SteerangledirType steerangledir = 8;
inline bool Epsstatus01d5::_internal_has_steerangledir() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_steerangledir() const {
  return _internal_has_steerangledir();
}
inline void Epsstatus01d5::clear_steerangledir() {
  steerangledir_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::apollo::canbus::Epsstatus01d5_SteerangledirType Epsstatus01d5::_internal_steerangledir() const {
  return static_cast< ::apollo::canbus::Epsstatus01d5_SteerangledirType >(steerangledir_);
}
inline ::apollo::canbus::Epsstatus01d5_SteerangledirType Epsstatus01d5::steerangledir() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.steerangledir)
  return _internal_steerangledir();
}
inline void Epsstatus01d5::_internal_set_steerangledir(::apollo::canbus::Epsstatus01d5_SteerangledirType value) {
  assert(::apollo::canbus::Epsstatus01d5_SteerangledirType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  steerangledir_ = value;
}
inline void Epsstatus01d5::set_steerangledir(::apollo::canbus::Epsstatus01d5_SteerangledirType value) {
  _internal_set_steerangledir(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.steerangledir)
}

// optional .apollo.canbus.Epsstatus01d5.SteerangleandspdvalidType steerangleandspdvalid = 9;
inline bool Epsstatus01d5::_internal_has_steerangleandspdvalid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_steerangleandspdvalid() const {
  return _internal_has_steerangleandspdvalid();
}
inline void Epsstatus01d5::clear_steerangleandspdvalid() {
  steerangleandspdvalid_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType Epsstatus01d5::_internal_steerangleandspdvalid() const {
  return static_cast< ::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType >(steerangleandspdvalid_);
}
inline ::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType Epsstatus01d5::steerangleandspdvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.steerangleandspdvalid)
  return _internal_steerangleandspdvalid();
}
inline void Epsstatus01d5::_internal_set_steerangleandspdvalid(::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType value) {
  assert(::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  steerangleandspdvalid_ = value;
}
inline void Epsstatus01d5::set_steerangleandspdvalid(::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType value) {
  _internal_set_steerangleandspdvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.steerangleandspdvalid)
}

// optional double steerangle = 10;
inline bool Epsstatus01d5::_internal_has_steerangle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_steerangle() const {
  return _internal_has_steerangle();
}
inline void Epsstatus01d5::clear_steerangle() {
  steerangle_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double Epsstatus01d5::_internal_steerangle() const {
  return steerangle_;
}
inline double Epsstatus01d5::steerangle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.steerangle)
  return _internal_steerangle();
}
inline void Epsstatus01d5::_internal_set_steerangle(double value) {
  _has_bits_[0] |= 0x00000100u;
  steerangle_ = value;
}
inline void Epsstatus01d5::set_steerangle(double value) {
  _internal_set_steerangle(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.steerangle)
}

// optional int32 epsdmsgcntr = 11;
inline bool Epsstatus01d5::_internal_has_epsdmsgcntr() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_epsdmsgcntr() const {
  return _internal_has_epsdmsgcntr();
}
inline void Epsstatus01d5::clear_epsdmsgcntr() {
  epsdmsgcntr_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsstatus01d5::_internal_epsdmsgcntr() const {
  return epsdmsgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsstatus01d5::epsdmsgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.epsdmsgcntr)
  return _internal_epsdmsgcntr();
}
inline void Epsstatus01d5::_internal_set_epsdmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  epsdmsgcntr_ = value;
}
inline void Epsstatus01d5::set_epsdmsgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epsdmsgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.epsdmsgcntr)
}

// optional int32 epsdcrc = 12;
inline bool Epsstatus01d5::_internal_has_epsdcrc() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Epsstatus01d5::has_epsdcrc() const {
  return _internal_has_epsdcrc();
}
inline void Epsstatus01d5::clear_epsdcrc() {
  epsdcrc_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsstatus01d5::_internal_epsdcrc() const {
  return epsdcrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsstatus01d5::epsdcrc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus01d5.epsdcrc)
  return _internal_epsdcrc();
}
inline void Epsstatus01d5::_internal_set_epsdcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  epsdcrc_ = value;
}
inline void Epsstatus01d5::set_epsdcrc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_epsdcrc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus01d5.epsdcrc)
}

// -------------------------------------------------------------------

// Epsstatus02d6

// optional .apollo.canbus.Epsstatus02d6.EpstqreqavlType epstqreqavl = 1;
inline bool Epsstatus02d6::_internal_has_epstqreqavl() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epstqreqavl() const {
  return _internal_has_epstqreqavl();
}
inline void Epsstatus02d6::clear_epstqreqavl() {
  epstqreqavl_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::canbus::Epsstatus02d6_EpstqreqavlType Epsstatus02d6::_internal_epstqreqavl() const {
  return static_cast< ::apollo::canbus::Epsstatus02d6_EpstqreqavlType >(epstqreqavl_);
}
inline ::apollo::canbus::Epsstatus02d6_EpstqreqavlType Epsstatus02d6::epstqreqavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epstqreqavl)
  return _internal_epstqreqavl();
}
inline void Epsstatus02d6::_internal_set_epstqreqavl(::apollo::canbus::Epsstatus02d6_EpstqreqavlType value) {
  assert(::apollo::canbus::Epsstatus02d6_EpstqreqavlType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  epstqreqavl_ = value;
}
inline void Epsstatus02d6::set_epstqreqavl(::apollo::canbus::Epsstatus02d6_EpstqreqavlType value) {
  _internal_set_epstqreqavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epstqreqavl)
}

// optional .apollo.canbus.Epsstatus02d6.EpspinionangreqavlType epspinionangreqavl = 2;
inline bool Epsstatus02d6::_internal_has_epspinionangreqavl() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epspinionangreqavl() const {
  return _internal_has_epspinionangreqavl();
}
inline void Epsstatus02d6::clear_epspinionangreqavl() {
  epspinionangreqavl_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType Epsstatus02d6::_internal_epspinionangreqavl() const {
  return static_cast< ::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType >(epspinionangreqavl_);
}
inline ::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType Epsstatus02d6::epspinionangreqavl() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epspinionangreqavl)
  return _internal_epspinionangreqavl();
}
inline void Epsstatus02d6::_internal_set_epspinionangreqavl(::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType value) {
  assert(::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  epspinionangreqavl_ = value;
}
inline void Epsstatus02d6::set_epspinionangreqavl(::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType value) {
  _internal_set_epspinionangreqavl(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epspinionangreqavl)
}

// optional double epsestrackforce = 3;
inline bool Epsstatus02d6::_internal_has_epsestrackforce() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epsestrackforce() const {
  return _internal_has_epsestrackforce();
}
inline void Epsstatus02d6::clear_epsestrackforce() {
  epsestrackforce_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Epsstatus02d6::_internal_epsestrackforce() const {
  return epsestrackforce_;
}
inline double Epsstatus02d6::epsestrackforce() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epsestrackforce)
  return _internal_epsestrackforce();
}
inline void Epsstatus02d6::_internal_set_epsestrackforce(double value) {
  _has_bits_[0] |= 0x00000004u;
  epsestrackforce_ = value;
}
inline void Epsstatus02d6::set_epsestrackforce(double value) {
  _internal_set_epsestrackforce(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epsestrackforce)
}

// optional .apollo.canbus.Epsstatus02d6.EpshandsoffdetnconfidenceType epshandsoffdetnconfidence = 4;
inline bool Epsstatus02d6::_internal_has_epshandsoffdetnconfidence() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epshandsoffdetnconfidence() const {
  return _internal_has_epshandsoffdetnconfidence();
}
inline void Epsstatus02d6::clear_epshandsoffdetnconfidence() {
  epshandsoffdetnconfidence_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType Epsstatus02d6::_internal_epshandsoffdetnconfidence() const {
  return static_cast< ::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType >(epshandsoffdetnconfidence_);
}
inline ::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType Epsstatus02d6::epshandsoffdetnconfidence() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epshandsoffdetnconfidence)
  return _internal_epshandsoffdetnconfidence();
}
inline void Epsstatus02d6::_internal_set_epshandsoffdetnconfidence(::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType value) {
  assert(::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  epshandsoffdetnconfidence_ = value;
}
inline void Epsstatus02d6::set_epshandsoffdetnconfidence(::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType value) {
  _internal_set_epshandsoffdetnconfidence(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epshandsoffdetnconfidence)
}

// optional int32 eps02msgcntr = 5;
inline bool Epsstatus02d6::_internal_has_eps02msgcntr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_eps02msgcntr() const {
  return _internal_has_eps02msgcntr();
}
inline void Epsstatus02d6::clear_eps02msgcntr() {
  eps02msgcntr_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsstatus02d6::_internal_eps02msgcntr() const {
  return eps02msgcntr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsstatus02d6::eps02msgcntr() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.eps02msgcntr)
  return _internal_eps02msgcntr();
}
inline void Epsstatus02d6::_internal_set_eps02msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  eps02msgcntr_ = value;
}
inline void Epsstatus02d6::set_eps02msgcntr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eps02msgcntr(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.eps02msgcntr)
}

// optional .apollo.canbus.Epsstatus02d6.EpspinionagvalidType epspinionagvalid = 6;
inline bool Epsstatus02d6::_internal_has_epspinionagvalid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epspinionagvalid() const {
  return _internal_has_epspinionagvalid();
}
inline void Epsstatus02d6::clear_epspinionagvalid() {
  epspinionagvalid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::apollo::canbus::Epsstatus02d6_EpspinionagvalidType Epsstatus02d6::_internal_epspinionagvalid() const {
  return static_cast< ::apollo::canbus::Epsstatus02d6_EpspinionagvalidType >(epspinionagvalid_);
}
inline ::apollo::canbus::Epsstatus02d6_EpspinionagvalidType Epsstatus02d6::epspinionagvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epspinionagvalid)
  return _internal_epspinionagvalid();
}
inline void Epsstatus02d6::_internal_set_epspinionagvalid(::apollo::canbus::Epsstatus02d6_EpspinionagvalidType value) {
  assert(::apollo::canbus::Epsstatus02d6_EpspinionagvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  epspinionagvalid_ = value;
}
inline void Epsstatus02d6::set_epspinionagvalid(::apollo::canbus::Epsstatus02d6_EpspinionagvalidType value) {
  _internal_set_epspinionagvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epspinionagvalid)
}

// optional .apollo.canbus.Epsstatus02d6.EpsdrvoverridedetnType epsdrvoverridedetn = 7;
inline bool Epsstatus02d6::_internal_has_epsdrvoverridedetn() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epsdrvoverridedetn() const {
  return _internal_has_epsdrvoverridedetn();
}
inline void Epsstatus02d6::clear_epsdrvoverridedetn() {
  epsdrvoverridedetn_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType Epsstatus02d6::_internal_epsdrvoverridedetn() const {
  return static_cast< ::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType >(epsdrvoverridedetn_);
}
inline ::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType Epsstatus02d6::epsdrvoverridedetn() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epsdrvoverridedetn)
  return _internal_epsdrvoverridedetn();
}
inline void Epsstatus02d6::_internal_set_epsdrvoverridedetn(::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType value) {
  assert(::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  epsdrvoverridedetn_ = value;
}
inline void Epsstatus02d6::set_epsdrvoverridedetn(::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType value) {
  _internal_set_epsdrvoverridedetn(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epsdrvoverridedetn)
}

// optional int32 eps02crc = 8;
inline bool Epsstatus02d6::_internal_has_eps02crc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_eps02crc() const {
  return _internal_has_eps02crc();
}
inline void Epsstatus02d6::clear_eps02crc() {
  eps02crc_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsstatus02d6::_internal_eps02crc() const {
  return eps02crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Epsstatus02d6::eps02crc() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.eps02crc)
  return _internal_eps02crc();
}
inline void Epsstatus02d6::_internal_set_eps02crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  eps02crc_ = value;
}
inline void Epsstatus02d6::set_eps02crc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eps02crc(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.eps02crc)
}

// optional double epsmotortq = 9;
inline bool Epsstatus02d6::_internal_has_epsmotortq() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epsmotortq() const {
  return _internal_has_epsmotortq();
}
inline void Epsstatus02d6::clear_epsmotortq() {
  epsmotortq_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Epsstatus02d6::_internal_epsmotortq() const {
  return epsmotortq_;
}
inline double Epsstatus02d6::epsmotortq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epsmotortq)
  return _internal_epsmotortq();
}
inline void Epsstatus02d6::_internal_set_epsmotortq(double value) {
  _has_bits_[0] |= 0x00000080u;
  epsmotortq_ = value;
}
inline void Epsstatus02d6::set_epsmotortq(double value) {
  _internal_set_epsmotortq(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epsmotortq)
}

// optional .apollo.canbus.Epsstatus02d6.EpsmotortqvalidType epsmotortqvalid = 10;
inline bool Epsstatus02d6::_internal_has_epsmotortqvalid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epsmotortqvalid() const {
  return _internal_has_epsmotortqvalid();
}
inline void Epsstatus02d6::clear_epsmotortqvalid() {
  epsmotortqvalid_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType Epsstatus02d6::_internal_epsmotortqvalid() const {
  return static_cast< ::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType >(epsmotortqvalid_);
}
inline ::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType Epsstatus02d6::epsmotortqvalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epsmotortqvalid)
  return _internal_epsmotortqvalid();
}
inline void Epsstatus02d6::_internal_set_epsmotortqvalid(::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType value) {
  assert(::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  epsmotortqvalid_ = value;
}
inline void Epsstatus02d6::set_epsmotortqvalid(::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType value) {
  _internal_set_epsmotortqvalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epsmotortqvalid)
}

// optional double epspinionag = 11;
inline bool Epsstatus02d6::_internal_has_epspinionag() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epspinionag() const {
  return _internal_has_epspinionag();
}
inline void Epsstatus02d6::clear_epspinionag() {
  epspinionag_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Epsstatus02d6::_internal_epspinionag() const {
  return epspinionag_;
}
inline double Epsstatus02d6::epspinionag() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epspinionag)
  return _internal_epspinionag();
}
inline void Epsstatus02d6::_internal_set_epspinionag(double value) {
  _has_bits_[0] |= 0x00000400u;
  epspinionag_ = value;
}
inline void Epsstatus02d6::set_epspinionag(double value) {
  _internal_set_epspinionag(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epspinionag)
}

// optional .apollo.canbus.Epsstatus02d6.EpsestrackforcevalidType epsestrackforcevalid = 12;
inline bool Epsstatus02d6::_internal_has_epsestrackforcevalid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Epsstatus02d6::has_epsestrackforcevalid() const {
  return _internal_has_epsestrackforcevalid();
}
inline void Epsstatus02d6::clear_epsestrackforcevalid() {
  epsestrackforcevalid_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType Epsstatus02d6::_internal_epsestrackforcevalid() const {
  return static_cast< ::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType >(epsestrackforcevalid_);
}
inline ::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType Epsstatus02d6::epsestrackforcevalid() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Epsstatus02d6.epsestrackforcevalid)
  return _internal_epsestrackforcevalid();
}
inline void Epsstatus02d6::_internal_set_epsestrackforcevalid(::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType value) {
  assert(::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  epsestrackforcevalid_ = value;
}
inline void Epsstatus02d6::set_epsestrackforcevalid(::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType value) {
  _internal_set_epsestrackforcevalid(value);
  // @@protoc_insertion_point(field_set:apollo.canbus.Epsstatus02d6.epsestrackforcevalid)
}

// -------------------------------------------------------------------

// Nio

// optional .apollo.canbus.Avpreq15e AvpReq15e = 1;
inline bool Nio::_internal_has_avpreq15e() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || avpreq15e_ != nullptr);
  return value;
}
inline bool Nio::has_avpreq15e() const {
  return _internal_has_avpreq15e();
}
inline void Nio::clear_avpreq15e() {
  if (avpreq15e_ != nullptr) avpreq15e_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::canbus::Avpreq15e& Nio::_internal_avpreq15e() const {
  const ::apollo::canbus::Avpreq15e* p = avpreq15e_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Avpreq15e&>(
      ::apollo::canbus::_Avpreq15e_default_instance_);
}
inline const ::apollo::canbus::Avpreq15e& Nio::avpreq15e() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.AvpReq15e)
  return _internal_avpreq15e();
}
inline void Nio::unsafe_arena_set_allocated_avpreq15e(
    ::apollo::canbus::Avpreq15e* avpreq15e) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avpreq15e_);
  }
  avpreq15e_ = avpreq15e;
  if (avpreq15e) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.AvpReq15e)
}
inline ::apollo::canbus::Avpreq15e* Nio::release_avpreq15e() {
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Avpreq15e* temp = avpreq15e_;
  avpreq15e_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Avpreq15e* Nio::unsafe_arena_release_avpreq15e() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.AvpReq15e)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::canbus::Avpreq15e* temp = avpreq15e_;
  avpreq15e_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Avpreq15e* Nio::_internal_mutable_avpreq15e() {
  _has_bits_[0] |= 0x00000001u;
  if (avpreq15e_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Avpreq15e>(GetArena());
    avpreq15e_ = p;
  }
  return avpreq15e_;
}
inline ::apollo::canbus::Avpreq15e* Nio::mutable_avpreq15e() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.AvpReq15e)
  return _internal_mutable_avpreq15e();
}
inline void Nio::set_allocated_avpreq15e(::apollo::canbus::Avpreq15e* avpreq15e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avpreq15e_;
  }
  if (avpreq15e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avpreq15e);
    if (message_arena != submessage_arena) {
      avpreq15e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avpreq15e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  avpreq15e_ = avpreq15e;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.AvpReq15e)
}

// optional .apollo.canbus.Vcusts01218 Vcusts01218 = 2;
inline bool Nio::_internal_has_vcusts01218() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vcusts01218_ != nullptr);
  return value;
}
inline bool Nio::has_vcusts01218() const {
  return _internal_has_vcusts01218();
}
inline void Nio::clear_vcusts01218() {
  if (vcusts01218_ != nullptr) vcusts01218_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::canbus::Vcusts01218& Nio::_internal_vcusts01218() const {
  const ::apollo::canbus::Vcusts01218* p = vcusts01218_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcusts01218&>(
      ::apollo::canbus::_Vcusts01218_default_instance_);
}
inline const ::apollo::canbus::Vcusts01218& Nio::vcusts01218() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Vcusts01218)
  return _internal_vcusts01218();
}
inline void Nio::unsafe_arena_set_allocated_vcusts01218(
    ::apollo::canbus::Vcusts01218* vcusts01218) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vcusts01218_);
  }
  vcusts01218_ = vcusts01218;
  if (vcusts01218) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Vcusts01218)
}
inline ::apollo::canbus::Vcusts01218* Nio::release_vcusts01218() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Vcusts01218* temp = vcusts01218_;
  vcusts01218_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Vcusts01218* Nio::unsafe_arena_release_vcusts01218() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Vcusts01218)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Vcusts01218* temp = vcusts01218_;
  vcusts01218_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcusts01218* Nio::_internal_mutable_vcusts01218() {
  _has_bits_[0] |= 0x00000002u;
  if (vcusts01218_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcusts01218>(GetArena());
    vcusts01218_ = p;
  }
  return vcusts01218_;
}
inline ::apollo::canbus::Vcusts01218* Nio::mutable_vcusts01218() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Vcusts01218)
  return _internal_mutable_vcusts01218();
}
inline void Nio::set_allocated_vcusts01218(::apollo::canbus::Vcusts01218* vcusts01218) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vcusts01218_;
  }
  if (vcusts01218) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vcusts01218);
    if (message_arena != submessage_arena) {
      vcusts01218 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcusts01218, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vcusts01218_ = vcusts01218;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Vcusts01218)
}

// optional .apollo.canbus.Vcusts0221c Vcusts0221c = 3;
inline bool Nio::_internal_has_vcusts0221c() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vcusts0221c_ != nullptr);
  return value;
}
inline bool Nio::has_vcusts0221c() const {
  return _internal_has_vcusts0221c();
}
inline void Nio::clear_vcusts0221c() {
  if (vcusts0221c_ != nullptr) vcusts0221c_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::canbus::Vcusts0221c& Nio::_internal_vcusts0221c() const {
  const ::apollo::canbus::Vcusts0221c* p = vcusts0221c_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vcusts0221c&>(
      ::apollo::canbus::_Vcusts0221c_default_instance_);
}
inline const ::apollo::canbus::Vcusts0221c& Nio::vcusts0221c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Vcusts0221c)
  return _internal_vcusts0221c();
}
inline void Nio::unsafe_arena_set_allocated_vcusts0221c(
    ::apollo::canbus::Vcusts0221c* vcusts0221c) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vcusts0221c_);
  }
  vcusts0221c_ = vcusts0221c;
  if (vcusts0221c) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Vcusts0221c)
}
inline ::apollo::canbus::Vcusts0221c* Nio::release_vcusts0221c() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Vcusts0221c* temp = vcusts0221c_;
  vcusts0221c_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Vcusts0221c* Nio::unsafe_arena_release_vcusts0221c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Vcusts0221c)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::canbus::Vcusts0221c* temp = vcusts0221c_;
  vcusts0221c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vcusts0221c* Nio::_internal_mutable_vcusts0221c() {
  _has_bits_[0] |= 0x00000004u;
  if (vcusts0221c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vcusts0221c>(GetArena());
    vcusts0221c_ = p;
  }
  return vcusts0221c_;
}
inline ::apollo::canbus::Vcusts0221c* Nio::mutable_vcusts0221c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Vcusts0221c)
  return _internal_mutable_vcusts0221c();
}
inline void Nio::set_allocated_vcusts0221c(::apollo::canbus::Vcusts0221c* vcusts0221c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vcusts0221c_;
  }
  if (vcusts0221c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vcusts0221c);
    if (message_arena != submessage_arena) {
      vcusts0221c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcusts0221c, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vcusts0221c_ = vcusts0221c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Vcusts0221c)
}

// optional .apollo.canbus.Brkdrvstatus24c Brkdrvstatus24c = 4;
inline bool Nio::_internal_has_brkdrvstatus24c() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || brkdrvstatus24c_ != nullptr);
  return value;
}
inline bool Nio::has_brkdrvstatus24c() const {
  return _internal_has_brkdrvstatus24c();
}
inline void Nio::clear_brkdrvstatus24c() {
  if (brkdrvstatus24c_ != nullptr) brkdrvstatus24c_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::canbus::Brkdrvstatus24c& Nio::_internal_brkdrvstatus24c() const {
  const ::apollo::canbus::Brkdrvstatus24c* p = brkdrvstatus24c_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Brkdrvstatus24c&>(
      ::apollo::canbus::_Brkdrvstatus24c_default_instance_);
}
inline const ::apollo::canbus::Brkdrvstatus24c& Nio::brkdrvstatus24c() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Brkdrvstatus24c)
  return _internal_brkdrvstatus24c();
}
inline void Nio::unsafe_arena_set_allocated_brkdrvstatus24c(
    ::apollo::canbus::Brkdrvstatus24c* brkdrvstatus24c) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brkdrvstatus24c_);
  }
  brkdrvstatus24c_ = brkdrvstatus24c;
  if (brkdrvstatus24c) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Brkdrvstatus24c)
}
inline ::apollo::canbus::Brkdrvstatus24c* Nio::release_brkdrvstatus24c() {
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Brkdrvstatus24c* temp = brkdrvstatus24c_;
  brkdrvstatus24c_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Brkdrvstatus24c* Nio::unsafe_arena_release_brkdrvstatus24c() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Brkdrvstatus24c)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::canbus::Brkdrvstatus24c* temp = brkdrvstatus24c_;
  brkdrvstatus24c_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Brkdrvstatus24c* Nio::_internal_mutable_brkdrvstatus24c() {
  _has_bits_[0] |= 0x00000008u;
  if (brkdrvstatus24c_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Brkdrvstatus24c>(GetArena());
    brkdrvstatus24c_ = p;
  }
  return brkdrvstatus24c_;
}
inline ::apollo::canbus::Brkdrvstatus24c* Nio::mutable_brkdrvstatus24c() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Brkdrvstatus24c)
  return _internal_mutable_brkdrvstatus24c();
}
inline void Nio::set_allocated_brkdrvstatus24c(::apollo::canbus::Brkdrvstatus24c* brkdrvstatus24c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete brkdrvstatus24c_;
  }
  if (brkdrvstatus24c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(brkdrvstatus24c);
    if (message_arena != submessage_arena) {
      brkdrvstatus24c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brkdrvstatus24c, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  brkdrvstatus24c_ = brkdrvstatus24c;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Brkdrvstatus24c)
}

// optional .apollo.canbus.Bodystatus24d Bodystatus24d = 5;
inline bool Nio::_internal_has_bodystatus24d() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || bodystatus24d_ != nullptr);
  return value;
}
inline bool Nio::has_bodystatus24d() const {
  return _internal_has_bodystatus24d();
}
inline void Nio::clear_bodystatus24d() {
  if (bodystatus24d_ != nullptr) bodystatus24d_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::canbus::Bodystatus24d& Nio::_internal_bodystatus24d() const {
  const ::apollo::canbus::Bodystatus24d* p = bodystatus24d_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Bodystatus24d&>(
      ::apollo::canbus::_Bodystatus24d_default_instance_);
}
inline const ::apollo::canbus::Bodystatus24d& Nio::bodystatus24d() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Bodystatus24d)
  return _internal_bodystatus24d();
}
inline void Nio::unsafe_arena_set_allocated_bodystatus24d(
    ::apollo::canbus::Bodystatus24d* bodystatus24d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bodystatus24d_);
  }
  bodystatus24d_ = bodystatus24d;
  if (bodystatus24d) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Bodystatus24d)
}
inline ::apollo::canbus::Bodystatus24d* Nio::release_bodystatus24d() {
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Bodystatus24d* temp = bodystatus24d_;
  bodystatus24d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Bodystatus24d* Nio::unsafe_arena_release_bodystatus24d() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Bodystatus24d)
  _has_bits_[0] &= ~0x00000010u;
  ::apollo::canbus::Bodystatus24d* temp = bodystatus24d_;
  bodystatus24d_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Bodystatus24d* Nio::_internal_mutable_bodystatus24d() {
  _has_bits_[0] |= 0x00000010u;
  if (bodystatus24d_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Bodystatus24d>(GetArena());
    bodystatus24d_ = p;
  }
  return bodystatus24d_;
}
inline ::apollo::canbus::Bodystatus24d* Nio::mutable_bodystatus24d() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Bodystatus24d)
  return _internal_mutable_bodystatus24d();
}
inline void Nio::set_allocated_bodystatus24d(::apollo::canbus::Bodystatus24d* bodystatus24d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bodystatus24d_;
  }
  if (bodystatus24d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bodystatus24d);
    if (message_arena != submessage_arena) {
      bodystatus24d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bodystatus24d, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bodystatus24d_ = bodystatus24d;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Bodystatus24d)
}

// optional .apollo.canbus.Driverstatus24e Driverstatus24e = 6;
inline bool Nio::_internal_has_driverstatus24e() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || driverstatus24e_ != nullptr);
  return value;
}
inline bool Nio::has_driverstatus24e() const {
  return _internal_has_driverstatus24e();
}
inline void Nio::clear_driverstatus24e() {
  if (driverstatus24e_ != nullptr) driverstatus24e_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::canbus::Driverstatus24e& Nio::_internal_driverstatus24e() const {
  const ::apollo::canbus::Driverstatus24e* p = driverstatus24e_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Driverstatus24e&>(
      ::apollo::canbus::_Driverstatus24e_default_instance_);
}
inline const ::apollo::canbus::Driverstatus24e& Nio::driverstatus24e() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Driverstatus24e)
  return _internal_driverstatus24e();
}
inline void Nio::unsafe_arena_set_allocated_driverstatus24e(
    ::apollo::canbus::Driverstatus24e* driverstatus24e) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(driverstatus24e_);
  }
  driverstatus24e_ = driverstatus24e;
  if (driverstatus24e) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Driverstatus24e)
}
inline ::apollo::canbus::Driverstatus24e* Nio::release_driverstatus24e() {
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Driverstatus24e* temp = driverstatus24e_;
  driverstatus24e_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Driverstatus24e* Nio::unsafe_arena_release_driverstatus24e() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Driverstatus24e)
  _has_bits_[0] &= ~0x00000020u;
  ::apollo::canbus::Driverstatus24e* temp = driverstatus24e_;
  driverstatus24e_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Driverstatus24e* Nio::_internal_mutable_driverstatus24e() {
  _has_bits_[0] |= 0x00000020u;
  if (driverstatus24e_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Driverstatus24e>(GetArena());
    driverstatus24e_ = p;
  }
  return driverstatus24e_;
}
inline ::apollo::canbus::Driverstatus24e* Nio::mutable_driverstatus24e() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Driverstatus24e)
  return _internal_mutable_driverstatus24e();
}
inline void Nio::set_allocated_driverstatus24e(::apollo::canbus::Driverstatus24e* driverstatus24e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete driverstatus24e_;
  }
  if (driverstatus24e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(driverstatus24e);
    if (message_arena != submessage_arena) {
      driverstatus24e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, driverstatus24e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  driverstatus24e_ = driverstatus24e;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Driverstatus24e)
}

// optional .apollo.canbus.Vehiclelights2c7 Vehiclelights2c7 = 7;
inline bool Nio::_internal_has_vehiclelights2c7() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || vehiclelights2c7_ != nullptr);
  return value;
}
inline bool Nio::has_vehiclelights2c7() const {
  return _internal_has_vehiclelights2c7();
}
inline void Nio::clear_vehiclelights2c7() {
  if (vehiclelights2c7_ != nullptr) vehiclelights2c7_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::canbus::Vehiclelights2c7& Nio::_internal_vehiclelights2c7() const {
  const ::apollo::canbus::Vehiclelights2c7* p = vehiclelights2c7_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Vehiclelights2c7&>(
      ::apollo::canbus::_Vehiclelights2c7_default_instance_);
}
inline const ::apollo::canbus::Vehiclelights2c7& Nio::vehiclelights2c7() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Vehiclelights2c7)
  return _internal_vehiclelights2c7();
}
inline void Nio::unsafe_arena_set_allocated_vehiclelights2c7(
    ::apollo::canbus::Vehiclelights2c7* vehiclelights2c7) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehiclelights2c7_);
  }
  vehiclelights2c7_ = vehiclelights2c7;
  if (vehiclelights2c7) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Vehiclelights2c7)
}
inline ::apollo::canbus::Vehiclelights2c7* Nio::release_vehiclelights2c7() {
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Vehiclelights2c7* temp = vehiclelights2c7_;
  vehiclelights2c7_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Vehiclelights2c7* Nio::unsafe_arena_release_vehiclelights2c7() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Vehiclelights2c7)
  _has_bits_[0] &= ~0x00000040u;
  ::apollo::canbus::Vehiclelights2c7* temp = vehiclelights2c7_;
  vehiclelights2c7_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Vehiclelights2c7* Nio::_internal_mutable_vehiclelights2c7() {
  _has_bits_[0] |= 0x00000040u;
  if (vehiclelights2c7_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Vehiclelights2c7>(GetArena());
    vehiclelights2c7_ = p;
  }
  return vehiclelights2c7_;
}
inline ::apollo::canbus::Vehiclelights2c7* Nio::mutable_vehiclelights2c7() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Vehiclelights2c7)
  return _internal_mutable_vehiclelights2c7();
}
inline void Nio::set_allocated_vehiclelights2c7(::apollo::canbus::Vehiclelights2c7* vehiclelights2c7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehiclelights2c7_;
  }
  if (vehiclelights2c7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehiclelights2c7);
    if (message_arena != submessage_arena) {
      vehiclelights2c7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehiclelights2c7, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  vehiclelights2c7_ = vehiclelights2c7;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Vehiclelights2c7)
}

// optional .apollo.canbus.Lightreq336 LightReq336 = 8;
inline bool Nio::_internal_has_lightreq336() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || lightreq336_ != nullptr);
  return value;
}
inline bool Nio::has_lightreq336() const {
  return _internal_has_lightreq336();
}
inline void Nio::clear_lightreq336() {
  if (lightreq336_ != nullptr) lightreq336_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::canbus::Lightreq336& Nio::_internal_lightreq336() const {
  const ::apollo::canbus::Lightreq336* p = lightreq336_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Lightreq336&>(
      ::apollo::canbus::_Lightreq336_default_instance_);
}
inline const ::apollo::canbus::Lightreq336& Nio::lightreq336() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.LightReq336)
  return _internal_lightreq336();
}
inline void Nio::unsafe_arena_set_allocated_lightreq336(
    ::apollo::canbus::Lightreq336* lightreq336) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lightreq336_);
  }
  lightreq336_ = lightreq336;
  if (lightreq336) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.LightReq336)
}
inline ::apollo::canbus::Lightreq336* Nio::release_lightreq336() {
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Lightreq336* temp = lightreq336_;
  lightreq336_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Lightreq336* Nio::unsafe_arena_release_lightreq336() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.LightReq336)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::canbus::Lightreq336* temp = lightreq336_;
  lightreq336_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Lightreq336* Nio::_internal_mutable_lightreq336() {
  _has_bits_[0] |= 0x00000080u;
  if (lightreq336_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Lightreq336>(GetArena());
    lightreq336_ = p;
  }
  return lightreq336_;
}
inline ::apollo::canbus::Lightreq336* Nio::mutable_lightreq336() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.LightReq336)
  return _internal_mutable_lightreq336();
}
inline void Nio::set_allocated_lightreq336(::apollo::canbus::Lightreq336* lightreq336) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lightreq336_;
  }
  if (lightreq336) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lightreq336);
    if (message_arena != submessage_arena) {
      lightreq336 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lightreq336, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  lightreq336_ = lightreq336;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.LightReq336)
}

// optional .apollo.canbus.Acmbody4a Acmbody4a = 9;
inline bool Nio::_internal_has_acmbody4a() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || acmbody4a_ != nullptr);
  return value;
}
inline bool Nio::has_acmbody4a() const {
  return _internal_has_acmbody4a();
}
inline void Nio::clear_acmbody4a() {
  if (acmbody4a_ != nullptr) acmbody4a_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::canbus::Acmbody4a& Nio::_internal_acmbody4a() const {
  const ::apollo::canbus::Acmbody4a* p = acmbody4a_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Acmbody4a&>(
      ::apollo::canbus::_Acmbody4a_default_instance_);
}
inline const ::apollo::canbus::Acmbody4a& Nio::acmbody4a() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Acmbody4a)
  return _internal_acmbody4a();
}
inline void Nio::unsafe_arena_set_allocated_acmbody4a(
    ::apollo::canbus::Acmbody4a* acmbody4a) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acmbody4a_);
  }
  acmbody4a_ = acmbody4a;
  if (acmbody4a) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Acmbody4a)
}
inline ::apollo::canbus::Acmbody4a* Nio::release_acmbody4a() {
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Acmbody4a* temp = acmbody4a_;
  acmbody4a_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Acmbody4a* Nio::unsafe_arena_release_acmbody4a() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Acmbody4a)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::canbus::Acmbody4a* temp = acmbody4a_;
  acmbody4a_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Acmbody4a* Nio::_internal_mutable_acmbody4a() {
  _has_bits_[0] |= 0x00000100u;
  if (acmbody4a_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Acmbody4a>(GetArena());
    acmbody4a_ = p;
  }
  return acmbody4a_;
}
inline ::apollo::canbus::Acmbody4a* Nio::mutable_acmbody4a() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Acmbody4a)
  return _internal_mutable_acmbody4a();
}
inline void Nio::set_allocated_acmbody4a(::apollo::canbus::Acmbody4a* acmbody4a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete acmbody4a_;
  }
  if (acmbody4a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acmbody4a);
    if (message_arena != submessage_arena) {
      acmbody4a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acmbody4a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  acmbody4a_ = acmbody4a;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Acmbody4a)
}

// optional .apollo.canbus.Whlspdfront51 Whlspdfront51 = 10;
inline bool Nio::_internal_has_whlspdfront51() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || whlspdfront51_ != nullptr);
  return value;
}
inline bool Nio::has_whlspdfront51() const {
  return _internal_has_whlspdfront51();
}
inline void Nio::clear_whlspdfront51() {
  if (whlspdfront51_ != nullptr) whlspdfront51_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::canbus::Whlspdfront51& Nio::_internal_whlspdfront51() const {
  const ::apollo::canbus::Whlspdfront51* p = whlspdfront51_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Whlspdfront51&>(
      ::apollo::canbus::_Whlspdfront51_default_instance_);
}
inline const ::apollo::canbus::Whlspdfront51& Nio::whlspdfront51() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Whlspdfront51)
  return _internal_whlspdfront51();
}
inline void Nio::unsafe_arena_set_allocated_whlspdfront51(
    ::apollo::canbus::Whlspdfront51* whlspdfront51) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whlspdfront51_);
  }
  whlspdfront51_ = whlspdfront51;
  if (whlspdfront51) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Whlspdfront51)
}
inline ::apollo::canbus::Whlspdfront51* Nio::release_whlspdfront51() {
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Whlspdfront51* temp = whlspdfront51_;
  whlspdfront51_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Whlspdfront51* Nio::unsafe_arena_release_whlspdfront51() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Whlspdfront51)
  _has_bits_[0] &= ~0x00000200u;
  ::apollo::canbus::Whlspdfront51* temp = whlspdfront51_;
  whlspdfront51_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Whlspdfront51* Nio::_internal_mutable_whlspdfront51() {
  _has_bits_[0] |= 0x00000200u;
  if (whlspdfront51_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Whlspdfront51>(GetArena());
    whlspdfront51_ = p;
  }
  return whlspdfront51_;
}
inline ::apollo::canbus::Whlspdfront51* Nio::mutable_whlspdfront51() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Whlspdfront51)
  return _internal_mutable_whlspdfront51();
}
inline void Nio::set_allocated_whlspdfront51(::apollo::canbus::Whlspdfront51* whlspdfront51) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete whlspdfront51_;
  }
  if (whlspdfront51) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(whlspdfront51);
    if (message_arena != submessage_arena) {
      whlspdfront51 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whlspdfront51, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  whlspdfront51_ = whlspdfront51;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Whlspdfront51)
}

// optional .apollo.canbus.Whlspdrear52 Whlspdrear52 = 11;
inline bool Nio::_internal_has_whlspdrear52() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || whlspdrear52_ != nullptr);
  return value;
}
inline bool Nio::has_whlspdrear52() const {
  return _internal_has_whlspdrear52();
}
inline void Nio::clear_whlspdrear52() {
  if (whlspdrear52_ != nullptr) whlspdrear52_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::apollo::canbus::Whlspdrear52& Nio::_internal_whlspdrear52() const {
  const ::apollo::canbus::Whlspdrear52* p = whlspdrear52_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Whlspdrear52&>(
      ::apollo::canbus::_Whlspdrear52_default_instance_);
}
inline const ::apollo::canbus::Whlspdrear52& Nio::whlspdrear52() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Whlspdrear52)
  return _internal_whlspdrear52();
}
inline void Nio::unsafe_arena_set_allocated_whlspdrear52(
    ::apollo::canbus::Whlspdrear52* whlspdrear52) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whlspdrear52_);
  }
  whlspdrear52_ = whlspdrear52;
  if (whlspdrear52) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Whlspdrear52)
}
inline ::apollo::canbus::Whlspdrear52* Nio::release_whlspdrear52() {
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Whlspdrear52* temp = whlspdrear52_;
  whlspdrear52_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Whlspdrear52* Nio::unsafe_arena_release_whlspdrear52() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Whlspdrear52)
  _has_bits_[0] &= ~0x00000400u;
  ::apollo::canbus::Whlspdrear52* temp = whlspdrear52_;
  whlspdrear52_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Whlspdrear52* Nio::_internal_mutable_whlspdrear52() {
  _has_bits_[0] |= 0x00000400u;
  if (whlspdrear52_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Whlspdrear52>(GetArena());
    whlspdrear52_ = p;
  }
  return whlspdrear52_;
}
inline ::apollo::canbus::Whlspdrear52* Nio::mutable_whlspdrear52() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Whlspdrear52)
  return _internal_mutable_whlspdrear52();
}
inline void Nio::set_allocated_whlspdrear52(::apollo::canbus::Whlspdrear52* whlspdrear52) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete whlspdrear52_;
  }
  if (whlspdrear52) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(whlspdrear52);
    if (message_arena != submessage_arena) {
      whlspdrear52 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whlspdrear52, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  whlspdrear52_ = whlspdrear52;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Whlspdrear52)
}

// optional .apollo.canbus.Bcusts5e Bcusts5e = 12;
inline bool Nio::_internal_has_bcusts5e() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || bcusts5e_ != nullptr);
  return value;
}
inline bool Nio::has_bcusts5e() const {
  return _internal_has_bcusts5e();
}
inline void Nio::clear_bcusts5e() {
  if (bcusts5e_ != nullptr) bcusts5e_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::apollo::canbus::Bcusts5e& Nio::_internal_bcusts5e() const {
  const ::apollo::canbus::Bcusts5e* p = bcusts5e_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Bcusts5e&>(
      ::apollo::canbus::_Bcusts5e_default_instance_);
}
inline const ::apollo::canbus::Bcusts5e& Nio::bcusts5e() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Bcusts5e)
  return _internal_bcusts5e();
}
inline void Nio::unsafe_arena_set_allocated_bcusts5e(
    ::apollo::canbus::Bcusts5e* bcusts5e) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bcusts5e_);
  }
  bcusts5e_ = bcusts5e;
  if (bcusts5e) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Bcusts5e)
}
inline ::apollo::canbus::Bcusts5e* Nio::release_bcusts5e() {
  _has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Bcusts5e* temp = bcusts5e_;
  bcusts5e_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Bcusts5e* Nio::unsafe_arena_release_bcusts5e() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Bcusts5e)
  _has_bits_[0] &= ~0x00000800u;
  ::apollo::canbus::Bcusts5e* temp = bcusts5e_;
  bcusts5e_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Bcusts5e* Nio::_internal_mutable_bcusts5e() {
  _has_bits_[0] |= 0x00000800u;
  if (bcusts5e_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Bcusts5e>(GetArena());
    bcusts5e_ = p;
  }
  return bcusts5e_;
}
inline ::apollo::canbus::Bcusts5e* Nio::mutable_bcusts5e() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Bcusts5e)
  return _internal_mutable_bcusts5e();
}
inline void Nio::set_allocated_bcusts5e(::apollo::canbus::Bcusts5e* bcusts5e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bcusts5e_;
  }
  if (bcusts5e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bcusts5e);
    if (message_arena != submessage_arena) {
      bcusts5e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bcusts5e, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  bcusts5e_ = bcusts5e;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Bcusts5e)
}

// optional .apollo.canbus.Pulsecnt65 Pulsecnt65 = 13;
inline bool Nio::_internal_has_pulsecnt65() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || pulsecnt65_ != nullptr);
  return value;
}
inline bool Nio::has_pulsecnt65() const {
  return _internal_has_pulsecnt65();
}
inline void Nio::clear_pulsecnt65() {
  if (pulsecnt65_ != nullptr) pulsecnt65_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::apollo::canbus::Pulsecnt65& Nio::_internal_pulsecnt65() const {
  const ::apollo::canbus::Pulsecnt65* p = pulsecnt65_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Pulsecnt65&>(
      ::apollo::canbus::_Pulsecnt65_default_instance_);
}
inline const ::apollo::canbus::Pulsecnt65& Nio::pulsecnt65() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Pulsecnt65)
  return _internal_pulsecnt65();
}
inline void Nio::unsafe_arena_set_allocated_pulsecnt65(
    ::apollo::canbus::Pulsecnt65* pulsecnt65) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulsecnt65_);
  }
  pulsecnt65_ = pulsecnt65;
  if (pulsecnt65) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Pulsecnt65)
}
inline ::apollo::canbus::Pulsecnt65* Nio::release_pulsecnt65() {
  _has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Pulsecnt65* temp = pulsecnt65_;
  pulsecnt65_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Pulsecnt65* Nio::unsafe_arena_release_pulsecnt65() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Pulsecnt65)
  _has_bits_[0] &= ~0x00001000u;
  ::apollo::canbus::Pulsecnt65* temp = pulsecnt65_;
  pulsecnt65_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Pulsecnt65* Nio::_internal_mutable_pulsecnt65() {
  _has_bits_[0] |= 0x00001000u;
  if (pulsecnt65_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Pulsecnt65>(GetArena());
    pulsecnt65_ = p;
  }
  return pulsecnt65_;
}
inline ::apollo::canbus::Pulsecnt65* Nio::mutable_pulsecnt65() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Pulsecnt65)
  return _internal_mutable_pulsecnt65();
}
inline void Nio::set_allocated_pulsecnt65(::apollo::canbus::Pulsecnt65* pulsecnt65) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pulsecnt65_;
  }
  if (pulsecnt65) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pulsecnt65);
    if (message_arena != submessage_arena) {
      pulsecnt65 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulsecnt65, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  pulsecnt65_ = pulsecnt65;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Pulsecnt65)
}

// optional .apollo.canbus.Aebreq79 Aebreq79 = 14;
inline bool Nio::_internal_has_aebreq79() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || aebreq79_ != nullptr);
  return value;
}
inline bool Nio::has_aebreq79() const {
  return _internal_has_aebreq79();
}
inline void Nio::clear_aebreq79() {
  if (aebreq79_ != nullptr) aebreq79_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::apollo::canbus::Aebreq79& Nio::_internal_aebreq79() const {
  const ::apollo::canbus::Aebreq79* p = aebreq79_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Aebreq79&>(
      ::apollo::canbus::_Aebreq79_default_instance_);
}
inline const ::apollo::canbus::Aebreq79& Nio::aebreq79() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Aebreq79)
  return _internal_aebreq79();
}
inline void Nio::unsafe_arena_set_allocated_aebreq79(
    ::apollo::canbus::Aebreq79* aebreq79) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aebreq79_);
  }
  aebreq79_ = aebreq79;
  if (aebreq79) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Aebreq79)
}
inline ::apollo::canbus::Aebreq79* Nio::release_aebreq79() {
  _has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Aebreq79* temp = aebreq79_;
  aebreq79_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Aebreq79* Nio::unsafe_arena_release_aebreq79() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Aebreq79)
  _has_bits_[0] &= ~0x00002000u;
  ::apollo::canbus::Aebreq79* temp = aebreq79_;
  aebreq79_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Aebreq79* Nio::_internal_mutable_aebreq79() {
  _has_bits_[0] |= 0x00002000u;
  if (aebreq79_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Aebreq79>(GetArena());
    aebreq79_ = p;
  }
  return aebreq79_;
}
inline ::apollo::canbus::Aebreq79* Nio::mutable_aebreq79() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Aebreq79)
  return _internal_mutable_aebreq79();
}
inline void Nio::set_allocated_aebreq79(::apollo::canbus::Aebreq79* aebreq79) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete aebreq79_;
  }
  if (aebreq79) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aebreq79);
    if (message_arena != submessage_arena) {
      aebreq79 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aebreq79, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  aebreq79_ = aebreq79;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Aebreq79)
}

// optional .apollo.canbus.Scmsts7b Scmsts7b = 15;
inline bool Nio::_internal_has_scmsts7b() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || scmsts7b_ != nullptr);
  return value;
}
inline bool Nio::has_scmsts7b() const {
  return _internal_has_scmsts7b();
}
inline void Nio::clear_scmsts7b() {
  if (scmsts7b_ != nullptr) scmsts7b_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::apollo::canbus::Scmsts7b& Nio::_internal_scmsts7b() const {
  const ::apollo::canbus::Scmsts7b* p = scmsts7b_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Scmsts7b&>(
      ::apollo::canbus::_Scmsts7b_default_instance_);
}
inline const ::apollo::canbus::Scmsts7b& Nio::scmsts7b() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Scmsts7b)
  return _internal_scmsts7b();
}
inline void Nio::unsafe_arena_set_allocated_scmsts7b(
    ::apollo::canbus::Scmsts7b* scmsts7b) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scmsts7b_);
  }
  scmsts7b_ = scmsts7b;
  if (scmsts7b) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Scmsts7b)
}
inline ::apollo::canbus::Scmsts7b* Nio::release_scmsts7b() {
  _has_bits_[0] &= ~0x00004000u;
  ::apollo::canbus::Scmsts7b* temp = scmsts7b_;
  scmsts7b_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Scmsts7b* Nio::unsafe_arena_release_scmsts7b() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Scmsts7b)
  _has_bits_[0] &= ~0x00004000u;
  ::apollo::canbus::Scmsts7b* temp = scmsts7b_;
  scmsts7b_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Scmsts7b* Nio::_internal_mutable_scmsts7b() {
  _has_bits_[0] |= 0x00004000u;
  if (scmsts7b_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scmsts7b>(GetArena());
    scmsts7b_ = p;
  }
  return scmsts7b_;
}
inline ::apollo::canbus::Scmsts7b* Nio::mutable_scmsts7b() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Scmsts7b)
  return _internal_mutable_scmsts7b();
}
inline void Nio::set_allocated_scmsts7b(::apollo::canbus::Scmsts7b* scmsts7b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scmsts7b_;
  }
  if (scmsts7b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scmsts7b);
    if (message_arena != submessage_arena) {
      scmsts7b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scmsts7b, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  scmsts7b_ = scmsts7b;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Scmsts7b)
}

// optional .apollo.canbus.Accreq7f Accreq7f = 16;
inline bool Nio::_internal_has_accreq7f() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || accreq7f_ != nullptr);
  return value;
}
inline bool Nio::has_accreq7f() const {
  return _internal_has_accreq7f();
}
inline void Nio::clear_accreq7f() {
  if (accreq7f_ != nullptr) accreq7f_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::apollo::canbus::Accreq7f& Nio::_internal_accreq7f() const {
  const ::apollo::canbus::Accreq7f* p = accreq7f_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Accreq7f&>(
      ::apollo::canbus::_Accreq7f_default_instance_);
}
inline const ::apollo::canbus::Accreq7f& Nio::accreq7f() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Accreq7f)
  return _internal_accreq7f();
}
inline void Nio::unsafe_arena_set_allocated_accreq7f(
    ::apollo::canbus::Accreq7f* accreq7f) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accreq7f_);
  }
  accreq7f_ = accreq7f;
  if (accreq7f) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Accreq7f)
}
inline ::apollo::canbus::Accreq7f* Nio::release_accreq7f() {
  _has_bits_[0] &= ~0x00008000u;
  ::apollo::canbus::Accreq7f* temp = accreq7f_;
  accreq7f_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Accreq7f* Nio::unsafe_arena_release_accreq7f() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Accreq7f)
  _has_bits_[0] &= ~0x00008000u;
  ::apollo::canbus::Accreq7f* temp = accreq7f_;
  accreq7f_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Accreq7f* Nio::_internal_mutable_accreq7f() {
  _has_bits_[0] |= 0x00008000u;
  if (accreq7f_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Accreq7f>(GetArena());
    accreq7f_ = p;
  }
  return accreq7f_;
}
inline ::apollo::canbus::Accreq7f* Nio::mutable_accreq7f() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Accreq7f)
  return _internal_mutable_accreq7f();
}
inline void Nio::set_allocated_accreq7f(::apollo::canbus::Accreq7f* accreq7f) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete accreq7f_;
  }
  if (accreq7f) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(accreq7f);
    if (message_arena != submessage_arena) {
      accreq7f = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accreq7f, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  accreq7f_ = accreq7f;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Accreq7f)
}

// optional .apollo.canbus.Motorsts0286 Motorsts0286 = 17;
inline bool Nio::_internal_has_motorsts0286() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || motorsts0286_ != nullptr);
  return value;
}
inline bool Nio::has_motorsts0286() const {
  return _internal_has_motorsts0286();
}
inline void Nio::clear_motorsts0286() {
  if (motorsts0286_ != nullptr) motorsts0286_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::apollo::canbus::Motorsts0286& Nio::_internal_motorsts0286() const {
  const ::apollo::canbus::Motorsts0286* p = motorsts0286_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Motorsts0286&>(
      ::apollo::canbus::_Motorsts0286_default_instance_);
}
inline const ::apollo::canbus::Motorsts0286& Nio::motorsts0286() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Motorsts0286)
  return _internal_motorsts0286();
}
inline void Nio::unsafe_arena_set_allocated_motorsts0286(
    ::apollo::canbus::Motorsts0286* motorsts0286) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motorsts0286_);
  }
  motorsts0286_ = motorsts0286;
  if (motorsts0286) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Motorsts0286)
}
inline ::apollo::canbus::Motorsts0286* Nio::release_motorsts0286() {
  _has_bits_[0] &= ~0x00010000u;
  ::apollo::canbus::Motorsts0286* temp = motorsts0286_;
  motorsts0286_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Motorsts0286* Nio::unsafe_arena_release_motorsts0286() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Motorsts0286)
  _has_bits_[0] &= ~0x00010000u;
  ::apollo::canbus::Motorsts0286* temp = motorsts0286_;
  motorsts0286_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Motorsts0286* Nio::_internal_mutable_motorsts0286() {
  _has_bits_[0] |= 0x00010000u;
  if (motorsts0286_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Motorsts0286>(GetArena());
    motorsts0286_ = p;
  }
  return motorsts0286_;
}
inline ::apollo::canbus::Motorsts0286* Nio::mutable_motorsts0286() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Motorsts0286)
  return _internal_mutable_motorsts0286();
}
inline void Nio::set_allocated_motorsts0286(::apollo::canbus::Motorsts0286* motorsts0286) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete motorsts0286_;
  }
  if (motorsts0286) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(motorsts0286);
    if (message_arena != submessage_arena) {
      motorsts0286 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motorsts0286, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  motorsts0286_ = motorsts0286;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Motorsts0286)
}

// optional .apollo.canbus.Motorsts018e Motorsts018e = 18;
inline bool Nio::_internal_has_motorsts018e() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || motorsts018e_ != nullptr);
  return value;
}
inline bool Nio::has_motorsts018e() const {
  return _internal_has_motorsts018e();
}
inline void Nio::clear_motorsts018e() {
  if (motorsts018e_ != nullptr) motorsts018e_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::apollo::canbus::Motorsts018e& Nio::_internal_motorsts018e() const {
  const ::apollo::canbus::Motorsts018e* p = motorsts018e_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Motorsts018e&>(
      ::apollo::canbus::_Motorsts018e_default_instance_);
}
inline const ::apollo::canbus::Motorsts018e& Nio::motorsts018e() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Motorsts018e)
  return _internal_motorsts018e();
}
inline void Nio::unsafe_arena_set_allocated_motorsts018e(
    ::apollo::canbus::Motorsts018e* motorsts018e) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motorsts018e_);
  }
  motorsts018e_ = motorsts018e;
  if (motorsts018e) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Motorsts018e)
}
inline ::apollo::canbus::Motorsts018e* Nio::release_motorsts018e() {
  _has_bits_[0] &= ~0x00020000u;
  ::apollo::canbus::Motorsts018e* temp = motorsts018e_;
  motorsts018e_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Motorsts018e* Nio::unsafe_arena_release_motorsts018e() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Motorsts018e)
  _has_bits_[0] &= ~0x00020000u;
  ::apollo::canbus::Motorsts018e* temp = motorsts018e_;
  motorsts018e_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Motorsts018e* Nio::_internal_mutable_motorsts018e() {
  _has_bits_[0] |= 0x00020000u;
  if (motorsts018e_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Motorsts018e>(GetArena());
    motorsts018e_ = p;
  }
  return motorsts018e_;
}
inline ::apollo::canbus::Motorsts018e* Nio::mutable_motorsts018e() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Motorsts018e)
  return _internal_mutable_motorsts018e();
}
inline void Nio::set_allocated_motorsts018e(::apollo::canbus::Motorsts018e* motorsts018e) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete motorsts018e_;
  }
  if (motorsts018e) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(motorsts018e);
    if (message_arena != submessage_arena) {
      motorsts018e = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motorsts018e, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  motorsts018e_ = motorsts018e;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Motorsts018e)
}

// optional .apollo.canbus.Epsreqc6 EpsReqC6 = 19;
inline bool Nio::_internal_has_epsreqc6() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || epsreqc6_ != nullptr);
  return value;
}
inline bool Nio::has_epsreqc6() const {
  return _internal_has_epsreqc6();
}
inline void Nio::clear_epsreqc6() {
  if (epsreqc6_ != nullptr) epsreqc6_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::apollo::canbus::Epsreqc6& Nio::_internal_epsreqc6() const {
  const ::apollo::canbus::Epsreqc6* p = epsreqc6_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Epsreqc6&>(
      ::apollo::canbus::_Epsreqc6_default_instance_);
}
inline const ::apollo::canbus::Epsreqc6& Nio::epsreqc6() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.EpsReqC6)
  return _internal_epsreqc6();
}
inline void Nio::unsafe_arena_set_allocated_epsreqc6(
    ::apollo::canbus::Epsreqc6* epsreqc6) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epsreqc6_);
  }
  epsreqc6_ = epsreqc6;
  if (epsreqc6) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.EpsReqC6)
}
inline ::apollo::canbus::Epsreqc6* Nio::release_epsreqc6() {
  _has_bits_[0] &= ~0x00040000u;
  ::apollo::canbus::Epsreqc6* temp = epsreqc6_;
  epsreqc6_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Epsreqc6* Nio::unsafe_arena_release_epsreqc6() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.EpsReqC6)
  _has_bits_[0] &= ~0x00040000u;
  ::apollo::canbus::Epsreqc6* temp = epsreqc6_;
  epsreqc6_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Epsreqc6* Nio::_internal_mutable_epsreqc6() {
  _has_bits_[0] |= 0x00040000u;
  if (epsreqc6_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Epsreqc6>(GetArena());
    epsreqc6_ = p;
  }
  return epsreqc6_;
}
inline ::apollo::canbus::Epsreqc6* Nio::mutable_epsreqc6() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.EpsReqC6)
  return _internal_mutable_epsreqc6();
}
inline void Nio::set_allocated_epsreqc6(::apollo::canbus::Epsreqc6* epsreqc6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete epsreqc6_;
  }
  if (epsreqc6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(epsreqc6);
    if (message_arena != submessage_arena) {
      epsreqc6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epsreqc6, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  epsreqc6_ = epsreqc6;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.EpsReqC6)
}

// optional .apollo.canbus.Epsstatus01d5 Epsstatus01D5 = 20;
inline bool Nio::_internal_has_epsstatus01d5() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || epsstatus01d5_ != nullptr);
  return value;
}
inline bool Nio::has_epsstatus01d5() const {
  return _internal_has_epsstatus01d5();
}
inline void Nio::clear_epsstatus01d5() {
  if (epsstatus01d5_ != nullptr) epsstatus01d5_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::apollo::canbus::Epsstatus01d5& Nio::_internal_epsstatus01d5() const {
  const ::apollo::canbus::Epsstatus01d5* p = epsstatus01d5_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Epsstatus01d5&>(
      ::apollo::canbus::_Epsstatus01d5_default_instance_);
}
inline const ::apollo::canbus::Epsstatus01d5& Nio::epsstatus01d5() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Epsstatus01D5)
  return _internal_epsstatus01d5();
}
inline void Nio::unsafe_arena_set_allocated_epsstatus01d5(
    ::apollo::canbus::Epsstatus01d5* epsstatus01d5) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epsstatus01d5_);
  }
  epsstatus01d5_ = epsstatus01d5;
  if (epsstatus01d5) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Epsstatus01D5)
}
inline ::apollo::canbus::Epsstatus01d5* Nio::release_epsstatus01d5() {
  _has_bits_[0] &= ~0x00080000u;
  ::apollo::canbus::Epsstatus01d5* temp = epsstatus01d5_;
  epsstatus01d5_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Epsstatus01d5* Nio::unsafe_arena_release_epsstatus01d5() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Epsstatus01D5)
  _has_bits_[0] &= ~0x00080000u;
  ::apollo::canbus::Epsstatus01d5* temp = epsstatus01d5_;
  epsstatus01d5_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Epsstatus01d5* Nio::_internal_mutable_epsstatus01d5() {
  _has_bits_[0] |= 0x00080000u;
  if (epsstatus01d5_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Epsstatus01d5>(GetArena());
    epsstatus01d5_ = p;
  }
  return epsstatus01d5_;
}
inline ::apollo::canbus::Epsstatus01d5* Nio::mutable_epsstatus01d5() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Epsstatus01D5)
  return _internal_mutable_epsstatus01d5();
}
inline void Nio::set_allocated_epsstatus01d5(::apollo::canbus::Epsstatus01d5* epsstatus01d5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete epsstatus01d5_;
  }
  if (epsstatus01d5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(epsstatus01d5);
    if (message_arena != submessage_arena) {
      epsstatus01d5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epsstatus01d5, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  epsstatus01d5_ = epsstatus01d5;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Epsstatus01D5)
}

// optional .apollo.canbus.Epsstatus02d6 Epsstatus02D6 = 21;
inline bool Nio::_internal_has_epsstatus02d6() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || epsstatus02d6_ != nullptr);
  return value;
}
inline bool Nio::has_epsstatus02d6() const {
  return _internal_has_epsstatus02d6();
}
inline void Nio::clear_epsstatus02d6() {
  if (epsstatus02d6_ != nullptr) epsstatus02d6_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::apollo::canbus::Epsstatus02d6& Nio::_internal_epsstatus02d6() const {
  const ::apollo::canbus::Epsstatus02d6* p = epsstatus02d6_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Epsstatus02d6&>(
      ::apollo::canbus::_Epsstatus02d6_default_instance_);
}
inline const ::apollo::canbus::Epsstatus02d6& Nio::epsstatus02d6() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Nio.Epsstatus02D6)
  return _internal_epsstatus02d6();
}
inline void Nio::unsafe_arena_set_allocated_epsstatus02d6(
    ::apollo::canbus::Epsstatus02d6* epsstatus02d6) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epsstatus02d6_);
  }
  epsstatus02d6_ = epsstatus02d6;
  if (epsstatus02d6) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.canbus.Nio.Epsstatus02D6)
}
inline ::apollo::canbus::Epsstatus02d6* Nio::release_epsstatus02d6() {
  _has_bits_[0] &= ~0x00100000u;
  ::apollo::canbus::Epsstatus02d6* temp = epsstatus02d6_;
  epsstatus02d6_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::canbus::Epsstatus02d6* Nio::unsafe_arena_release_epsstatus02d6() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Nio.Epsstatus02D6)
  _has_bits_[0] &= ~0x00100000u;
  ::apollo::canbus::Epsstatus02d6* temp = epsstatus02d6_;
  epsstatus02d6_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Epsstatus02d6* Nio::_internal_mutable_epsstatus02d6() {
  _has_bits_[0] |= 0x00100000u;
  if (epsstatus02d6_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Epsstatus02d6>(GetArena());
    epsstatus02d6_ = p;
  }
  return epsstatus02d6_;
}
inline ::apollo::canbus::Epsstatus02d6* Nio::mutable_epsstatus02d6() {
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Nio.Epsstatus02D6)
  return _internal_mutable_epsstatus02d6();
}
inline void Nio::set_allocated_epsstatus02d6(::apollo::canbus::Epsstatus02d6* epsstatus02d6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete epsstatus02d6_;
  }
  if (epsstatus02d6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(epsstatus02d6);
    if (message_arena != submessage_arena) {
      epsstatus02d6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epsstatus02d6, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  epsstatus02d6_ = epsstatus02d6;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Nio.Epsstatus02D6)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::canbus::Avpreq15e_AvpapaparkmodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Avpreq15e_AvpapaparkmodType>() {
  return ::apollo::canbus::Avpreq15e_AvpapaparkmodType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Avpreq15e_AvpnbsstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Avpreq15e_AvpnbsstsType>() {
  return ::apollo::canbus::Avpreq15e_AvpnbsstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType>() {
  return ::apollo::canbus::Avpreq15e_AvpadcvcunbsstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Avpreq15e_AvpapastsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Avpreq15e_AvpapastsType>() {
  return ::apollo::canbus::Avpreq15e_AvpapastsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Avpreq15e_AvpbrkmodstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Avpreq15e_AvpbrkmodstsType>() {
  return ::apollo::canbus::Avpreq15e_AvpbrkmodstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Avpreq15e_AvptargearreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Avpreq15e_AvptargearreqType>() {
  return ::apollo::canbus::Avpreq15e_AvptargearreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Avpreq15e_AvpcrtlmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Avpreq15e_AvpcrtlmodeType>() {
  return ::apollo::canbus::Avpreq15e_AvpcrtlmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcusts01218_VcunbsstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcusts01218_VcunbsstsType>() {
  return ::apollo::canbus::Vcusts01218_VcunbsstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcusts01218_TaggearvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcusts01218_TaggearvalidType>() {
  return ::apollo::canbus::Vcusts01218_TaggearvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcusts01218_ActualgearvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcusts01218_ActualgearvalidType>() {
  return ::apollo::canbus::Vcusts01218_ActualgearvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcusts01218_ActualgearType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcusts01218_ActualgearType>() {
  return ::apollo::canbus::Vcusts01218_ActualgearType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcusts01218_VcuepfailType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcusts01218_VcuepfailType>() {
  return ::apollo::canbus::Vcusts01218_VcuepfailType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcusts01218_VcumodindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcusts01218_VcumodindType>() {
  return ::apollo::canbus::Vcusts01218_VcumodindType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType>() {
  return ::apollo::canbus::Vcusts0221c_AccpedelftravelvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType>() {
  return ::apollo::canbus::Vcusts0221c_AccpedacttravelvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType>() {
  return ::apollo::canbus::Brkdrvstatus24c_BrkpressurestsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_VehspdstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_VehspdstsType>() {
  return ::apollo::canbus::Brkdrvstatus24c_VehspdstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_VehspddirType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_VehspddirType>() {
  return ::apollo::canbus::Brkdrvstatus24c_VehspddirType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_EpbswstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_EpbswstsType>() {
  return ::apollo::canbus::Brkdrvstatus24c_EpbswstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_DrvstateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_DrvstateType>() {
  return ::apollo::canbus::Brkdrvstatus24c_DrvstateType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType>() {
  return ::apollo::canbus::Brkdrvstatus24c_BrkpedlstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_BrklistsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_BrklistsType>() {
  return ::apollo::canbus::Brkdrvstatus24c_BrklistsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_EpbfaillampType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_EpbfaillampType>() {
  return ::apollo::canbus::Brkdrvstatus24c_EpbfaillampType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType>() {
  return ::apollo::canbus::Brkdrvstatus24c_EpbwarnlampType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType>() {
  return ::apollo::canbus::Bodystatus24d_DoorajarfrntlestsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_DoorajarfrntristsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_DoorajarfrntristsType>() {
  return ::apollo::canbus::Bodystatus24d_DoorajarfrntristsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_DoorajarrelestsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_DoorajarrelestsType>() {
  return ::apollo::canbus::Bodystatus24d_DoorajarrelestsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType>() {
  return ::apollo::canbus::Bodystatus24d_SeatoccpfrntlefailType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_SteerwhlheatstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_SteerwhlheatstsType>() {
  return ::apollo::canbus::Bodystatus24d_SteerwhlheatstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_TrajarstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_TrajarstsType>() {
  return ::apollo::canbus::Bodystatus24d_TrajarstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_HoodajarstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_HoodajarstsType>() {
  return ::apollo::canbus::Bodystatus24d_HoodajarstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_DoorajarreristsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_DoorajarreristsType>() {
  return ::apollo::canbus::Bodystatus24d_DoorajarreristsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType>() {
  return ::apollo::canbus::Bodystatus24d_SeatoccpfrntlestsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType>() {
  return ::apollo::canbus::Bodystatus24d_CooltlvllowwarnreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_EpbstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_EpbstsType>() {
  return ::apollo::canbus::Driverstatus24e_EpbstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType>() {
  return ::apollo::canbus::Driverstatus24e_VcuaccrpedlovrdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_Ibesp2warningType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_Ibesp2warningType>() {
  return ::apollo::canbus::Driverstatus24e_Ibesp2warningType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_AirbwarnreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_AirbwarnreqType>() {
  return ::apollo::canbus::Driverstatus24e_AirbwarnreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType>() {
  return ::apollo::canbus::Driverstatus24e_SeatbltmidrowristsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType>() {
  return ::apollo::canbus::Driverstatus24e_SeatbltmidrowmidstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType>() {
  return ::apollo::canbus::Driverstatus24e_SeatbltfrntlestsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType>() {
  return ::apollo::canbus::Driverstatus24e_PassairbginhbnlampreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType>() {
  return ::apollo::canbus::Driverstatus24e_SeatoccptfrntristsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_CrashdetdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_CrashdetdType>() {
  return ::apollo::canbus::Driverstatus24e_CrashdetdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_SeatbltfrntristsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_SeatbltfrntristsType>() {
  return ::apollo::canbus::Driverstatus24e_SeatbltfrntristsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType>() {
  return ::apollo::canbus::Driverstatus24e_SeatbltmidrowlestsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType>() {
  return ::apollo::canbus::Vehiclelights2c7_FogfrntlightstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType>() {
  return ::apollo::canbus::Vehiclelights2c7_LeftturnlightstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vehiclelights2c7_RightturnlightstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vehiclelights2c7_RightturnlightstsType>() {
  return ::apollo::canbus::Vehiclelights2c7_RightturnlightstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vehiclelights2c7_LobeamlightstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vehiclelights2c7_LobeamlightstsType>() {
  return ::apollo::canbus::Vehiclelights2c7_LobeamlightstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vehiclelights2c7_HibeamlightstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vehiclelights2c7_HibeamlightstsType>() {
  return ::apollo::canbus::Vehiclelights2c7_HibeamlightstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vehiclelights2c7_EmergcylightstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vehiclelights2c7_EmergcylightstsType>() {
  return ::apollo::canbus::Vehiclelights2c7_EmergcylightstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Vehiclelights2c7_FrntwiperstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Vehiclelights2c7_FrntwiperstsType>() {
  return ::apollo::canbus::Vehiclelights2c7_FrntwiperstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Lightreq336_BrklireqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Lightreq336_BrklireqType>() {
  return ::apollo::canbus::Lightreq336_BrklireqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Lightreq336_FrntwiprstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Lightreq336_FrntwiprstsType>() {
  return ::apollo::canbus::Lightreq336_FrntwiprstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Lightreq336_TurnlightindType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Lightreq336_TurnlightindType>() {
  return ::apollo::canbus::Lightreq336_TurnlightindType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Lightreq336_BeamactivestsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Lightreq336_BeamactivestsType>() {
  return ::apollo::canbus::Lightreq336_BeamactivestsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Lightreq336_BeamlightreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Lightreq336_BeamlightreqType>() {
  return ::apollo::canbus::Lightreq336_BeamlightreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Lightreq336_EmeglampreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Lightreq336_EmeglampreqType>() {
  return ::apollo::canbus::Lightreq336_EmeglampreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Whlspdfront51_WhlspdfrstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Whlspdfront51_WhlspdfrstsType>() {
  return ::apollo::canbus::Whlspdfront51_WhlspdfrstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Whlspdfront51_WhlspdfrdirType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Whlspdfront51_WhlspdfrdirType>() {
  return ::apollo::canbus::Whlspdfront51_WhlspdfrdirType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Whlspdfront51_WhlspdflstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Whlspdfront51_WhlspdflstsType>() {
  return ::apollo::canbus::Whlspdfront51_WhlspdflstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Whlspdfront51_WhlspdfldirType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Whlspdfront51_WhlspdfldirType>() {
  return ::apollo::canbus::Whlspdfront51_WhlspdfldirType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Whlspdrear52_WhlspdrrstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Whlspdrear52_WhlspdrrstsType>() {
  return ::apollo::canbus::Whlspdrear52_WhlspdrrstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Whlspdrear52_WhlspdrrdirType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Whlspdrear52_WhlspdrrdirType>() {
  return ::apollo::canbus::Whlspdrear52_WhlspdrrdirType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Whlspdrear52_WhlspdrlstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Whlspdrear52_WhlspdrlstsType>() {
  return ::apollo::canbus::Whlspdrear52_WhlspdrlstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Whlspdrear52_WhlspdrldirType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Whlspdrear52_WhlspdrldirType>() {
  return ::apollo::canbus::Whlspdrear52_WhlspdrldirType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_TcsactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_TcsactvType>() {
  return ::apollo::canbus::Bcusts5e_TcsactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_ScmavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_ScmavlType>() {
  return ::apollo::canbus::Bcusts5e_ScmavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_HfcactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_HfcactvType>() {
  return ::apollo::canbus::Bcusts5e_HfcactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_VdcactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_VdcactvType>() {
  return ::apollo::canbus::Bcusts5e_VdcactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AvhstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AvhstsType>() {
  return ::apollo::canbus::Bcusts5e_AvhstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AutobrkgactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AutobrkgactvType>() {
  return ::apollo::canbus::Bcusts5e_AutobrkgactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_VdcdeactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_VdcdeactvType>() {
  return ::apollo::canbus::Bcusts5e_VdcdeactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AbaactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AbaactvType>() {
  return ::apollo::canbus::Bcusts5e_AbaactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AutobrkgavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AutobrkgavlType>() {
  return ::apollo::canbus::Bcusts5e_AutobrkgavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_HbaactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_HbaactvType>() {
  return ::apollo::canbus::Bcusts5e_HbaactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AebavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AebavlType>() {
  return ::apollo::canbus::Bcusts5e_AebavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AebactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AebactvType>() {
  return ::apollo::canbus::Bcusts5e_AebactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_CdpavailType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_CdpavailType>() {
  return ::apollo::canbus::Bcusts5e_CdpavailType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AbaavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AbaavlType>() {
  return ::apollo::canbus::Bcusts5e_AbaavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_HdcstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_HdcstsType>() {
  return ::apollo::canbus::Bcusts5e_HdcstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_TcsdeactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_TcsdeactvType>() {
  return ::apollo::canbus::Bcusts5e_TcsdeactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AwbavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AwbavlType>() {
  return ::apollo::canbus::Bcusts5e_AwbavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AbpavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AbpavlType>() {
  return ::apollo::canbus::Bcusts5e_AbpavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AwbactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AwbactvType>() {
  return ::apollo::canbus::Bcusts5e_AwbactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_EbaavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_EbaavlType>() {
  return ::apollo::canbus::Bcusts5e_EbaavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_QdcaccfailType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_QdcaccfailType>() {
  return ::apollo::canbus::Bcusts5e_QdcaccfailType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AbpactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AbpactvType>() {
  return ::apollo::canbus::Bcusts5e_AbpactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_PedpavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_PedpavlType>() {
  return ::apollo::canbus::Bcusts5e_PedpavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_CddsavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_CddsavlType>() {
  return ::apollo::canbus::Bcusts5e_CddsavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_StandstillstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_StandstillstsType>() {
  return ::apollo::canbus::Bcusts5e_StandstillstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_HhcavailType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_HhcavailType>() {
  return ::apollo::canbus::Bcusts5e_HhcavailType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_AbsactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_AbsactvType>() {
  return ::apollo::canbus::Bcusts5e_AbsactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_PedpactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_PedpactvType>() {
  return ::apollo::canbus::Bcusts5e_PedpactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_EbaactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_EbaactvType>() {
  return ::apollo::canbus::Bcusts5e_EbaactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_CdpactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_CdpactvType>() {
  return ::apollo::canbus::Bcusts5e_CdpactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_EbdactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_EbdactvType>() {
  return ::apollo::canbus::Bcusts5e_EbdactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_ScmactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_ScmactvType>() {
  return ::apollo::canbus::Bcusts5e_ScmactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_DtcactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_DtcactvType>() {
  return ::apollo::canbus::Bcusts5e_DtcactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_HrbactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_HrbactvType>() {
  return ::apollo::canbus::Bcusts5e_HrbactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_EcdttempoffsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_EcdttempoffsType>() {
  return ::apollo::canbus::Bcusts5e_EcdttempoffsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_CddsactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_CddsactvType>() {
  return ::apollo::canbus::Bcusts5e_CddsactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Bcusts5e_HhcactvType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Bcusts5e_HhcactvType>() {
  return ::apollo::canbus::Bcusts5e_HhcactvType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pulsecnt65_WhlplscntrrvldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pulsecnt65_WhlplscntrrvldType>() {
  return ::apollo::canbus::Pulsecnt65_WhlplscntrrvldType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pulsecnt65_WhlplscntrlvldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pulsecnt65_WhlplscntrlvldType>() {
  return ::apollo::canbus::Pulsecnt65_WhlplscntrlvldType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pulsecnt65_WhlplscntfrvldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pulsecnt65_WhlplscntfrvldType>() {
  return ::apollo::canbus::Pulsecnt65_WhlplscntfrvldType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pulsecnt65_WhlplscntflvldType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pulsecnt65_WhlplscntflvldType>() {
  return ::apollo::canbus::Pulsecnt65_WhlplscntflvldType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_AbareqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_AbareqType>() {
  return ::apollo::canbus::Aebreq79_AbareqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_AbasnvtylvlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_AbasnvtylvlType>() {
  return ::apollo::canbus::Aebreq79_AbasnvtylvlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_AwbsnvtylvlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_AwbsnvtylvlType>() {
  return ::apollo::canbus::Aebreq79_AwbsnvtylvlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_AwbreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_AwbreqType>() {
  return ::apollo::canbus::Aebreq79_AwbreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_ScmdecelreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_ScmdecelreqType>() {
  return ::apollo::canbus::Aebreq79_ScmdecelreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_AebdecelreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_AebdecelreqType>() {
  return ::apollo::canbus::Aebreq79_AebdecelreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_EbadecelreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_EbadecelreqType>() {
  return ::apollo::canbus::Aebreq79_EbadecelreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_AbpreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_AbpreqType>() {
  return ::apollo::canbus::Aebreq79_AbpreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Aebreq79_PedpdecreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Aebreq79_PedpdecreqType>() {
  return ::apollo::canbus::Aebreq79_PedpdecreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_ScmfailstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_ScmfailstsType>() {
  return ::apollo::canbus::Scmsts7b_ScmfailstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_HilowbeampushswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_HilowbeampushswtstsType>() {
  return ::apollo::canbus::Scmsts7b_HilowbeampushswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_FrntwiprswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_FrntwiprswtstsType>() {
  return ::apollo::canbus::Scmsts7b_FrntwiprswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_TurnindcrswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_TurnindcrswtstsType>() {
  return ::apollo::canbus::Scmsts7b_TurnindcrswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_FoglipushswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_FoglipushswtstsType>() {
  return ::apollo::canbus::Scmsts7b_FoglipushswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_FrntwiprinterspdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_FrntwiprinterspdType>() {
  return ::apollo::canbus::Scmsts7b_FrntwiprinterspdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType>() {
  return ::apollo::canbus::Scmsts7b_MenuorvoldwnpushswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType>() {
  return ::apollo::canbus::Scmsts7b_AccspdincorresuswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_AcctimegapincswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_AcctimegapincswtstsType>() {
  return ::apollo::canbus::Scmsts7b_AcctimegapincswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_SelnpushswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_SelnpushswtstsType>() {
  return ::apollo::canbus::Scmsts7b_SelnpushswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_ModetogdecswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_ModetogdecswtstsType>() {
  return ::apollo::canbus::Scmsts7b_ModetogdecswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_ModetogincswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_ModetogincswtstsType>() {
  return ::apollo::canbus::Scmsts7b_ModetogincswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_MenupushswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_MenupushswtstsType>() {
  return ::apollo::canbus::Scmsts7b_MenupushswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_SwcfailstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_SwcfailstsType>() {
  return ::apollo::canbus::Scmsts7b_SwcfailstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_AccspddecswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_AccspddecswtstsType>() {
  return ::apollo::canbus::Scmsts7b_AccspddecswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_MenulepushswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_MenulepushswtstsType>() {
  return ::apollo::canbus::Scmsts7b_MenulepushswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType>() {
  return ::apollo::canbus::Scmsts7b_MenuorvoluppushswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType>() {
  return ::apollo::canbus::Scmsts7b_AcctimegapdecswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_MenuripushswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_MenuripushswtstsType>() {
  return ::apollo::canbus::Scmsts7b_MenuripushswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scmsts7b_AccsetswtstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scmsts7b_AccsetswtstsType>() {
  return ::apollo::canbus::Scmsts7b_AccsetswtstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Accreq7f_AccdrvoffType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Accreq7f_AccdrvoffType>() {
  return ::apollo::canbus::Accreq7f_AccdrvoffType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Accreq7f_AccdestopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Accreq7f_AccdestopType>() {
  return ::apollo::canbus::Accreq7f_AccdestopType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Accreq7f_AccmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Accreq7f_AccmodeType>() {
  return ::apollo::canbus::Accreq7f_AccmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Accreq7f_AcchvydecelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Accreq7f_AcchvydecelType>() {
  return ::apollo::canbus::Accreq7f_AcchvydecelType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Accreq7f_AccheavymodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Accreq7f_AccheavymodeType>() {
  return ::apollo::canbus::Accreq7f_AccheavymodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Motorsts0286_FrntmottqvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Motorsts0286_FrntmottqvalidType>() {
  return ::apollo::canbus::Motorsts0286_FrntmottqvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Motorsts0286_FrntmotspdvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Motorsts0286_FrntmotspdvalidType>() {
  return ::apollo::canbus::Motorsts0286_FrntmotspdvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Motorsts018e_RearmottqvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Motorsts018e_RearmottqvalidType>() {
  return ::apollo::canbus::Motorsts018e_RearmottqvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Motorsts018e_RearmotspdvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Motorsts018e_RearmotspdvalidType>() {
  return ::apollo::canbus::Motorsts018e_RearmotspdvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsreqc6_EpsreqtypType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsreqc6_EpsreqtypType>() {
  return ::apollo::canbus::Epsreqc6_EpsreqtypType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsreqc6_SysvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsreqc6_SysvalidType>() {
  return ::apollo::canbus::Epsreqc6_SysvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsreqc6_PilotsymType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsreqc6_PilotsymType>() {
  return ::apollo::canbus::Epsreqc6_PilotsymType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsreqc6_AdcaccsymType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsreqc6_AdcaccsymType>() {
  return ::apollo::canbus::Epsreqc6_AdcaccsymType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus01d5_EpswarnlampType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus01d5_EpswarnlampType>() {
  return ::apollo::canbus::Epsstatus01d5_EpswarnlampType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus01d5_AbsagreqavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus01d5_AbsagreqavlType>() {
  return ::apollo::canbus::Epsstatus01d5_AbsagreqavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus01d5_EpsstsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus01d5_EpsstsType>() {
  return ::apollo::canbus::Epsstatus01d5_EpsstsType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus01d5_EpsmodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus01d5_EpsmodType>() {
  return ::apollo::canbus::Epsstatus01d5_EpsmodType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus01d5_SteeragspddirType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus01d5_SteeragspddirType>() {
  return ::apollo::canbus::Epsstatus01d5_SteeragspddirType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus01d5_SteerangledirType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus01d5_SteerangledirType>() {
  return ::apollo::canbus::Epsstatus01d5_SteerangledirType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType>() {
  return ::apollo::canbus::Epsstatus01d5_SteerangleandspdvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus02d6_EpstqreqavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus02d6_EpstqreqavlType>() {
  return ::apollo::canbus::Epsstatus02d6_EpstqreqavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType>() {
  return ::apollo::canbus::Epsstatus02d6_EpspinionangreqavlType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType>() {
  return ::apollo::canbus::Epsstatus02d6_EpshandsoffdetnconfidenceType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus02d6_EpspinionagvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus02d6_EpspinionagvalidType>() {
  return ::apollo::canbus::Epsstatus02d6_EpspinionagvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType>() {
  return ::apollo::canbus::Epsstatus02d6_EpsdrvoverridedetnType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType>() {
  return ::apollo::canbus::Epsstatus02d6_EpsmotortqvalidType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType>() {
  return ::apollo::canbus::Epsstatus02d6_EpsestrackforcevalidType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nio_2eproto
